#------------------------------------------------------------------------
# Source File Information (DO NOT MODIFY)
# Source ID: 5aaf69d7-eb7f-4585-ab8c-9c7ccdc78eda
# Source File: ..\Documents\SAPIEN\PowerShell Studio\Projects\IST491_Spurlock_I_SeniorProject\IST491_Spurlock_I_SeniorProject.psproj
#------------------------------------------------------------------------
#region Project Recovery Data (DO NOT MODIFY)
<#RecoveryData:
GAIAAB+LCAAAAAAABACNkl1rgzAUhu8L/Q/ivbVCnQoxF2vX4cU+qLJbOcbjyBYTiTrWf790xmEZ
jN3lSc77PiSEnJCpD9TnAwxA1yvHIc9avSEbvsHgC+qeK0mDTUD8GezZkQvMDjQEaG6SOvKwihpv
F8ahB1XMvIRFjNUsirEG4tthG7WW4twh3RJ/iXO5ErXROf7S1luw6JywQY2S4SO0mLqucztyUafu
1qX5AHoYu03X95P87+gehPAegMuj0m3Z9c2ya943Zc2/y+6FqkCYqmBR5exV24Ks7z4HlJe3TN1C
j+jSabo3huDKMMF07593muhJ81cuQVwGLl6a5cUuCcq8G7VQ7L3MyhwlV9qmTHdnVsT/FVyviH/1
E74AlRlWLRgCAAA=#>
#endregion
<#
    .NOTES
    --------------------------------------------------------------------------------
     Code generated by:  SAPIEN Technologies, Inc., PowerShell Studio 2016 v5.2.120
     Generated on:       5/3/2016 5:16 PM
     Generated by:       Isaac
     Organization:       Marshall University
    --------------------------------------------------------------------------------
    .DESCRIPTION
        Script generated by PowerShell Studio 2016
#>


#region Source: Startup.pss
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
YgMAAB+LCAAAAAAABAC9k01LA0EMhu9C/8PQ87If3a5rYXZBWnopqFhRr9lttgzOR0lmLPvvbatU
0YMgsuSSNyF5CEnkPbbuFalfgAdxcFg5W40n43p0IYS8JbVVFvRSabwBg/XaA/mwi3fMMvmRPdVc
M6NptEI+6c9IXxtuHWnVROLxgzSN06NFYh60D4SVxeAJdCTuwqFHu8L+wb2grZqyhKItLrNZPsX0
aiaTc9fvlHXPHs0QjPhJ2Y3bc7x0ZHgQ4nFPw4AI9spu/8JK867oyi7LNkUKOfzOejZ6kJnmjvD/
QWf5fvIy+fpT9RvJGdnIYgMAAA==#>
#endregion
#----------------------------------------------
#region Import Assemblies
#----------------------------------------------
[void][Reflection.Assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
[void][Reflection.Assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
#endregion Import Assemblies

#Define a Param block to use custom parameters in the project
#Param ($CustomParameter)

function Main {
<#
    .SYNOPSIS
        The Main function starts the project application.
    
    .PARAMETER Commandline
        $Commandline contains the complete argument string passed to the script packager executable.
    
    .NOTES
        Use this function to initialize your script and to call GUI forms.
		
    .NOTES
        To get the console output in the Packager (Forms Engine) use: 
		$ConsoleOutput (Type: System.Collections.ArrayList)
#>
	Param ([String]$Commandline)
		
	#--------------------------------------------------------------------------
	#TODO: Add initialization script here (Load modules and check requirements)
	
	
	#--------------------------------------------------------------------------
	
	if((Call-MainForm_psf) -eq 'OK')
	{
		
	}
	
	$global:ExitCode = 0 #Set the exit code for the Packager
}





begin
{
	Set-StrictMode -Version Latest
	$ErrorActionPreference = "Stop"
	
	function CreateHostsEntryObject(
	[string]$ipAddress,
	[string[]]$hostnames,
        <# [string] #>	$comment) #HACK: never $null if type is specified

	{
		$hostsEntry = New-Object PSObject
		$hostsEntry | Add-Member NoteProperty -Name "IpAddress" `
								 -Value $ipAddress
		
		[System.Collections.ArrayList]$hostnamesList =
		New-Object System.Collections.ArrayList
		
		$hostsEntry | Add-Member NoteProperty -Name "Hostnames" `
								 -Value $hostnamesList
		
		If ($hostnames -ne $null)
		{
			$hostnames | foreach {
				$hostsEntry.Hostnames.Add($_) | Out-Null
			}
		}
		
		$hostsEntry | Add-Member NoteProperty -Name "Comment" -Value $comment
		
		return $hostsEntry
	}
	
	function ParseHostsEntry(
	[string]$line)
	{
		$hostsEntry = CreateHostsEntryObject
		
		Write-Debug "Parsing hosts entry: $line"
		
		If ($line.Contains("#") -eq $true)
		{
			If ($line -eq "#")
			{
				$hostsEntry.Comment = [string]::Empty
			}
			Else
			{
				$hostsEntry.Comment = $line.Substring($line.IndexOf("#") + 1)
			}
			
			$line = $line.Substring(0, $line.IndexOf("#"))
		}
		
		$line = $line.Trim()
		
		If ($line.Length -gt 0)
		{
			$hostsEntry.IpAddress = ($line -Split "\s+")[0]
			
			Write-Debug "Parsed address: $($hostsEntry.IpAddress)"
			
			[string[]]$parsedHostnames = $line.Substring(
			$hostsEntry.IpAddress.Length + 1).Trim() -Split "\s+"
			
			Write-Debug ("Parsed hostnames ($($parsedHostnames.Length)):" `
			+ " $parsedHostnames")
			
			$parsedHostnames | foreach {
				$hostsEntry.Hostnames.Add($_) | Out-Null
			}
		}
		
		return $hostsEntry
	}
	
	function ParseHostsFile
	{
		$hostsEntries = New-Object System.Collections.ArrayList
		
		[string]$hostsFile = $env:WINDIR + "\System32\drivers\etc\hosts"
		
		If ((Test-Path $hostsFile) -eq $false)
		{
			Write-Verbose "Hosts file does not exist."
		}
		Else
		{
			[string[]]$hostsContent = Get-Content $hostsFile
			
			$hostsContent | foreach {
				$hostsEntry = ParseHostsEntry $_
				
				$hostsEntries.Add($hostsEntry) | Out-Null
			}
		}
		
		# HACK: Return an array (containing the ArrayList) to avoid issue with
		# PowerShell returning $null (when hosts file does not exist)
		return, $hostsEntries
	}
	
	[Collections.ArrayList]$hostsEntries = ParseHostsFile
}

process
{
	$hostsEntries | foreach {
		$hostsEntry = $_
		
		$hostsEntry.Hostnames | foreach {
			$properties = @{
				Hostname = $_
				IpAddress = $hostsEntry.IpAddress
			}
			
			New-Object PSObject -Property $properties
		}
	}
}#endregion Source: Startup.pss

#region Source: MainForm.psf
function Call-MainForm_psf
{
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
dpwBAB+LCAAAAAAABADlXW1v2zqW/r7A/gch2A+zQKf1W+Jk0AZIk/Y2s0njG+feO98CxaIdbWTJ
0EvS7K8fkqL8IksUD0VRphYzGExbS3x4nkeHh4eH5Od7NAteUfh+Zce2hf9P5Ab+l6PB0fl//odl
fb4L3YXr295310M/7SU6v7Vd/3sQLj+uovnnT3v/nD709L9oFlvx+wp9OZq+RzFafvzL9Z3gLfpI
nk3/94NV9E8frD8ZhtHHHvnPB+sy8eIkRF98lMSh7X2wJsmT587+B70/BC/I//I0HtvHs+OT/tlw
hHqnZ0eWj6F8OZrj9z1meI+s2bPrOSH+/dFl4Mdh4EVpHzHgSRisUBi/swcvPRf58dT9P3R03u+P
Tj9Y497J50/Zr0qeIi3dIj+ZxqG7yl6Nf3aP5gg3O0Psd0v8m4j8pn9kfcreVfVyYtyj850eVT4z
je0wngSRG2NzHp1f4j6hcDoLEfIrn31Av+Kj8xs7iq1Bz/r2ip+NrN8Td/ZiYevMXvZfQH/Dnr4J
bCeH9pH83edP9FfZI9U6ubGfkNe4UDzSyuNdEq+SmP5/nlj2bfUd/+Lo/NadhUEUzGNravuRNUWh
O/9gnX0cH6/iPWvtv+QmmNkpT1hug7O+wCOpJvbACzzJpN3DNhsMBX7/YD9d+w76RZ4R+TkVzz2K
MB/RPwQfuPDchU/M6DgeSrW6L7JPqWTEBfQ1iePAb1xBT7SZx8tg9X4TLCKYfjbUD/p9wog4+bl2
hak/HYGZPxMmnqCxBOH8EaE/3SixvWn87qGv9uzlMvCC8Oj8IUxQ0fPbboZ6oj0jPDIHteNqDl04
HrLDOsrpD3pyyskaFpfOMVg6p+LSIXDa0E5mBiPFg4XPnG09x3MqQtSe42FNN+l7xjDfI45Isfth
DZsoIgadfgj1nBBcRdttN+mH9mN4vh9qRUfbxlAjpHt39ky69TX41biaQtxWjNt6Cn49euDx7HqJ
bgMHk3vlRvaTV2i5UvUNe8DgKY9VXHrDkw/WqVAkvNbeSFh763+tkA359eWz7S+Qs9+Xx61/NVU/
AZ3TyMzFLoMkdFFo/URvmKiPA+gUDI9Qw77IoLMvpBS0wKP37uI5fghu0BwD/hmIz9r6wyGGNxYa
E9fyE3KUlfLLPfBXEDp/hfbq6Py77UWVfq5UsKnNVEoWd5xppXHFxvbTLG2qrzBtABfsQFyvW5BF
ZIc8bG3kMCWJuL1tpfbPhML/tVIHRb8WYnxiL5AOule4ncdZsMSaRRWxUhVnRaMCh7WdloUendiO
4/oL7ACwz0j/K/RcxuAAR1n9cRHnPA4Ff88idkB3oHHWwSUZ8S+RH6Gb6iwjXzx9Movq94qSMuUK
2ocg+HimhpOSkLviiy5WeZkgLmax+0q7aU1jO04KM4h7g8IBco1BO8ksxr+uTfdofIbp7osacpvu
HAoY46UZYj7jxyDCGUILQzSV6lXahRf0Xoflk95QluUNABDBg9FQ7pMWfiTPsKEEM6cZUYdUh2M8
ryAcF4+QQo47xQD7jkdncjSLwmTLhSlAQym+Xl04mNOoFr30Ey5cvatid928lg+4Lxo5pMxeTywe
OgPIJYEwwa9mKJZjeAcDMPQ6laO5aFIoQrOpA3Gyit0lEljEFyD5RGYg3gKgh+GipHY5w39QeKay
++1f3yYB/rmigHok8xXvYtDDMSye/vYLzRI6f0qBmsr23VTRvKkoAVVFM2tcD7+wCfId/ivcP3/B
aDCV38n0Hi2DWFEy5FR0qNuZHG9D0JIM6QNnTlMrRWh4LuT+aqKGZqlBOWtdD8NFGexyhjE2w7md
oHDpRuSNaiiWGpZzIPQwLQqUfctriIYTjln1MRxlhEsN0DkQegiH5UM2EA0nnA2TOOSYqkmA1Rms
1yi0pMBgeZIsnjCUZzwWKSJYdpjWyKyo01kP04aSuhl2FHFbc3zWSDEs+7WBaCjTaXKnPss0iS31
BW8j0JLHlsl+Gcou+rWi6ZzazEp9v1nrWlgFrh+XAzt8Vu+mir5XySyXxLc6PD79YA2Fc1bcEthy
Vu+mChnVW0u/SmG7qBar2MjHou4t5XSveRCtZ3JjLLgSAIYNXvFl8arrN7Ypqq03w2VM1M3DpJzG
RO8MDJZOI+AUOg5dde9ZKXRWDUntDWZXaidypRcSrhVIRVLUFcEXVNfEc+RFa9WExbLJ6QDkxfYo
l+xOLnA+OyXvRYYpL3ov1Oz+XxxeZfQC+Qg/p78wmjWspy6arCuOxVBWxbXFjuw3QG8aKYv+LQyS
lQ7ftyAN4Q/jtM5wdjw+wXNWkKNatwub0/QJ9UPhvOAm/BX2NPbTNA44u2rKRZOe0HFr+/h7WGJf
UvbwoUXM1cxz5z/YYZRl5itiZeGnWIzMW+DnRsll0ixj8vb2UvgJmRiZGyWXxcaFUdQByilCsyR0
4/eJYMKEu0LVx3jGZT6iQl67QHSJbST+MaRimzKYFhCncuHt2st0GS6XswiFr+5MJBFQqUFZF7eF
Qpu3AzzEBAgEqFx5W1YyXXZzN0RvtufhLtUeV2Ud3xYGbaIrC8nKRPedYWxPdFtWMl10sR29LBeh
Cs31e2XrdhWi22DQprmylYoyzT1giCw+L0sgaNDdxlCmyy56tkMlo+tI3HvsRngUgDa9ibtjNrDC
4KkP6Gj7pquM4v7TRW/V+/35UjuRF9oWBm1qE/fDbOcB1QEQpHLNbVkKJDy5FQLtabJxraVi2SSZ
aCkNS5KdDMguV+ESq43kAAl82SQZL7N6gM5ntd7AXz+ykvQ9Gwi6XE/pQg5nYZm7xbzoSeWeZ2Mn
00e8ZRA/o/ApsEOn/hxSMpzfwqBLdmUp+tIsLYX4FQRRfepiYyfTZXfhuXbUaraMIQAKblx2GGWl
4KABPRSfcrUxAKYrDXigR1VQL5kmEznSQ72Tg2qOd66HFs3tmKmLMf1JnZh+MB7JRvWiT7Go/ozE
kCfwGpvCQ1lLHpGN6tk22ctgubR9p7Q07dD8UEhhXy5rhlmklg+wxrzjhNYQgA6oP5BOLEDjrIzc
26v2nNDaTKYPfavoGXle2p3WCi+2QYB1xysk5eoOujA+Cd5QOCVILc7GPi3y2zaY6QqMnpMYv9+v
GeeP+nhyKen0Mgi6Av0BtABoCgXYQO4+RWC62qYo/vYLKakFIoqTXp7cxqFNdvBKjLj1KqBtQ5ku
Ptx3/9IJ3deaQy2VnuxguwGhTXfQYozL/2pPbxvzmK62EMURufVPgdZkUxoZBG1Kg5Zg3CMYvgYm
EqmFTBfbYpWsHFvBHKJfcLumkNYyBNomEKVHmZeJ7Q+Kz6IJpdbH1cxcpgsvnQRdRJGLvyN/Vl+A
sitUeSD6dAitzGAJFAmoDeVRNki6ocYrFL2QzGVbKwk7KPTpELqUwHQIxdmQCBmMeisKJuzJ9FH8
FoQvZMej9m2Zm7aFHm5nZ2ZxQrpYwz9hHerG5sxBrVP+pBeoRNea2MkkQ3KaYKkL5dAvfI6Q/AIV
k4117ZOL0allTFmkup4Q0ArifMnBLW0fOKqdyg5qpYfmlzH7G4qt64kFwqh8REttZHowtRIYoip1
Jr0mVebSGxAZeCUKgk394hNu3XRpsTjkPkhi9EBul62ZJOvVSMjuYdElO2hZLUVowSAqV9+etUyX
YnYw8Ksbvz+gqG66lpTljCVLu/NQwFPHvqQSoeuh20AtEFLleszbzHQ52o69ilHo1o7xqBJlNzht
odAmQugqVRbDX6RY25PglrEMV9/1BOts7taP+iR1l7WvawSGriDgiQUQoGqxZRYyXGiP7OO9Joe3
ze26ywbU18nGf3ko2hwedGq7SVpAkSp3eXmbmS7HKFku7bBuRVJvUON0ohQB1PNJ7zsAH0sExKe+
Ai4FYLrSfgRR/N2tO+GtMcnIAOgaY6ElIQSfBQKoXGqZiUzX2s/IC4KXpOZCKE2uHMsOrgyCLrVB
10DB+NQPpQxBF7dS9Wsdin0svVIlusWJbaUa0wMS4KeIit8FKr9Sha32mtJiygLVrR291PQ4w7F8
OE+ah4bwfektw+CjRCHolPsa0rrpgxrpww3yF/FzXZHVyI9tQOiTGjSQIhgtIMhGFJdiMF13T2Fg
OzM7itnF8a0F8Hkg4HyFtAKhO0W/Zkizm+zb02HeaIarMY0K4q+uXztrIZ852wGhT4XQZdMUn3Vd
fGegDvXtGMpw5T3O0s5coZm7rL5ZolJ7shPLXRj61Afdw8cAtim/nK26X2EretC3+vpa7uHeh1Fd
W+w+S5K+kO50o7Z2WKu29mwgm7IQvYsrK64l3JfeLSCR91eYsqg4QP4QWR/VnUvKnHK2bhw4eg3I
7Vp9yEgkFcKLCKBCAtW334iNH5ovfoNcFCEfWpeOJTkUgBdMn4MwniVx9M0npXlOFXmlYwu9v61c
KzyJcWa1RfHtAUa4TLy/J0hsbsWTACkOGJUv9FcEudtIwCRW7OKWW7Mr++ChEOViXG6Uu22s8hjX
OBlOBXcyVqmQcziPmAqnvE2CDYgQgpeNOjCEzWlwyt3IaKAEBY+x4C8jDxS4win3uIgGVFi+oFyu
QhjEJmXIPdnCOB2y00KUKLG2O6w6uqQBLUI+HrHzVXSqkWEB69GMtOh94vvkLm4ld8zVqGbN4QAv
T8oWFELrCRlOq/3b5nIWMz0/n00bL5I4IDub698BJn0dUx4JUIzyx1ABtQgH2MBlmzlbmS7D7HO6
cqM0FdHW7Yd5ILpECF4oguJr4KjHXUt1RYK3tp8oWKmscdboNg5d+oPubQKia0x9KQ4N1bB6xbiM
Zp7rCxRGcgpiT0tXJSsUyBoHLTHxQ0HOEoPUWtFHDFHwQRnl8W7sSW1TJjgjF8BXYYBtKnB5j/oV
8HXTB7wELtbG+i4zQH+6sQZ+XPd8KdELCnfXQUWr6Rn5x3QJHHBYVEUWReEKOBONicdL3b2isN/r
3T61lsFYIwBGStJ3MEFTFwQgjgZ71u3X9sKltZVMj9Lv3nz8xtbqCNPmdUkNWkENRKdeZbR90yU2
EQ2HKlV2KqkyfhTRgNAkrmwFAlSutTUE0+V2j2YYuPd+n9S8VIckHQAb9XfXATYgdGkOmvHKIFoQ
jOrT/xtDaUg66C5lY9MxKo06qYce0aLoWa5sRrgPARbgc4vQoHUjJuSIHlC4dH2hWxw4E/f+AExV
vn0QT9wMJbzGrNhXQKEpThKtmxdOEx2evB7s6CWtxw1rze/HZN4NK3LfAwASGD3cCS4w0UwpExjZ
LQtDp1ZjW9bpVC4SkU54waKFXOS66QPORQr+nmo01c6NaIe6kYxMWYwWCM9ERVbxymWE41rYsFgM
ARbEkFMG+qV3nSoYHuWzlGs5WVd2bJuSoKRcvLroDYViC2o8SYzlp/Q5HNBCq95Y18ltKc1/UqTt
TbNy5jJ9jr8eWmI7rp9WKj17SESDGQqwAnXly6cgdM0oLzNSJ3QXITuc1Tz+pkbKfAuDNs1BD4ee
UnjWPAgtMndrWX2psbp4wtvjxWpF+3MjEOHz9HhMjvyT2zq9gwEUnQ1I7qJ/InqxkdboDHcKE0Gt
Y6Xyur6y7tEcYfOWHv17cP4qRE9BQIhRcFiXdAHeGgS4Gn4oW3wHPReObY6wfrhRHLR5zO7aVqaP
lMQphGEQ1tZejfhsCwNUeoORrPSg4RkGaVGU7Yluy06my46OwJfPtr9AkRq3J1v4nkMC9n2yAhxC
157TC5kZ0vZEmLOX6ULE39QP3BcV7k/2HtwNBH3eD1phQ7wfAdmq82NWMl1yP9HbP4MnNV5PdtPZ
GoM+fwc9mBVDtDDGFl3d2kimKw53PcaAkHMbONhGgWfHqLb+juXH3BI8YPcnvelHou4rBWwRxK0W
fxUZznR9Xvt4Wud5bJeLGs8oW1e9h0XfbBjqIRnUA9gcvmc00xXJekKSokpmxjU3RTIc+hwktEgx
O8luXQHU/gZdZjPTlXgxI2WBF4nj0st2lKgREIvtzlT2sOhTJHSjLkVJb0iyUtgtTl32zNbJNY4p
miWhG78rWejonw6lFzr2gIBWO4an44Nd7ch6ZvBShz2bBQldaQ78ue16kVfXow1GNXLPRXD0pWGg
6x83BKb1d+s7QdqeQysymunjrO3gwIX2qP78Y0BDPnFydxW5DURbeoZz5GDJ+EpgWlSQLQpx21am
K/Ai/apUrYrUWZDLI9EmQ7AKU6TtL4vsmcx0NU7sKHoLQkehHGUXSPahaNMj9KLMDGp5+bkWNe5b
zHg5hu6r67kLdBFF7sJHjgpBjiWzMkVgwJKUPjENmptJ0aIFnggzuG0msPctZ7o0Lz1kh9nMTE22
UDJ0zCPR5iYH0HF7PZGFoFSuxry9TFfiNJjHb3ZIzxCuLcR0Wi2bKsxB0TalHoJLoBlQiyAN3Rnn
FCIduetds5kuSJrznAT4ifc0FFEybMvnr4vg6KuAABfd0BR2irfFmU2R0UwX5g87dG5c/4V2TpGr
lB2181j0+Uro7IYgtQjUyPobRfvf7ckybzXTFYlbSdeJfgttP1bgKNMspGQGqACNPj8J3jlHCWp9
ma/AZqaLEr/+Cs0R5iX8jltS4yg5d4pwNbkPRp+nhM5vMFYrA2u1J8l9k5muyKtgabv+djiixlHK
5iYL8eibd0NnOync1mPKQquZLs3U+d+jeRIpGL6pqwSsyhUU6myg6HOU0BXtFKnFoLZdo7OxmPFi
JCujWE0vQaJgX+mgxgarHBJ9vhE6u8lWtCnSFpW4ay/jhZgujNJCAQVb/eikZiheDFi0rr3Gom9K
A61ezAp9pkn7tYs7JuvcjSNp+JG29eAuxcJJzq4YckBD/1S0enB3+WYfCqhyka9PjqcUvh1ge7pN
EAo+p/iYyQI7qT1wUn/trGdH8eA4PQWl1uFtZwPp49u2McB0R85C7pfuGeAIT0PJ7A3ulTU4Titm
I+v3BOtkUzVbNjc/ODeV3vc0VXCkET2AsSeZF9yGAZ5UnGkqCktBWkCUyofObVuZHsVR39CL2FJ5
zRiOnFg9lhTgLhCgBE9la26gs9opFJ9y8e3aqRvyszdnPbV27c4eEqgEeac0c8dK6GxWAmJDKtyy
VjeE+GyHDqnSaO3O4F0YuiQILTz8AcXXkP4yO3VDfIHtYSPUP01VNp+3gwIqPdnjfKH5k7sLGLyG
lMes1A3hrYI3/N5n5NW8JJjenFNr+N0g0aU/6NEME4JwCkLYkAQ3tuqGCiPaVk0FntUdelMUugZe
aOHgFIauqckHRVEvYZz7i/wfqyV6i/xkGofuqnGVLnFLpIJ41eeLM2/9awxq94YP8jfcu0mCwKN9
Ip0jP26ub7uEbdJmKfS566E9MEfWpx1Gyd8Z2Ts8bYm627sYAwF2r8AVlPtYjLhojC/2rZtvR+CR
9WJH2UXvsGG82IVyEO04od0/CNwrhC3+oMEbEXpjd0WulSPYXXKr56cDBdkHQtP0/XCdXKaFnHiu
8B+vgjc/59QP1C3sOQX0axWE8SP5BB6C0ehnEKOV7XC9RN5HmNjTv4LQ6Ww/3Vi8X/u+rtBdF34S
lc+y43XGhbO/Yi9MjkvK/VTG4ep1GMVxQzcdhu0492gZvCLcrUVoL/kRhaHfkIeDGg9PksLowndo
bUAnu4llOcft2PhvbgPfjYOwi7103OwCSRziAVyjOT30UfwWhHgO7/uIbmftpFpnJKqdk2UlxO4D
7WIv6QFHLp6I4FnVKx1zO0lmNHtGTuIhh1zv2ske0iqrdMPDN6ervpUOlFntwxTFsesvOslm9GyH
yPkeeA5uRnl4XRhACobXo+LahtIagfwS2eGH1yWJq27G17Ng2cXvhwRh5PAVP1l1sXu0hja9SraL
3XOnl9PrazxDcO2ODmSOHdvTIAlnqJPD1yp0/bjbk6CI3YnQyb7RNvH8bu4ukpCut3S3m9c+TUp0
tZNvaWPf3RC92Z7X4S7eomUQvl+5th9EsTtTHjUXx4WiYTMkK02n4cbFzaJrO90MpFnv37q70uND
F+sEvytB3Qh+aP3jAf7S9ovZi7+0b7RtcjQftpThn1zpIuP/hw+OHIfc8XVW2t20n2XfSLPfZpl1
m/wy97com/BVFi2JV9i54JGG7Orunz1RVGpZCGm/2NIEOvgjs8gHUPZwIxSx70yQJS4+8/mqcOwA
8vhvap3JMgr7BnMIHa1E2AS+sxFeWetCvOKwuStfZukMgMtb2VOHwEwhMBOpqVrg5jJU8bAgUYPe
CEDUNGvToo0KEVaB00TeBOrb+Eu5lc83wt6F41ifrLRlK2taiMNqwGbSKFBGU0Fk9RsaonK7Yaso
91jGZDViE7kUKfziUinwgkaYvNy0a7GGhYgUwGsij1WFmFwOKx5uhL8r3Ka1aVSIuwqcJvImUMnG
pa76+UbYo3Xb7OBjK21YiMFquCaSKFipxyVS7B2NkEm2GZIDvtglUlnjQoSKwTaW1Kp9CtWUVryh
QUJpy5btO1batjifFZhNZFOkjJ8/sa9+QSNc/kzbtbYaFpvvV+M1kUeRbTVcHgVe0AiPk027FmtY
iEcBvCbyWFHzzc/gcJ9tJoFDm7RYm2L5Gy5KEzkrLJ/mTw4LnhDmB5IJvQyWqyRGIXRGUQTQRGq4
JeCVc7+yJxuhik78WIvCs74yhCZyxa1n5y8KcZ5shKuUjbRFsRVaDkITuaoqzufSVfFwI4zRNq11
o0KkVeA0kTfuloMSAxpeIhZcfb0cDr5CDqgwq3MnI1DnBIu+eEppZvzDDVqsReOqvTgi41q5/DnR
hXF6PpWoje9wc9bfhoO/fy26VbXIB5YDNNH9cT6XSpqKn2ukfiGl6WREaBJmqRifiSxVbhzjJzIq
nm7EeU1Io9BJVhVSE7kr3xHHT12UPdYIW1PWmli+ogyakfSIbOrjMyXwhmZIow1bOy2LESiA2Fwu
uTsXBZjkPd8kj1vtAljkoTWRw8qNmVwGq55uhD9mCitrVayuuQKpwdxV7jgVobDqJaJMDoYSTKaN
W+vWIYxWAa8i9iKK0BKbG0VZW+xv3s+X0SwIPfdJAWWfP63fmm8lFYmONpQLsbpFMqfW01BoY0Es
ZNrqDefH8/G833eOe/bQrm7rX0tPS58ugxCpb2j9x1Tynz/do1nwivA3hLk6/zfRS7FudpwBAA==#>
#endregion
	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$form_MainForm = New-Object 'System.Windows.Forms.Form'
	$label_Outputlabel = New-Object 'System.Windows.Forms.Label'
	$button_CopyLogs = New-Object 'System.Windows.Forms.Button'
	$button_ClearLogs = New-Object 'System.Windows.Forms.Button'
	$button_CopyResults = New-Object 'System.Windows.Forms.Button'
	$button_ResultsClear = New-Object 'System.Windows.Forms.Button'
	$richtextbox_logs = New-Object 'System.Windows.Forms.RichTextBox'
	$richtextbox_output = New-Object 'System.Windows.Forms.RichTextBox'
	$tabcontrol1 = New-Object 'System.Windows.Forms.TabControl'
	$tabpage_computer = New-Object 'System.Windows.Forms.TabPage'
	$label_licenseLabel = New-Object 'System.Windows.Forms.Label'
	$label_ProductKeyLabel = New-Object 'System.Windows.Forms.Label'
	$label_productkey = New-Object 'System.Windows.Forms.Label'
	$label_licensestatus = New-Object 'System.Windows.Forms.Label'
	$label_IpAddress = New-Object 'System.Windows.Forms.Label'
	$label_IPaddressLabel = New-Object 'System.Windows.Forms.Label'
	$label_uptimelabel = New-Object 'System.Windows.Forms.Label'
	$label_EXEPolicyLabel = New-Object 'System.Windows.Forms.Label'
	$label_OSLabel = New-Object 'System.Windows.Forms.Label'
	$label_PSRemoteLabel = New-Object 'System.Windows.Forms.Label'
	$label_RDPLabel = New-Object 'System.Windows.Forms.Label'
	$label_PermissionLabel = New-Object 'System.Windows.Forms.Label'
	$label_ConnectionLabel = New-Object 'System.Windows.Forms.Label'
	$label_PSRemotingStatus = New-Object 'System.Windows.Forms.Label'
	$label_RDPStatus = New-Object 'System.Windows.Forms.Label'
	$label_PermissionStatus = New-Object 'System.Windows.Forms.Label'
	$label_UptimeStatus = New-Object 'System.Windows.Forms.Label'
	$label_expolicy = New-Object 'System.Windows.Forms.Label'
	$label_OSStatus = New-Object 'System.Windows.Forms.Label'
	$button_properties = New-Object 'System.Windows.Forms.Button'
	$label_PingStatus = New-Object 'System.Windows.Forms.Label'
	$textbox_ComputerName = New-Object 'System.Windows.Forms.TextBox'
	$tabpage_general = New-Object 'System.Windows.Forms.TabPage'
	$groupbox8 = New-Object 'System.Windows.Forms.GroupBox'
	$button_ = New-Object 'System.Windows.Forms.Button'
	$button_securityPolicy = New-Object 'System.Windows.Forms.Button'
	$button_mmcservices = New-Object 'System.Windows.Forms.Button'
	$button_firewallmmc = New-Object 'System.Windows.Forms.Button'
	$button_taskmgrmmc = New-Object 'System.Windows.Forms.Button'
	$button_shares = New-Object 'System.Windows.Forms.Button'
	$button_EventViewer = New-Object 'System.Windows.Forms.Button'
	$groupbox7 = New-Object 'System.Windows.Forms.GroupBox'
	$button_productKey = New-Object 'System.Windows.Forms.Button'
	$button_motherboard = New-Object 'System.Windows.Forms.Button'
	$button_Aliases = New-Object 'System.Windows.Forms.Button'
	$button_licensestatus = New-Object 'System.Windows.Forms.Button'
	$groupbox6 = New-Object 'System.Windows.Forms.GroupBox'
	$button_remoteCmd = New-Object 'System.Windows.Forms.Button'
	$button_pshellremote = New-Object 'System.Windows.Forms.Button'
	$button_shutdown = New-Object 'System.Windows.Forms.Button'
	$button_SetExePolicy = New-Object 'System.Windows.Forms.Button'
	$button_openCdrive = New-Object 'System.Windows.Forms.Button'
	$button_retstart = New-Object 'System.Windows.Forms.Button'
	$button_gpupdate = New-Object 'System.Windows.Forms.Button'
	$button_remoteAssistance = New-Object 'System.Windows.Forms.Button'
	$button_remoteDesktop = New-Object 'System.Windows.Forms.Button'
	$tabpage_networking = New-Object 'System.Windows.Forms.TabPage'
	$groupbox2 = New-Object 'System.Windows.Forms.GroupBox'
	$button_IPInfo = New-Object 'System.Windows.Forms.Button'
	$button_ping = New-Object 'System.Windows.Forms.Button'
	$button_networkRouteTable = New-Object 'System.Windows.Forms.Button'
	$button_ConnectivityTest = New-Object 'System.Windows.Forms.Button'
	$button_adapterinfo = New-Object 'System.Windows.Forms.Button'
	$buttonIPConfig = New-Object 'System.Windows.Forms.Button'
	$button_NetworkInterface = New-Object 'System.Windows.Forms.Button'
	$button_summary = New-Object 'System.Windows.Forms.Button'
	$button_HostFile = New-Object 'System.Windows.Forms.Button'
	$button_Nslookup = New-Object 'System.Windows.Forms.Button'
	$groupbox1 = New-Object 'System.Windows.Forms.GroupBox'
	$button_Mask = New-Object 'System.Windows.Forms.Button'
	$button_MaskLength = New-Object 'System.Windows.Forms.Button'
	$button_broadcastaddress = New-Object 'System.Windows.Forms.Button'
	$buttonConvertBinary = New-Object 'System.Windows.Forms.Button'
	$button_convertDecimal = New-Object 'System.Windows.Forms.Button'
	$tabpage_services = New-Object 'System.Windows.Forms.TabPage'
	$groupbox3 = New-Object 'System.Windows.Forms.GroupBox'
	$groupbox4 = New-Object 'System.Windows.Forms.GroupBox'
	$textbox_services = New-Object 'System.Windows.Forms.TextBox'
	$button_ServiceQuery = New-Object 'System.Windows.Forms.Button'
	$button_ServiceStop = New-Object 'System.Windows.Forms.Button'
	$button_ServiceStart = New-Object 'System.Windows.Forms.Button'
	$button_ServiceRestart = New-Object 'System.Windows.Forms.Button'
	$button_RunningServices = New-Object 'System.Windows.Forms.Button'
	$button_servicesAutomatic = New-Object 'System.Windows.Forms.Button'
	$button_ServicesDisabled = New-Object 'System.Windows.Forms.Button'
	$button_ServicesManual = New-Object 'System.Windows.Forms.Button'
	$button_msclink = New-Object 'System.Windows.Forms.Button'
	$tabpage_processes = New-Object 'System.Windows.Forms.TabPage'
	$groupbox5 = New-Object 'System.Windows.Forms.GroupBox'
	$button_Over100Mb = New-Object 'System.Windows.Forms.Button'
	$button_Owners = New-Object 'System.Windows.Forms.Button'
	$button_Processes = New-Object 'System.Windows.Forms.Button'
	$button_RecentlyRun = New-Object 'System.Windows.Forms.Button'
	$textbox_processName = New-Object 'System.Windows.Forms.TextBox'
	$button_Terminate = New-Object 'System.Windows.Forms.Button'
	$buttonTaskManager = New-Object 'System.Windows.Forms.Button'
	$tabpage_eventlogs = New-Object 'System.Windows.Forms.TabPage'
	$groupbox_eventsgeneral = New-Object 'System.Windows.Forms.GroupBox'
	$button_eventviewerlink = New-Object 'System.Windows.Forms.Button'
	$button_eventlogstats = New-Object 'System.Windows.Forms.Button'
	$button_eventsearch = New-Object 'System.Windows.Forms.Button'
	$groupbox_AppEventLogs = New-Object 'System.Windows.Forms.GroupBox'
	$button_rebootLog = New-Object 'System.Windows.Forms.Button'
	$button_AppErrorLog = New-Object 'System.Windows.Forms.Button'
	$button_GroupChangesLog = New-Object 'System.Windows.Forms.Button'
	$button_AppHangLog = New-Object 'System.Windows.Forms.Button'
	$button_NewJobLog = New-Object 'System.Windows.Forms.Button'
	$button_ProtectedModeViolateLog = New-Object 'System.Windows.Forms.Button'
	$button_InstallServiceLog = New-Object 'System.Windows.Forms.Button'
	$button_ServiceTermLog = New-Object 'System.Windows.Forms.Button'
	$button_AccessAuditFileLog = New-Object 'System.Windows.Forms.Button'
	$groupbox_SecurityEventLogs = New-Object 'System.Windows.Forms.GroupBox'
	$button_accountlogonfailslog = New-Object 'System.Windows.Forms.Button'
	$button_adminlogonLog = New-Object 'System.Windows.Forms.Button'
	$button_AccountChangesLog = New-Object 'System.Windows.Forms.Button'
	$button_PasswordChangesLog = New-Object 'System.Windows.Forms.Button'
	$button_PriviligeAssignedLog = New-Object 'System.Windows.Forms.Button'
	$button_ClearSecurityLog = New-Object 'System.Windows.Forms.Button'
	$button_SoftwareRestLog = New-Object 'System.Windows.Forms.Button'
	$button_AuditPolicyChangedLog = New-Object 'System.Windows.Forms.Button'
	$button_HardLinkAuditLog = New-Object 'System.Windows.Forms.Button'
	$button_SysAccessGrantedLog = New-Object 'System.Windows.Forms.Button'
	$button_WinDefenderFindLog = New-Object 'System.Windows.Forms.Button'
	$button_DomainPolicyChangeLog = New-Object 'System.Windows.Forms.Button'
	$button_AccessRefusedLog = New-Object 'System.Windows.Forms.Button'
	$button_AdminLockoutLog = New-Object 'System.Windows.Forms.Button'
	$button_AccountLogonsLog = New-Object 'System.Windows.Forms.Button'
	$button_ChangeSystemTimeLog = New-Object 'System.Windows.Forms.Button'
	$groupbox_last25events = New-Object 'System.Windows.Forms.GroupBox'
	$button_ManualSearch = New-Object 'System.Windows.Forms.Button'
	$button_last20security = New-Object 'System.Windows.Forms.Button'
	$button_last20application = New-Object 'System.Windows.Forms.Button'
	$button_last20hardware = New-Object 'System.Windows.Forms.Button'
	$button_last20oalerts = New-Object 'System.Windows.Forms.Button'
	$button_last20powershell = New-Object 'System.Windows.Forms.Button'
	$button_last20system = New-Object 'System.Windows.Forms.Button'
	$menustrip1 = New-Object 'System.Windows.Forms.MenuStrip'
	$tooltip_properties = New-Object 'System.Windows.Forms.ToolTip'
	$tooltip1 = New-Object 'System.Windows.Forms.ToolTip'
	$fileToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$appsToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$toolsToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$export_TextTo44NotepadToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$export_TextToWordpadToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$exitToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$export_wordpadToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$export_wordpadLogsToWordpadToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$export_LogsToNotepadToolStripMenuItemToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$notepadToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$scheduledTasksToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$addRemoveProgramsToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$administrativeToolsToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$certificateManagerToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$diskManagementToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$groupPolicyEditorToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$localSecuritySettingsToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$localUsersAndGroupsToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$networkConnectionsToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$performanceMonitorToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$sharedFoldersToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$comToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$diskCleanupToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$eventViewerToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$iSCSIInitiatorToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$dataSourcesToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$oDBC32BitToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$oDBC64BitToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$printManagementToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$servicesToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$systemConfigurationToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$systemInformationToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$windowsFirewallToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$windowsMemoryDianosticToolStripMenuItem = New-Object 'System.Windows.Forms.ToolStripMenuItem'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	$form_MainForm_Load = {
		#TODO: Initialize Form Controls here
		$form_MainForm.Text = $MainFormTitle
		$textbox_ComputerName.Text = $env:COMPUTERNAME
		$textbox_EXEPolicy.Text = ''
		
		$RichTexBoxLogsDefaultMessage = "$ApplicationName "
		Add-Logs -text $RichTexBoxLogsDefaultMessage
		
		$timerCheckJob_Tick = {
			Update-JobTracker
		}
		
		$timerCheckJob_Tick2 = {
			#Check if the process stopped
			if ($timerCheckJob.Tag -ne $null)
			{
				if ($timerCheckJob.Tag.State -ne 'Running')
				{
					#Stop the Timer
					$buttonStart.ImageIndex = -1
					$buttonStart.Enabled = $true
					$buttonStart.Visible = $true
					$timerCheckJob.Tag = $null
					$timerCheckJob.Stop()
				}
				else
				{
					if ($buttonStart.ImageIndex -lt $buttonStart.ImageList.Images.Count - 1)
					{
						$buttonStart.ImageIndex += 1
					}
					else
					{
						$buttonStart.ImageIndex = 0
					}
				}
			}
		}
		
		
	}
	
		$tabpage_computer.Enabled = $textbox_ComputerName.Text -ne ""
		$button_properties.Enabled = $textbox_ComputerName.Text -ne ""
	
		# Program Information
		$ApplicationName = "PowerShell Managment"
		$ApplicationVersion = "0.70"
		$ApplicationLastUpdate = "4/28/2016"
		
		# Convert Application Title
		$domain = $env:userdomain.ToUpper()
		$MainFormTitle = "$ApplicationName $ApplicationVersion - Last Update: $ApplicationLastUpdate - $domain\$env:username"
	
		# Default Error Action
		$ErrorActionPreference = "SilentlyContinue"
	
		#reset Error
		$error = ""
	
		# Script Paths
		$ScriptPath = Split-Path $hostinvocation.MyCommand.path
		$EventsFolder = $ScriptPath + "CustomEventScripts"
		Set-Location $ScriptPath
	
		$Form_StateCorrection_Load =
		{
			#Correct the initial state of the form to prevent the .Net maximized form issue
			$form_MainForm.WindowState = $InitialFormWindowState
		}
	
		$Form_StoreValues_Closing =
		{
			#Store the control values
		$script:MainForm_textbox_ComputerName = $textbox_ComputerName.Text
		$script:MainForm_textbox_services = $textbox_services.Text
		$script:MainForm_textbox_processName = $textbox_processName.Text
		}
		
		$Form_Cleanup_FormClosed =
		{
			#Remove all event handlers from the controls
			try
			{
				$textbox_ComputerName.remove_TextChanged($textbox_ComputerName_TextChanged)
			}
			catch [Exception]
			{ }
	}
	
	
		# Current Operating System Information
		$current_OS = Get-WmiObject Win32_OperatingSystem
		$current_OS_caption = $current_OS.caption
	
		# Background Jobs
		$JobTrackerList = New-Object System.Collections.ArrayList
	
	
	$richtextbox_logs_TextChanged = {
		#TODO: Place custom script here
		$richtextbox_Logs.SelectionStart = $richtextbox_Logs.Text.Length
		$richtextbox_Logs.ScrollToCaret()
		if ($error[0]) { Add-logs -text $($error[0].Exception.Message) }
	}
	
	$richtextbox_output_TextChanged = {
		#TODO: Place custom script here
		$richtextbox_output.SelectionStart = $richtextbox_output.Text.Length
		$richtextbox_output.ScrollToCaret()
		
	}
	
	$textbox_ComputerName_KeyPress = [System.Windows.Forms.KeyPressEventHandler]{
		#Event Argument: $_ = [System.Windows.Forms.KeyPressEventArgs]
		If ($_.KeyChar -eq 1)
		{
			$button_ping.PerformClick()
			$richtextbox_output.Focus()
		}
	}
	
	$textbox_ComputerName_TextChanged = {
		$label_OSStatus.Text = ""
		$label_PermissionStatus.Text = ""
		$label_PingStatus.Text = ""
		$label_RDPStatus.Text = ""
		$label_PSRemotingStatus.Text = ""
		$label_UptimeStatus.Text = ""
		$label_expolicy.Text = ""
		$label_IpAddress.Text = ""
		$label_licensestatus.Text = ""
		$label_productkey.Text = ""
		$now = Get-SortableDate
		if ($textbox_ComputerName.Text -eq " ")
		{
		}
		if ($textbox_ComputerName.Text -ne " ")
		{
		}
		$tabpage_computer.Enabled = $textbox_ComputerName.Text -ne ""
		$button_properties.Enabled = $textbox_ComputerName.Text -ne ""
	}
	
	#region Tab Network
	
	$button_ping_Click = {
		Get-ComputerTxtBox
		Add-Logs -text "$ComputerName - Ping Selected Computer"
		$button_ping.Enabled = $False
		$cmd = "cmd"
		$param = "/k ping $ComputerName"
		Start-Process $cmd $param
		$button_ping.Enabled = $true
	}
	
	$button_motherboard_Click={
		#TODO: Place custom script here
			Get-ComputerTxtBox
		Add-logs -text "$ComputerName - Retrieve MotherBoard information "
			$result = Get-MotherBoard -ComputerName $ComputerName | Out-String
			Add-RichTextBox $result
		
	}
	
	$button_networkRouteTable_Click={
		#TODO: Place custom script here
		Get-ComputerTxtBox
		Add-logs -text "$ComputerName - Display the Route Table "
		$result = Get-Routetable -ComputerName $ComputerName | ft -auto | Out-String
		Add-RichTextBox $result
	}
	
	$button_eventlogstats_Click={
		#TODO: Place custom script here
		Get-ComputerTxtBox
		Add-Logs "$ComputerName - Event Log Data"
		if ($ComputerName -like "localhost")
		{
			$Eventloggeneral = Get-EventLog -list | Out-String
			Add-RichTextBox $Eventloggeneral
		}
		else
		{
			$Eventloggeneral = Get-EventLog -list -ComputerName $ComputerName | Out-String
			Add-RichTextBox $Eventloggeneral
		}
	}
	
	$button_properties_Click = {
		#Disable the button
		$button_properties.Enabled = $false
		
		#Get the current computer in txt box
		Get-ComputerTxtBox
		Add-logs -text "$ComputerName - Get basic properties"
		# Test Connection
		if (Test-Connection $ComputerName -Count 1 -Quiet)
		{
			$label_PingStatus.Text = "OK"; $label_PingStatus.ForeColor = "green"
			
			# Test Permissions
			if (Test-Path "\\$ComputerName\c$")
			{
				$label_PermissionStatus.Text = "OK"; $label_PermissionStatus.ForeColor = "green"
				
				# Test PSRemoting
				if (Test-PSRemoting -computername $ComputerName) { $label_PSRemotingStatus.Text = "OPEN"; $label_PSRemotingStatus.ForeColor = "green" }
				else { $label_PSRemotingStatus.Text = "CLOSED"; $label_PSRemotingStatus.ForeColor = "red" }
				
				# Test RDP
				if (Test-Port -tcp 3389 -computername $ComputerName) { $label_RDPStatus.Text = "OPEN"; $label_RDPStatus.ForeColor = "green" }
				else { $label_RDPStatus.Text = "CLOSED"; $label_RDPStatus.ForeColor = "red" }
				
				#License Status
				$wpa = Get-WmiObject -class SoftwareLicensingProduct -ComputerName $ComputerName | Where{ $_.LicenseStatus -NotMatch "0" }
				if ($wpa)
				{
					foreach ($item in $wpa)
					{
						$status = switch ($item.LicenseStatus)
						{
							0 { "Unlicensed" }
							1 { "Licensed" }
							2 { "Out-Of-Box Grace Period" }
							3 { "Out-Of-Tolerance Grace Period" }
							4 { "Non-Genuine Grace Period" }
							5 { "Notification" }
							6 { "Extended Grace" }
							default { "Unknown value" }
						}
						"Activation Status: {0}" -f $status
					}
				}
				else
				{
					write-host ("Unlicensed")
				}
				$label_licensestatus.Text = "$status"
				
				# Get the OS
				$OSWin32_OS = Get-WmiObject -Query "SELECT * FROM Win32_OperatingSystem" -ComputerName $ComputerName
				$OSCaption = ($OSWin32_OS | Select-Object caption).Caption
				$OSVersion = $OSWin32_OS.Version
				#2003/xp+
				$OSOther = $OSWin32_OS.OtherTypeDescription
				$OSSP = $OSWin32_OS.CSDVersion
				#2008/win7+
				$OSArchi = $OSWin32_OS.OSArchitecture
				
				$OSFullCaption = "$OSCaption $OSOther $OSArchi $OSSP"
				if ($OSFullCaption -contains "64") { $OSFullCaption = "$OSCaption $OSOther x86 $OSSP" }
				
				$label_OSStatus.Text = $OSFullCaption.Replace('  ', ' ')
				$label_OSStatus.ForeColor = "black"
				
				#
				# Get the uptime
				#$label_UptimeStatus.Text = $(Get-Uptime -ComputerName $ComputerName);$label_UptimeStatus.ForeColor = "blue"
				$LBTime = $OSWin32_OS.ConvertToDateTime($OSWin32_OS.Lastbootuptime)
				[TimeSpan]$uptime = New-TimeSpan $LBTime $(get-date)
				$label_UptimeStatus.Text = "$($uptime.days) Days $($uptime.hours) Hours $($uptime.minutes) Minutes $($uptime.seconds) Seconds"
				
				#
				#Get the execution Policy
				$expolicy = Get-ExecutionPolicy
				$label_expolicy.Text = "$expolicy"
				
				#
				#IP Address
				$IPaddress = Get-WmiObject win32_networkadapterconfiguration | where { $_.ipaddress -like "1*" } | select -ExpandProperty ipaddress | select -First 1
				$label_IpAddress.Text = "$IPaddress"
				
				#
				#Get the Product Key
				$map = "BCDFGHJKMPQRTVWXY2346789"
				$remoteReg = [Microsoft.Win32.RegistryKey]::OpenRemoteBaseKey([Microsoft.Win32.RegistryHive]::LocalMachine, $Computer)
				If ($OS.OSArchitecture -eq '64-bit')
				{
					$value = $remoteReg.OpenSubKey("SOFTWARE\Microsoft\Windows NT\CurrentVersion").GetValue('DigitalProductId4')[0x34..0x42]
				}
				Else
				{
					$value = $remoteReg.OpenSubKey("SOFTWARE\Microsoft\Windows NT\CurrentVersion").GetValue('DigitalProductId')[0x34..0x42]
				}
				$ProductKey = ""
				Write-Verbose ("{0}: Translating data into product key" -f $Computer)
				for ($i = 24; $i -ge 0; $i--)
				{
						$r = 0
					for ($j = 14; $j -ge 0; $j--)
					{
						$r = ($r * 256) -bxor $value[$j]
						$value[$j] = [math]::Floor([double]($r/24))
						$r = $r % 24
					}
					$ProductKey = $map[$r] + $ProductKey
					if (($i % 5) -eq 0 -and $i -ne 0)
					{
						$ProductKey = "-" + $ProductKey
					}
				}
				$label_productkey.Text = "$ProductKey"
				
				
			} #end if (Test-Path "\\$ComputerName\c$")
					else { $label_PermissionStatus.Text = "FAIL"; $label_PermissionStatus.ForeColor = "red" }
				} #end if (Test-Connection $ComputerName -Count 1 -Quiet)
		else { $label_PingStatus.Text = "FAIL"; $label_PingStatus.ForeColor = "red" }
		$button_properties.Enabled = $true
	}
	
	#endregion
	
	#region Tab General
	
	$button_licensestatus_Click={
		Get-ComputerTxtBox
		Add-Logs "$ComputerName - Retrieve the License status"
		$result = Get-ActivationStatus -ComputerName $ComputerName | ft -auto | Out-String
		Add-RichTextBox $result
	}
	
	$button_productKey_Click = {
		Get-ComputerTxtBox
		Add-Logs "$ComputerName - Retrieve selected computers Product Key "
		$result = Get-ProductKey -ComputerName $ComputerName | ft -auto | Out-String
		Add-RichTextBox $result
	}
	
	$button_SetExePolicy_Click = {
		Get-ComputerTxtBox
		Add-Logs "$ComputerName - Set Execution Policy "
		Set-ExecutionPolicy -Force
		$setpolicy = Get-ExecutionPolicy
		Add-RichTextBox $setpolicy
	}
	
	#endregion
	
	#region Tooltips
	$tooltip_properties.SetToolTip($button_properties, "Display properties of selected computer.")
	$tooltip_properties.SetToolTip($button_eventlogstats, "Display general event log information.")
	
	#endregion
	
	#region Tab Events
	
	$button_last20system_Click = {
		Get-ComputerTxtBox
		Add-Logs "$ComputerName - System Event Log - Last 20"
		if ($ComputerName -like "localhost")
		{
			$Events_Last20sys = Get-EventLog -LogName System -Newest 20 | Select-Object EventID, MachineName, Index, Category, CategoryNumber, Message, Source, InstanceId, UserName, TimeGenerated, TimeWritten | Format-List | Out-String
			Add-RichTextBox $Events_Last20sys
		}
		else
		{
			$Events_Last20sys = Get-EventLog -LogName System -Newest 20 -ComputerName $ComputerName | Select-Object EventID, MachineName, Index, Category, CategoryNumber, Message, Source, InstanceId, UserName, TimeGenerated, TimeWritten | Format-List | Out-String
			Add-RichTextBox $Events_Last20sys
		}
	}
	
	$button_last20application_Click = {
		Get-ComputerTxtBox
		Add-Logs "$ComputerName - Application Event Log - Last 20"
		if ($ComputerName -like "localhost")
		{
			$Events_Last20app = Get-EventLog -LogName Application -Newest 20 | Select-Object EventID, MachineName, Index, Category, CategoryNumber, Message, Source, InstanceId, UserName, TimeGenerated, TimeWritten | Format-List | Out-String
			Add-RichTextBox $Events_Last20app
		}
		else
		{
			$Events_Last20app = Get-EventLog -LogName Application -Newest 20 -ComputerName $ComputerName | Select-Object EventID, MachineName, Index, Category, CategoryNumber, Message, Source, InstanceId, UserName, TimeGenerated, TimeWritten | Format-List | Out-String
			Add-RichTextBox $Events_Last20app
		}
	}
	
	$button_last20hardware_Click = {
		Get-ComputerTxtBox
		Add-Logs "$ComputerName - Hardware Event Log - Last 20"
		if ($ComputerName -like "localhost")
		{
			$Events_Last20hard = Get-EventLog -LogName HardwareEvents -Newest 20 | Select-Object EventID, MachineName, Index, Category, CategoryNumber, Message, Source, InstanceId, UserName, TimeGenerated, TimeWritten | Format-List | Out-String
			Add-RichTextBox $Events_Last20hard
		}
		else
		{
			$Events_Last20hard = Get-EventLog -LogName HardwareEvents -Newest 20 -ComputerName $ComputerName | Select-Object EventID, MachineName, Index, Category, CategoryNumber, Message, Source, InstanceId, UserName, TimeGenerated, TimeWritten | Format-List | Out-String
			Add-RichTextBox $Events_Last20hard
		}
	}
	
	$button_last20security_Click = {
		Get-ComputerTxtBox
		Add-Logs "$ComputerName - Security Event Log - Last 20"
		if ($ComputerName -like "localhost")
		{
			$Events_Last20sec = Get-EventLog -LogName Security -Newest 20 | Select-Object EventID, Index, Category, Message, Source, InstanceId, UserName, TimeGenerated, TimeWritten | Out-String
			Add-RichTextBox $Events_Last20sec
		}
		else
		{
			$Events_Last20sec = Get-EventLog -LogName Security -Newest 20 -ComputerName $ComputerName | Select-Object EventID, Index, Category, Message, Source, InstanceId, UserName, TimeGenerated, TimeWritten | Out-String
			Add-RichTextBox $Events_Last20sec
		}
	}
	
	$button_last20oalerts_Click = {
		Get-ComputerTxtBox
		Add-Logs "$ComputerName - OAlerts Event Log - Last 20"
		if ($ComputerName -like "localhost")
		{
			$Events_Last20olert = Get-EventLog -LogName OAlerts -Newest 20 | Select-Object EventID, MachineName, Index, Category, CategoryNumber, Message, Source, InstanceId, UserName, TimeGenerated, TimeWritten | Format-List | Out-String
			Add-RichTextBox $Events_Last20oalert
		}
		else
		{
			$Events_Last20oalert = Get-EventLog -LogName OAlerts -Newest 20 -ComputerName $ComputerName | Select-Object EventID, MachineName, Index, Category, CategoryNumber, Message, Source, InstanceId, UserName, TimeGenerated, TimeWritten | Format-List | Out-String
			Add-RichTextBox $Events_Last20oalert
		}
	}
	
	$button_last20powershell_Click = {
		Get-ComputerTxtBox
		Add-Logs "$ComputerName - Windows PowerShell Event Log - Last 20"
		if ($ComputerName -like "localhost")
		{
			$Events_Last20pshell = Get-EventLog -LogName 'Windows PowerShell' -Newest 20 | Select-Object EventID, MachineName, Index, Category, CategoryNumber, Message, Source, InstanceId, UserName, TimeGenerated, TimeWritten | Format-List | Out-String
			Add-RichTextBox $Events_Last20pshell
		}
		else
		{
			$Events_Last20pshell = Get-EventLog -LogName 'Windows PowerShell' -Newest 20 -ComputerName $ComputerName | Select-Object EventID, MachineName, Index, Category, CategoryNumber, Message, Source, InstanceId, UserName, TimeGenerated, TimeWritten | Format-List | Out-String
			Add-RichTextBox $Events_Last20pshell
		}
	}
	
	$button_eventsearch_Click = {
		Get-ComputerTxtBox
		Add-Logs "$ComputerName - Search Event Log - Search by Term"
		if ($ComputerName -like "localhost")
		{
			$SearchEventText = Show-Inputbox -message "Enter the text to search" -title "$ComputerName - Search in events" -default "error"
			if ($SearchEventText -ne "")
			{
				$SearchEvent = Get-EventLog | Where-Object { $_.Message -match "$SearchEventText" } | fl * | Out-String
				Add-RichTextBox $SearchEvent
			}
		}
		else
		{
			$SearchEventText = Show-Inputbox -message "Enter the text to search" -title "$ComputerName - Search in events" -default "error"
			if ($SearchEventText -ne "")
			{
				$SearchEvent = Get-EventLog -ComputerName $ComputerName | Where-Object { $_.Message -match "$SearchEventText" } | fl | Out-String
				Add-RichTextBox $SearchEvent
			}
		}
	}
	
	$button_ManualSearch_Click = {
		#Clear-RichTextBox
		Get-ComputerTxtBox
		Add-Logs "$ComputerName - EventLog - Last 25 Entries"
		if ($ComputerName -like "localhost")
		{
			$last25logs = Get-EventLog -Newest 25 | Select-Object Index, EventID, Source, Message, MachineName, UserName, TimeGenerated, TimeWritten | Format-List | Out-String
			Add-RichTextBox $last25logs
		}
		else
		{
			$last25logs = Get-EventLog -Newest 25 -ComputerName $ComputerName | Select-Object Index, EventID, Source, Message, MachineName, UserName, TimeGenerated, TimeWritten | Format-List | Out-String
			Add-RichTextBox $last25logs
		}
		
	}
	
	$button_ClearSecurityLog_Click={
		Get-ComputerTxtBox
		Add-Logs "$ComputerName - Events: 4613 - Security Log Cleared"
		if ($ComputerName -like "localhost")
		{
			$Events_seclogcleared = get-eventlog -LogName Security | Where-Object { $_.EventID -eq "4613" } | Select-Object EventID, Index, Category, Message, Source, InstanceId, UserName, TimeGenerated, TimeWritten | Format-List | Out-String
			Add-RichTextBox $Events_seclogcleared
		}
		else
		{
			$Events_seclogcleared = get-eventlog -LogName Security -ComputerName $ComputerName | Where-Object { $_.EventID -eq "4613" } | Select-Object EventID, Index, Category, Message, Source, InstanceId, UserName, TimeGenerated, TimeWritten | Format-List | Out-String
			Add-RichTextBox $Events_seclogcleared
		}
	}
	
	$button_ChangeSystemTimeLog_Click={
		Get-ComputerTxtBox
		Add-Logs "$ComputerName - Events: 4616 - System Time Changed"
		if ($ComputerName -like "localhost")
		{
			$Events_systimechange = get-eventlog -LogName Security | Where-Object { $_.EventID -eq "4616" } | Select-Object EventID, Index, Category, Message, Source, InstanceId, UserName, TimeGenerated, TimeWritten | Format-List | Out-String
			Add-RichTextBox $Events_systimechange
		}
		else
		{
			$Events_systimechange = get-eventlog -LogName Security -ComputerName $ComputerName | Where-Object { $_.EventID -eq "4616" } | Select-Object EventID, Index, Category, Message, Source, InstanceId, UserName, TimeGenerated, TimeWritten | Format-List | Out-String
			Add-RichTextBox $Events_systimechange
		}
	}
	
	$button_PriviligeAssignedLog_Click={
		Get-ComputerTxtBox
		Add-Logs "$ComputerName - Events: 4714, 4705 - Priviligies Assigned or Changed"
		if ($ComputerName -like "localhost")
		{
			$Events_priviligechange = get-eventlog -LogName Security | Where-Object { $_.EventID -eq "4714" -or $_.EventID -eq "4705" } | Select-Object EventID, Index, Category, Message, Source, InstanceId, UserName, TimeGenerated, TimeWritten | Format-List | Out-String
			Add-RichTextBox $Events_priviligechange
		}
		else
		{
			$Events_priviligechange = get-eventlog -LogName Security -ComputerName $ComputerName | Where-Object { $_.EventID -eq "4714" -or $_.EventID -eq "4705" } | Select-Object EventID, Index, Category, Message, Source, InstanceId, UserName, TimeGenerated, TimeWritten | Format-List | Out-String
			Add-RichTextBox $Events_priviligechange
		}
	}
	
	$button_AuditPolicyChangedLog_Click={
		Get-ComputerTxtBox
		Add-Logs "$ComputerName - Events: 4708, 4714 - Audit Policy Changed"
		if ($ComputerName -like "localhost")
		{
			$Events_auditpolchange = get-eventlog -LogName Security | Where-Object { $_.EventID -eq "4708" -or $_.EventID -eq "4714"} | Select-Object EventID, Index, Category, Message, Source, InstanceId, UserName, TimeGenerated, TimeWritten | Format-List | Out-String
			Add-RichTextBox $Events_auditpolchange
		}
		else
		{
			$Events_auditpolchange = get-eventlog -LogName Security -ComputerName $ComputerName | Where-Object { $_.EventID -eq "4708" -or $_.EventID -eq "4714" } | Select-Object EventID, Index, Category, Message, Source, InstanceId, UserName, TimeGenerated, TimeWritten | Format-List | Out-String
			Add-RichTextBox $Events_auditpolchange
		}
	}
	
	$button_SysAccessGrantedLog_Click={
		Get-ComputerTxtBox
		Add-Logs "$ComputerName - Events: 4717, 4718 - System access granted or removed"
		if ($ComputerName -like "localhost")
		{
			$Events_sysaccesschange = get-eventlog -LogName Security | Where-Object { $_.EventID -eq "4717" -or $_.EventID -eq "4718" } | Select-Object EventID, Index, Category, Message, Source, InstanceId, UserName, TimeGenerated, TimeWritten | Format-List | Out-String
			Add-RichTextBox $Events_sysaccesschange
		}
		else
		{
			$Events_sysaccesschange = get-eventlog -LogName Security -ComputerName $ComputerName | Where-Object { $_.EventID -eq "4717" -or $_.EventID -eq "4718" } | Select-Object EventID, Index, Category, Message, Source, InstanceId, UserName, TimeGenerated, TimeWritten | Format-List | Out-String
			Add-RichTextBox $Events_sysaccesschange
		}
	}
	
	$button_DomainPolicyChangeLog_Click={
		Get-ComputerTxtBox
		Add-Logs "$ComputerName - Events: 4739 - Domain Policy Changed"
		if ($ComputerName -like "localhost")
		{
			$Events_domainpolicychange = get-eventlog -LogName Security | Where-Object { $_.EventID -eq "4739" } | Select-Object EventID, Index, Category, Message, Source, InstanceId, UserName, TimeGenerated, TimeWritten | Format-List | Out-String
			Add-RichTextBox $Events_domainpolicychange
		}
		else
		{
			$Events_domainpolicychange = get-eventlog -LogName Security -ComputerName $ComputerName | Where-Object { $_.EventID -eq "4739" } | Select-Object EventID, Index, Category, Message, Source, InstanceId, UserName, TimeGenerated, TimeWritten | Format-List | Out-String
			Add-RichTextBox $Events_domainpolicychange
		}
	}
	
	$button_AdminLockoutLog_Click = {
		Get-ComputerTxtBox
		Add-Logs "$ComputerName - Events: 16390 - Admin Lockout"
		if ($ComputerName -like "localhost")
		{
			$Events_adminlockout = get-eventlog -LogName Security | Where-Object { $_.EventID -eq "16390" } | Select-Object EventID, Index, Category, Message, Source, InstanceId, UserName, TimeGenerated, TimeWritten | Format-List | Out-String
			Add-RichTextBox $Events_adminlockout
		}
		else
		{
			$Events_adminlockout = get-eventlog -LogName Security -ComputerName $ComputerName | Where-Object { $_.EventID -eq "16390"  } | Select-Object EventID, Index, Category, Message, Source, InstanceId, UserName, TimeGenerated, TimeWritten | Format-List | Out-String
			Add-RichTextBox $Events_adminlockout
		}
	}
	
	$button_GroupChangesLog_Click={
		Get-ComputerTxtBox
		Add-Logs "$ComputerName - Events: 4727-4730, 4731-4734, 4735, 4737, 4784, 4755-4758 - Group changes"
		if ($ComputerName -like "localhost")
		{
			$Events_groupchange = get-eventlog -LogName Security | Where-Object { $_.EventID -eq "4727-4730" -or $_.EventID -eq "4731-4734" -or $_.EventID -eq "4735" -or $_.EventID -eq "4737" -or $_.EventID -eq "4755-4758" -or $_.EventID -eq "4784" } | Select-Object EventID, Index, Category, Message, Source, InstanceId, UserName, TimeGenerated, TimeWritten | Format-List | Out-String
			Add-RichTextBox $Events_groupchange
		}
		else
		{
			$Events_groupchange = get-eventlog -LogName Security -ComputerName $ComputerName | Where-Object { $_.EventID -eq "4727-4730" -or $_.EventID -eq "4731-4734" -or $_.EventID -eq "4735" -or $_.EventID -eq "4737" -or $_.EventID -eq "4755-4758" -or $_.EventID -eq "4784" } | Select-Object EventID, Index, Category, Message, Source, InstanceId, UserName, TimeGenerated, TimeWritten | Format-List | Out-String
			Add-RichTextBox $Events_groupchange
		}
	}
	
	$button_AccountLogonsLog_Click={
		Get-ComputerTxtBox
		Add-Logs "$ComputerName - Events: 4624, 4636, 4803, 4801 - Account logons"
		if ($ComputerName -like "localhost")
		{
			$Events_accountlogons = get-eventlog -LogName Security | Where-Object { $_.EventID -eq "4624" -or $_.EventID -eq "4636" -or $_.EventID -eq "4803" -or $_.EventID -eq "4801"   } | Select-Object EventID, Index, Category, Message, Source, InstanceId, UserName, TimeGenerated, TimeWritten | Format-List | Out-String
			Add-RichTextBox $Events_accountlogons
		}
		else
		{
			$Events_accountlogons = get-eventlog -LogName Security -ComputerName $ComputerName | Where-Object { $_.EventID -eq "4624" -or $_.EventID -eq "4803" -or $_.EventID -eq "4636" -or $_.EventID -eq "4801"  } | Select-Object EventID, Index, Category, Message, Source, InstanceId, UserName, TimeGenerated, TimeWritten | Format-List | Out-String
			Add-RichTextBox $Events_accountlogons
		}
	}
	
	$button_NewJobLog_Click={
		Get-ComputerTxtBox
		Add-Logs "$ComputerName - Events: 4698 - New Job Scheduled"
		if ($ComputerName -like "localhost")
		{
			$Events_schnewjob = get-eventlog -LogName Application | Where-Object { $_.EventID -eq "4698" } | Select-Object EventID, Index, Category, Message, Source, InstanceId, UserName, TimeGenerated, TimeWritten | Format-List | Out-String
			Add-RichTextBox $Events_schnewjob
		}
		else
		{
			$Events_schnewjob = get-eventlog -LogName Application -ComputerName $ComputerName | Where-Object { $_.EventID -eq "4698" } | Select-Object EventID, Index, Category, Message, Source, InstanceId, UserName, TimeGenerated, TimeWritten | Format-List | Out-String
			Add-RichTextBox $Events_schnewjob
		}
	}
	
	$button_AccessRefusedLog_Click={
		Get-ComputerTxtBox
		Add-Logs "$ComputerName - Events: 4656 - Access refused to object"
		if ($ComputerName -like "localhost")
		{
			$Events_accessedrefused = get-eventlog -LogName Security | Where-Object { $_.EventID -eq "4656" } | Select-Object EventID, Index, Category, Message, Source, InstanceId, UserName, TimeGenerated, TimeWritten | Format-List | Out-String
			Add-RichTextBox $Events_accessedrefused
		}
		else
		{
			$Events_accessedrefused = get-eventlog -LogName Security -ComputerName $ComputerName | Where-Object { $_.EventID -eq "4656" } | Select-Object EventID, Index, Category, Message, Source, InstanceId, UserName, TimeGenerated, TimeWritten | Format-List | Out-String
			Add-RichTextBox $Events_accessedrefused
		}
	}
	
	$button_WinDefenderFindLog_Click={
		Get-ComputerTxtBox
		Add-Logs "$ComputerName - Events: 3004, 3005 - Windows defender finds something"
		if ($ComputerName -like "localhost")
		{
			$Events_windowsdefenderfind = get-eventlog -LogName Security | Where-Object { $_.EventID -eq "3004" -or $_.EventID -eq "3005" } | Select-Object EventID, Index, Category, Message, Source, InstanceId, UserName, TimeGenerated, TimeWritten | Format-List | Out-String
			Add-RichTextBox $Events_windowsdefenderfind
		}
		else
		{
			$Events_windowsdefenderfind = get-eventlog -LogName Security -ComputerName $ComputerName | Where-Object { $_.EventID -eq "3004" -or $_.EventID -eq "3005" } | Select-Object EventID, Index, Category, Message, Source, InstanceId, UserName, TimeGenerated, TimeWritten | Format-List | Out-String
			Add-RichTextBox $Events_windowsdefenderfind
		}
	}
	
	$button_HardLinkAuditLog_Click={
		Get-ComputerTxtBox
		Add-Logs "$ComputerName - Events: 4664 - Create hard link to audited file"
		if ($ComputerName -like "localhost")
		{
			$Events_hardlinkcreated = get-eventlog -LogName Security | Where-Object { $_.EventID -eq "4664" } | Select-Object EventID, Index, Category, Message, Source, InstanceId, UserName, TimeGenerated, TimeWritten | Format-List | Out-String
			Add-RichTextBox $Events_hardlinkcreated
		}
		else
		{
			$Events_hardlinkcreated = get-eventlog -LogName Security -ComputerName $ComputerName | Where-Object { $_.EventID -eq "4664" } | Select-Object EventID, Index, Category, Message, Source, InstanceId, UserName, TimeGenerated, TimeWritten | Format-List | Out-String
			Add-RichTextBox $Events_hardlinkcreated
		}
	}
	
	$button_SoftwareRestLog_Click={
		Get-ComputerTxtBox
		Add-Logs "$ComputerName - Events: 865 - Software restriction triggered"
		if ($ComputerName -like "localhost")
		{
			$Events_softwarerestricted = get-eventlog -LogName Security | Where-Object { $_.EventID -eq "865" } | Select-Object EventID, Index, Category, Message, Source, InstanceId, UserName, TimeGenerated, TimeWritten | Format-List | Out-String
			Add-RichTextBox $Events_softwarerestricted
		}
		else
		{
			$Events_softwarerestricted = get-eventlog -LogName Security -ComputerName $ComputerName | Where-Object { $_.EventID -eq "865" } | Select-Object EventID, Index, Category, Message, Source, InstanceId, UserName, TimeGenerated, TimeWritten | Format-List | Out-String
			Add-RichTextBox $Events_softwarerestricted
		}
	}
	
	$button_AppErrorLog_Click={
		Get-ComputerTxtBox
		Add-Logs "$ComputerName - Events: 1000 - Application Error "
		if ($ComputerName -like "localhost")
		{
			$Events_apperror = get-eventlog -LogName Application | Where-Object { $_.EventID -eq "1000" } | Select-Object EventID, Index, Category, Message, Source, InstanceId, UserName, TimeGenerated, TimeWritten | Format-List | Out-String
			Add-RichTextBox $Events_apperror
		}
		else
		{
			$Events_apperror = get-eventlog -LogName Application -ComputerName $ComputerName | Where-Object { $_.EventID -eq "1000" } | Select-Object EventID, Index, Category, Message, Source, InstanceId, UserName, TimeGenerated, TimeWritten | Format-List | Out-String
			Add-RichTextBox $Events_apperror
		}
	}
	
	$button_AppHangLog_Click={
		Get-ComputerTxtBox
		Add-Logs "$ComputerName - Events: 1002 - Application Hang"
		if ($ComputerName -like "localhost")
		{
			$Events_apphang = get-eventlog -LogName Application | Where-Object { $_.EventID -eq "1002" } | Select-Object EventID, Index, Category, Message, Source, InstanceId, UserName, TimeGenerated, TimeWritten | Format-List | Out-String
			Add-RichTextBox $Events_apphang
		}
		else
		{
			$Events_apphang = get-eventlog -LogName Application -ComputerName $ComputerName | Where-Object { $_.EventID -eq "1002" } | Select-Object EventID, Index, Category, Message, Source, InstanceId, UserName, TimeGenerated, TimeWritten | Format-List | Out-String
			Add-RichTextBox $Events_apphang
		}
	}
	
	$button_ProtectedModeViolateLog_Click={
		Get-ComputerTxtBox
		Add-Logs "$ComputerName - Events: 1037 - Protected Mode violation"
		if ($ComputerName -like "localhost")
		{
			$Events_protectedmodeviolated = get-eventlog -LogName Security | Where-Object { $_.EventID -eq "1037" } | Select-Object EventID, Index, Category, Message, Source, InstanceId, UserName, TimeGenerated, TimeWritten | Format-List | Out-String
			Add-RichTextBox $Events_protectedmodeviolated
		}
		else
		{
			$Events_protectedmodeviolated = get-eventlog -LogName Security -ComputerName $ComputerName | Where-Object { $_.EventID -eq "1037" } | Select-Object EventID, Index, Category, Message, Source, InstanceId, UserName, TimeGenerated, TimeWritten | Format-List | Out-String
			Add-RichTextBox $Events_protectedmodeviolated
		}
	}
	
	$button_ServiceTermLog_Click={
		Get-ComputerTxtBox
		Add-Logs "$ComputerName - Events: 7031 - Service terminated unexpectedly"
		if ($ComputerName -like "localhost")
		{
			$Events_serviceterminated = get-eventlog -LogName System | Where-Object { $_.EventID -eq "7031" } | Select-Object EventID, Index, Category, Message, Source, InstanceId, UserName, TimeGenerated, TimeWritten | Format-List | Out-String
			Add-RichTextBox $Events_serviceterminated
		}
		else
		{
			$Events_serviceterminated = get-eventlog -LogName System -ComputerName $ComputerName | Where-Object { $_.EventID -eq "7031" } | Select-Object EventID, Index, Category, Message, Source, InstanceId, UserName, TimeGenerated, TimeWritten | Format-List | Out-String
			Add-RichTextBox $Events_serviceterminated
		}
	}
	
	$button_AccessAuditFileLog_Click={
		Get-ComputerTxtBox
		Add-Logs "$ComputerName - Events: 4663 - Audit File Accessed"
		if ($ComputerName -like "localhost")
		{
			$Events_auditfileaccess = get-eventlog -LogName Security | Where-Object { $_.EventID -eq "4663" } | Select-Object EventID, Index, Category, Message, Source, InstanceId, UserName, TimeGenerated, TimeWritten | Format-List | Out-String
			Add-RichTextBox $Events_auditfileaccess
		}
		else
		{
			$Events_auditfileaccess = get-eventlog -LogName Security -ComputerName $ComputerName | Where-Object { $_.EventID -eq "4663" } | Select-Object EventID, Index, Category, Message, Source, InstanceId, UserName, TimeGenerated, TimeWritten | Format-List | Out-String
			Add-RichTextBox $Events_auditfileaccess
		}
	}
	
	$button_InstallServiceLog_Click={
		Get-ComputerTxtBox
		Add-Logs "$ComputerName - Events: 4697 - Install a Service"
		if ($ComputerName -like "localhost")
		{
			$Events_serviceinstalled = get-eventlog -LogName Security | Where-Object { $_.EventID -eq "4697" } | Select-Object EventID, Index, Category, Message, Source, InstanceId, UserName, TimeGenerated, TimeWritten | Format-List | Out-String
			Add-RichTextBox $Events_serviceinstalled
		}
		else
		{
			$Events_serviceinstalled = get-eventlog -LogName Security -ComputerName $ComputerName | Where-Object { $_.EventID -eq "4697" } | Select-Object EventID, Index, Category, Message, Source, InstanceId, UserName, TimeGenerated, TimeWritten | Format-List | Out-String
			Add-RichTextBox $Events_serviceinstalled
		}
	}
	
	$button_accountlogonfailslog_Click={
		Get-ComputerTxtBox
		Add-Logs "$ComputerName - Events: 4625, 4626, 4627, 4628, 4630, 4635, 4649, 4740, 4771, 4772, 4777 - Logon failures"
		if ($ComputerName -like "localhost")
		{
			$Events_logonfails = get-eventlog -LogName Application | Where-Object { $_.EventID -eq "4625" -or $_.EventID -eq "4626" -or $_.EventID -eq "4627" -or $_.EventID -eq "4628" -or $_.EventID -eq "4630" -or $_.EventID -eq "4635" -or $_.EventID -eq "4649" -or $_.EventID -eq "4740" -or $_.EventID -eq "4771" -or $_.EventID -eq "4772" -or $_.EventID -eq "4777" } | Select-Object EventID, Index, Category, Message, Source, InstanceId, UserName, TimeGenerated, TimeWritten | Format-List | Out-String
			Add-RichTextBox $Events_logonfails
		}
		else
		{
			$Events_logonfails = get-eventlog -LogName Application | Where-Object { $_.EventID -eq "4625" -or $_.EventID -eq "4626" -or $_.EventID -eq "4627" -or $_.EventID -eq "4628" -or $_.EventID -eq "4630" -or $_.EventID -eq "4635" -or $_.EventID -eq "4649" -or $_.EventID -eq "4740" -or $_.EventID -eq "4771" -or $_.EventID -eq "4772" -or $_.EventID -eq "4777" } | Select-Object EventID, Index, Category, Message, Source, InstanceId, UserName, TimeGenerated, TimeWritten | Format-List | Out-String
			Add-RichTextBox $Events_logonfails
		}
	}
	
	$button_AdminLogonLog_Click={
		Get-ComputerTxtBox
		Add-Logs "$ComputerName - Events: 4672 - Admin account logons"
		if ($ComputerName -like "localhost")
		{
			$Events_adminlogon = get-eventlog -LogName Security | Where-Object { $_.EventID -eq "4672" } | Select-Object EventID, Index, Category, Message, Source, InstanceId, UserName, TimeGenerated, TimeWritten | Format-List | Out-String
			Add-RichTextBox $Events_adminlogon
		}
		else
		{
			$Events_adminlogon = get-eventlog -LogName Security -ComputerName $ComputerName | Where-Object { $_.EventID -eq "4672" } | Select-Object EventID, Index, Category, Message, Source, InstanceId, UserName, TimeGenerated, TimeWritten | Format-List | Out-String
			Add-RichTextBox $Events_adminlogon
		}
	}
	
	$button_rebootLog_Click={
		$button_RebootHistory.Enabled = $false
		Get-ComputerTxtBox
		Add-Logs "$ComputerName - Events: 6009 - Restart History"
		start-sleep -s 1
		if ($ComputerName -like "localhost")
		{
			$Events_adminlogon = get-reboottime -ComputerName $ComputerName | Format-List | Out-String
			Add-RichTextBox $Events_adminlogon
		}
		else
		{
			$Events_adminlogon = get-reboottime -ComputerName $ComputerName | Format-List | Out-String
			Add-RichTextBox $Events_adminlogon
		}
		$button_RebootHistory.Enabled = $true
	}
	
	$button_eventviewerlink_Click={
		Get-ComputerTxtBox
		Add-logs -text "$ComputerName - Event Viewer MMC (eventvwr $Computername)"
		$command = "eventvwr"
		$arguments = "$ComputerName"
		Start-Process $command $arguments
	}
	
	$button_AccountChangesLog_Click = {
		Get-ComputerTxtBox
		Add-Logs "$ComputerName - Events: 4720, 4726, 4738, 4781 - Account Changes"
		if ($ComputerName -like "localhost")
		{
			$Events_accountchange = get-eventlog -LogName Security | Where-Object { $_.EventID -eq "4726" -or $_.EventID -eq "4720" -or $_.EventID -eq "4738" -or $_.EventID -eq "4781" } | Select-Object EventID, Index, Category, Message, Source, InstanceId, UserName, TimeGenerated, TimeWritten | Format-List | Out-String
			Add-RichTextBox $Events_accountchange
		}
		else
		{
			$Events_accountchange = get-eventlog -LogName Security -ComputerName $ComputerName | Where-Object { $_.EventID -eq "4726" -or $_.EventID -eq "4720" -or $_.EventID -eq "4738" -or $_.EventID -eq "4781" } | Select-Object EventID, Index, Category, Message, Source, InstanceId, UserName, TimeGenerated, TimeWritten | Format-List | Out-String
			Add-RichTextBox $Events_accountchange
		}
	}
	
	$button_PasswordChangesLog_Click = {
		Get-ComputerTxtBox
		Add-Logs "$ComputerName - Events: 4723, 4724 - Password Changes"
		if ($ComputerName -like "localhost")
		{
			$Events_pwordchange = get-eventlog -LogName Security | Where-Object { $_.EventID -eq "4723" -or $_.EventID -eq "4724" } | Select-Object EventID, Index, Category, Message, Source, InstanceId, UserName, TimeGenerated, TimeWritten | Format-List | Out-String
			Add-RichTextBox $Events_pwordchange
		}
		else
		{
			$Events_pwordchange = get-eventlog -LogName Security -ComputerName $ComputerName | Where-Object { $_.EventID -eq "4723" -or $_.EventID -eq "4724" } | Select-Object EventID, Index, Category, Message, Source, InstanceId, UserName, TimeGenerated, TimeWritten | Format-List | Out-String
			Add-RichTextBox $Events_pwordchange
		}
	}
	
	#endregion 
	
	#region Tab Services
	
	$button_RunningServices_Click={
		Get-ComputerTxtBox
		Add-Logs -text "$ComputerName - Services - Status: Running"
		if ($ComputerName -eq "localhost") { $ComputerName = "." }
		$Services_running = Get-Service -ComputerName $ComputerName | Where-Object { $_.Status -eq "Running" } | Format-Table -AutoSize | Out-String
		Add-RichTextBox -text $Services_running
	}
	
	$button_msclink_Click={
		Get-ComputerTxtBox
		Add-logs -text "$ComputerName - Services MMC (services.msc /computer:$ComputerName)"
		$command = "services.msc"
		$arguments = "/computer:$ComputerName"
		Start-Process $command $arguments
	}
	
	$button_servicesAutomatic_Click={
		#Clear-RichTextBox
		Get-ComputerTxtBox
		Add-Logs -text "$ComputerName - Services - StartMode- Automatic"
		if ($ComputerName -eq "localhost") { $ComputerName = "." }
		$Services_StartModeAuto = Get-WmiObject Win32_Service -ComputerName $ComputerName -Filter "startmode='auto'" | Select-Object DisplayName, Name, ProcessID, StartMode, State | Format-Table -AutoSize | out-string
		Add-RichTextBox $Services_StartModeAuto
	}
	
	$button_ServicesDisabled_Click={
		#Clear-RichTextBox
		Get-ComputerTxtBox
		Add-Logs -text "$ComputerName - Services - StartMode - Disabled"
		if ($ComputerName -eq "localhost") { $ComputerName = "." }
		$Services_StartModeDisabled = Get-WmiObject Win32_Service -ComputerName $ComputerName -Filter "startmode='disabled'" | Select-Object DisplayName, Name, ProcessID, StartMode, State | Format-Table -AutoSize | out-string
		Add-RichTextBox $Services_StartModeDisabled
	}
	
	$button_ServicesManual_Click={
		#Clear-RichTextBox
		Get-ComputerTxtBox
		Add-Logs -text "$ComputerName - Services - StartMode - Manual"
		if ($ComputerName -eq "localhost") { $ComputerName = "." }
		$Services_StartModeMan = Get-WmiObject Win32_Service -ComputerName $ComputerName -Filter "startmode='manual'" | Select-Object DisplayName, Name, ProcessID, StartMode, State | Format-Table -AutoSize | out-string
		Add-RichTextBox $Services_StartModeMan
	}
	
	$button_ServiceQuery_Click={
		#Button Types 
		#
		#$a = new-object -comobject wscript.shell
		#$intAnswer = $a.popup("Do you want to continue ?",0,"Shutdown",4)
		#if ($intAnswer -eq 6){do something}
		#Value  Description  
		#0 Show OK button.
		#1 Show OK and Cancel buttons.
		#2 Show Abort, Retry, and Ignore buttons.
		#3 Show Yes, No, and Cancel buttons.
		#4 Show Yes and No buttons.
		#5 Show Retry and Cancel buttons.
		#Clear-RichTextBox
		Get-ComputerTxtBox
		$a = new-object -comobject wscript.shell
		Add-Logs "$COMPUTERNAME - Query Service"
		#$Service_query = Read-Host "Enter the Service Name to Query `n"
		$Service_query = $textbox_services.text
		$intAnswer = $a.popup("Do you want to continue ?", 0, "$ComputerName - Query Service: $Service_query", 4)
		if (($ComputerName -like "localhost") -and ($intAnswer -eq 6))
		{
			Add-Logs "$COMPUTERNAME - Checking Service $Service_query ..."
			$Service_query_return = Get-WmiObject Win32_Service -Filter "Name='$Service_query'" | Out-String
			Add-Logs "$COMPUTERNAME - Command Sent! Service $Service_query"
			Add-RichTextBox $Service_query_return
			Add-Logs -Text "$ComputerName - Query Service $Service_query - Done."
		}
		else
		{
			if ($intAnswer -eq 6)
			{
				Add-Logs "$COMPUTERNAME - Checking the Service $Service_query ..."
				$Service_query_return = Get-WmiObject -computername $ComputerName Win32_Service -Filter "Name='$Service_query'" | Out-String
				Add-Logs "$COMPUTERNAME - Command Sent! Service $Service_query"
				Add-RichTextBox $Service_query_return
				Add-Logs -Text "$ComputerName - Query Service $Service_query - Done."
			}
		}
		#Add-Logs $($error[0].Exception.Message)
	}
	
	$button_ServiceStop_Click={
		#Button Types 
		#
		#$a = new-object -comobject wscript.shell
		#$intAnswer = $a.popup("Do you want to continue ?",0,"Shutdown",4)
		#if ($intAnswer -eq 6){do something}
		#Value  Description  
		#0 Show OK button.
		#1 Show OK and Cancel buttons.
		#2 Show Abort, Retry, and Ignore buttons.
		#3 Show Yes, No, and Cancel buttons.
		#4 Show Yes and No buttons.
		#5 Show Retry and Cancel buttons.
		#Clear-RichTextBox
		Get-ComputerTxtBox
		#Add-RichTextBox "# SERVICES - STOP SERVICE - COMPUTERNAME: $ComputerName `n`n"
		Add-logs -text "$ComputerName - Stop Service"
		#$Service_query = Read-Host "Enter the Service Name to Stop `n"
		$Service_query = $textbox_services.text
		Add-logs -text "$ComputerName - Service to Stop: $Service_query"
		$a = new-object -comobject wscript.shell
		$intAnswer = $a.popup("Do you want to continue ?", 0, "$ComputerName - Stop Service: $Service_query", 4)
		if (($ComputerName -like "localhost") -and ($intAnswer -eq 6))
		{
			Add-logs -text "$ComputerName - Stopping Service: $Service_query ..."
			$Service_query_return = Get-WmiObject Win32_Service -Filter "Name='$Service_query'"
			$Service_query_return.stopservice()
			Add-Logs -Text "$ComputerName - Command Sent! $Service_query should be stopped"
			Add-RichTextBox $Service_query_return
			Add-Logs -Text "$ComputerName - Checking the status of $Service_Query ..."
			Start-Sleep -Milliseconds 1000
			$Service_query_result = Get-WmiObject Win32_Service -Filter "Name='$Service_query'" | Out-String
			Add-RichTextBox $Service_query_result
			Add-Logs -Text "$ComputerName - Stop Service $Service_query - Done."
		} #end IF
		else
		{
			if ($intAnswer -eq 6)
			{
				Add-logs -text "$ComputerName - Stopping Service: $Service_query ..."
				$Service_query_return = Get-WmiObject Win32_Service -computername $ComputerName -Filter "Name='$Service_query'"
				$Service_query_return.stopservice()
				Add-Logs -Text "$ComputerName - Command Sent! $Service_query should be stopped"
				Add-RichTextBox $Service_query_return
				Add-Logs -Text "$ComputerName - Checking the status of $Service_Query ..."
				Start-Sleep -Milliseconds 1000
				$Service_query_result = Get-WmiObject Win32_Service -computername $ComputerName -Filter "Name='$Service_query'" | Out-String
				Add-RichTextBox $Service_query_result
				Add-Logs -Text "$ComputerName - Stop Service $Service_query - Done."
			} #end IF
		} #end ELSE
	}
	
	$button_ServiceStart_Click={
		#Button Types 
		#
		#$a = new-object -comobject wscript.shell
		#$intAnswer = $a.popup("Do you want to continue ?",0,"Shutdown",4)
		#if ($intAnswer -eq 6){do something}
		#Value  Description  
		#0 Show OK button.
		#1 Show OK and Cancel buttons.
		#2 Show Abort, Retry, and Ignore buttons.
		#3 Show Yes, No, and Cancel buttons.
		#4 Show Yes and No buttons.
		#5 Show Retry and Cancel buttons.
		Get-ComputerTxtBox
		Add-logs -text "$ComputerName - Start Service"
		$Service_query = $textbox_services.text
		Add-logs -text "$ComputerName - Service to start: $Service_query"
		$a = new-object -comobject wscript.shell
		$intAnswer = $a.popup("Do you want to continue ?", 0, "$ComputerName - Start Service: $Service_query", 4)
		if (($ComputerName -like "localhost") -and ($intAnswer -eq 6))
		{
			Add-logs -text "$ComputerName - Starting Service: $Service_query ..."
			$Service_query_return = Get-WmiObject Win32_Service -Filter "Name='$Service_query'"
			$Service_query_return.startservice()
			Add-Logs -Text "$ComputerName - Command Sent! $Service_query should be started"
			Add-RichTextBox $Service_query_return
			Add-Logs -Text "$ComputerName - Checking the status of $Service_Query ..."
			Start-Sleep -Milliseconds 1000
			$Service_query_result = Get-WmiObject Win32_Service -Filter "Name='$Service_query'" | Out-String
			Add-RichTextBox $Service_query_result
			Add-Logs -Text "$ComputerName - Start Service $Service_query - Done."
		}
		else
		{
			if ($intAnswer -eq 6)
			{
				Add-logs -text "$ComputerName - Starting Service: $Service_query ..."
				$Service_query_return = Get-WmiObject Win32_Service -computername $ComputerName -Filter "Name='$Service_query'"
				$Service_query_return.startservice()
				Add-Logs -Text "$ComputerName - Command Sent! $Service_query should be started"
				Add-RichTextBox $Service_query_return
				Add-Logs -Text "$ComputerName - Checking the status of $Service_Query ..."
				Start-Sleep -Milliseconds 1000
				$Service_query_result = Get-WmiObject Win32_Service -computername $ComputerName -Filter "Name='$Service_query'" | Out-String
				Add-RichTextBox $Service_query_result
				Add-Logs -Text "$ComputerName - Start Service $Service_query - Done."
			} # IF
		} #ELSE
		#
	}
	
	$button_ServiceRestart_Click={
		#Button Types 
		#
		#$a = new-object -comobject wscript.shell
		#$intAnswer = $a.popup("Do you want to continue ?",0,"Shutdown",4)
		#if ($intAnswer -eq 6){do something}
		#Value  Description  
		#0 Show OK button.
		#1 Show OK and Cancel buttons.
		#2 Show Abort, Retry, and Ignore buttons.
		#3 Show Yes, No, and Cancel buttons.
		#4 Show Yes and No buttons.
		#5 Show Retry and Cancel buttons.
		
		#Clear-RichTextBox
		Get-ComputerTxtBox
		Add-logs -text "$ComputerName - Restart Service"
		#Add-RichTextBox "# SERVICES - RESTART SERVICE - COMPUTERNAME: $ComputerName `n`n"
		#$Service_query = Read-Host "Enter the Service Name to Start `n"
		$Service_query = $textbox_services.text
		Add-logs -text "$ComputerName - Service to Restart: $Service_query"
		#Add-RichTextBox "SERVICE: $Service_query"
		$a = new-object -comobject wscript.shell
		$intAnswer = $a.popup("Do you want to continue ?", 0, "$ComputerName - Start Service: $Service_query", 4)
		if (($ComputerName -like "localhost") -and ($intAnswer -eq 6))
		{
			Add-logs -text "$ComputerName - Stopping Service: $Service_query ..."
			$Service_query_return = Get-WmiObject Win32_Service -Filter "Name='$Service_query'"
			$Service_query_return.stopservice()
			Add-Logs -Text "$ComputerName - Command Sent! $Service_query should be stopped"
			Add-RichTextBox $Service_query_return
			Add-Logs -Text "$ComputerName - Checking the status of $Service_Query ..."
			Start-Sleep -Milliseconds 1000
			$Service_query_result = Get-WmiObject Win32_Service -Filter "Name='$Service_query'" | Out-String
			Add-RichTextBox $Service_query_result
			Add-Logs -Text "$ComputerName - Stop Service $Service_query - Done."
			Add-Logs -Text "$ComputerName - Restarting the Service $Service_query ..."
			#Add-RichTextBox "Starting Service: $Service_query...`r"
			$Service_query_return = Get-WmiObject Win32_Service -Filter "Name='$Service_query'"
			$Service_query_return.startservice()
			Add-Logs -Text "$ComputerName - Command Sent! $Service_query should be started"
			Add-RichTextBox $Service_query_return
			Add-Logs -Text "$ComputerName - Checking the status of $Service_Query ..."
			Start-Sleep -Milliseconds 1000
			$Service_query_result = Get-WmiObject Win32_Service -Filter "Name='$Service_query'" | Out-String
			Add-RichTextBox $Service_query_result
			Add-Logs -Text "$ComputerName - Start Service $Service_query - Done."
		}
		else
		{
			if ($intAnswer -eq 6)
			{
				Add-logs -text "$ComputerName - Stopping Service: $Service_query ..."
				$Service_query_return = Get-WmiObject Win32_Service -Filter "Name='$Service_query'"
				$Service_query_return.stopservice()
				Add-Logs -Text "$ComputerName - Command Sent! $Service_query should be stopped"
				Add-RichTextBox $Service_query_return
				Add-Logs -Text "$ComputerName - Checking the status of $Service_Query ..."
				Start-Sleep -Milliseconds 1000
				$Service_query_result = Get-WmiObject Win32_Service -Filter "Name='$Service_query'" | Out-String
				Add-RichTextBox $Service_query_result
				Add-Logs -Text "$ComputerName - Stop Service $Service_query - Done."
				Add-Logs -Text "$ComputerName - Restarting the Service $Service_query ..."
				$Service_query_return = Get-WmiObject Win32_Service -computername $ComputerName -Filter "Name='$Service_query'"
				$Service_query_return.startservice()
				Add-Logs -Text "$ComputerName - Command Sent! $Service_query should be started"
				Add-RichTextBox $Service_query_return
				Add-Logs -Text "$ComputerName - Checking the status of $Service_Query ..."
				Start-Sleep -Milliseconds 1000
				$Service_query_result = Get-WmiObject Win32_Service -computername $ComputerName -Filter "Name='$Service_query'" | Out-String
				Add-RichTextBox $Service_query_result
				Add-Logs -Text "$ComputerName - Start Service $Service_query - Done."
			} # IF
		} #ELSE
		#
	}
	#endregion
	
	#region Copy Buttons
	
	$button_CopyResults_Click={
		Add-logs -text "Copying Results to Clipboard"
		$textresults = $richtextbox_output.Text
		Add-ClipBoard -text $textresults
	}
	
	$button_ResultsClear_Click={
		Clear-RichTextBox
	}
	
	$button_ClearLogs_Click={
		Clear-Logs
	}
	
	$button_CopyLogs_Click={
		Add-logs -text "Copying Log to Clipboard"
		$textLog = $richtextbox_logs.Text
		Add-ClipBoard -text $textLog
	}
	
	#endregion
	
	#region Menu (File)
	$exitToolStripMenuItem_Click={
		$Exitapp = Show-MsgBox -Prompt "Exit the application?" -Title "$ApplicationName $ApplicationVersion - Exit" -BoxType YesNo
		if ($Exitapp -eq "YES") { $form_MainForm.Close() }
	}
	
	$export_wordpadToolStripMenuItem_Click={
		$filename = [System.IO.Path]::GetTempFileName()
		$richtextbox_output.SaveFile($filename)
		Add-logs -text "Sending RichTextBox to wordpad"
		Start-Process wordpad $filename
		Start-Sleep -Seconds 5
		#Remove-Item -Force $filename
	}
	
	$wordpadToolStripMenuItem1_Click={
		$filename = [System.IO.Path]::GetTempFileName()
		$richtextbox_logs.SaveFile($filename)
		Add-logs -text "Sending Logs to wordpad"
		Start-Process wordpad $filename
		Start-Sleep -Seconds 5
		#Remove-Item -Force $filename
	}
	
	$notpadToolStripMenuItem_Click={
		$filename = [System.IO.Path]::GetTempFileName()
		$richtextbox_logs.SaveFile($filename)
		Add-logs -text "Sending Logs to notepad"
		Start-Process notepad $filename
		Start-Sleep -Seconds 5
		#Remove-Item -Force $filename
	}
	
	$notepadToolStripMenuItem_Click={
		$filename = [System.IO.Path]::GetTempFileName()
		$richtextbox_output.SaveFile($filename)
		Add-logs -text "Sending RichTextBox to notepad"
		Start-Process notepad $filename
		Start-Sleep -Seconds 5
		#Remove-Item -Force $filename
	}
	
	#endregion
	
	#region Menu (Apps)
	$addRemoveProgramsToolStripMenuItem_Click={
		Start-Process appwiz.cpl; Add-logs -text "Localhost - Add/Remove Programs (appwiz.cpl)"
	}
	
	$scheduledTasksToolStripMenuItem_Click={
		Start-Process (control schedtasks)
	}
	
	$administrativeToolsToolStripMenuItem_Click={
		Start-Process (Control admintools); Add-logs -text "Localhost - Administrative Tools (Control admintools)"
	}
	
	$authorizationManagerToolStripMenuItem_Click={
		Start-Process certmgr.msc
	}
	
	$certificateManagerToolStripMenuItem_Click={
		Start-Process certmgr.msc
	}
	
	$diskManagementToolStripMenuItem_Click={
		start-process "diskmgmt.msc"
	}
	
	$groupPolicyEditorToolStripMenuItem_Click={
		start-process "Gpedit.msc"
	}
	
	$localSecuritySettingsToolStripMenuItem_Click={
		Start-Process "secpol.msc"
	}
	
	$localUsersAndGroupsToolStripMenuItem_Click={
		start-process "lusrmgr.msc"
	}
	
	$networkConnectionsToolStripMenuItem_Click={
		Start-Process "ncpa.cpl"
	}
	
	$performanceMonitorToolStripMenuItem_Click={
		Start-Process "Perfmon.msc"
	}
	
	$sharedFoldersToolStripMenuItem_Click={
		Start-Process "fsmgmt.msc"
	}
	
	#endregion
	
	#region Menu (Tools)
	$comToolStripMenuItem_Click={
		Start-Process comexp.msc
	}
	
	$diskCleanupToolStripMenuItem_Click={
		Start-Process cleanmgr.exe
	}
	
	$eventViewerToolStripMenuItem_Click={
		Start-Process eventvwr.msc
	}
	
	$iSCSIInitiatorToolStripMenuItem_Click={
		Start-Process iscsicpl.exe
	}
	
	$oDBC32BitToolStripMenuItem_Click={
		Start-Process odbcad32.exe
	}
	
	$oDBC64BitToolStripMenuItem_Click={
		Start-Process odbcad32.exe
	}
	
	$printManagementToolStripMenuItem_Click={
		Start-Process printmanagement.msc
	}
	
	$servicesToolStripMenuItem_Click={
		Start-Process services.msc
	}
	
	$systemConfigurationToolStripMenuItem_Click={
		Start-Process msconfig.exe
	}
	
	$systemInformationToolStripMenuItem_Click={
		Start-Process msinfo32.exe
	}
	
	$windowsFirewallToolStripMenuItem_Click={
		Start-Process WF.msc
	}
	
	$windowsMemoryDianosticToolStripMenuItem_Click={
		Start-Process MdSched.exe
	}
	#endregion
	
	
	#Save the initial state of the form
	$InitialFormWindowState = $form_MainForm.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$form_MainForm.add_Load($Form_StateCorrection_Load)
	
	
	#region Tab Network
	$buttonIPConfig_Click={
		Add-logs -text "$ComputerName - Running IPconfig"
		$result = Get-IP -ComputerName $ComputerName | Format-Table Name, IP4, IP4Subnet, DefaultGWY, MacAddress, DNSServer, WinsPrimary, WinsSecondary -AutoSize | Out-String -Width $richtextbox_output.Width
		Add-RichTextBox $result
	}
	
	$button_HostFile_Click = {
		$button_HostFile.Enabled = $false
		Get-ComputerTxtBox
		Add-logs -text "LocalHost - Check for host file - No contents in Host file if results blank"
		$IP = (get-ip $ComputerName).ip4
		if ($IP -eq $null) { $IP = (get-ip $ComputerName).ip6 }
		if (($ComputerName -eq "localhost") -or ($ComputerName -eq "127.0.0.1") -or ($ComputerName -eq "$env:ComputerName") -or ($ComputerName -eq $IP))
		{
			$resultHostFile = Get-HostsFile | Out-String
			if ($resultHostFile -ne $null)
			{
				Add-RichTextBox $resultHostFile
			}
		}
		Else
		{
			$resultHostsFileRemote = Get-HostsFile -computername $ComputerName | Out-String
			if ($resultHostFile -ne $null)
			{
				Add-RichTextBox $resultHostsFileRemote
			}
		}
		$button_HostFile.Enabled = $true
	}
	
	$button_ConnectivityTest_Click={
		Get-ComputerTxtBox
		Add-Logs -text "$ComputerName - Test the Conectivity"
		$result = Test-Server -computername $ComputerName | Format-List | Out-String
		Add-richtextbox "$result`n"
	}
	
	$button_IPInfo_Click = {
		Get-ComputerTxtBox
		Add-logs -text "$ComputerName - Terminate Process"
		$IP = $IP = get-ip $ComputerName | Out-String
		Add-RichTextBox $IP
	}
	
	$button_NetworkInterface_Click={
		Get-ComputerTxtBox
		Add-logs -text "$ComputerName - Network Interface Card Configuration (Will take some time)"
		$result = Get-NICInfo -ComputerName $ComputerName | Format-List | Out-String
		Add-RichTextBox $result
	}
	
	$button_Nslookup_Click={
		Get-ComputerTxtBox
		Add-logs -text "$ComputerName - Running Nslookup"
		$cmd = "cmd"
		$param = "/k nslookup $ComputerName"
		Start-Process $cmd $param -WorkingDirectory c:\
	}
	
	$button_adapterinfo_Click={
		Get-ComputerTxtBox
		Add-Logs -text "$ComputerName - Network Adapter Properties "
		$result = gwmi win32_networkadapterconfiguration -computername $ComputerName | Out-String
		$result2 = gwmi win32_networkadapter -computername $ComputerName | Out-String
		Add-richtextbox "$result2`, $result"
	}
	
	$button_summary_Click={
		Get-ComputerTxtBox
		Add-logs -text "$ComputerName - Get the summary of the Network"
		$result = Get-NetworkSummary -ComputerName $ComputerName | Format-List | Out-String
		Add-RichTextBox $result
	}
	
	$button_broadcastaddress_Click={
		Get-ComputerTxtBox
		Add-logs -text "$ComputerName - Get the broadcast address "
		$result = Get-BroadcastAddress | Out-String
		Add-RichTextBox $result
	}
	
	$buttonConvertBinary_Click={
		Get-ComputerTxtBox
		Add-logs -text "$ComputerName - Convert IP to Binary Address"
		$result = ConvertTo-BinaryIP| Out-String
		Add-RichTextBox $result
	}
	
	$button_convertDecimal_Click={
		Get-ComputerTxtBox
		Add-logs -text "$ComputerName - Convert IP to Binary Address"
		$result = ConvertTo-DecimalIP | Out-String
		Add-RichTextBox $result
	}
	
	$button_MaskLength_Click={
		Get-ComputerTxtBox
		Add-logs -text "$ComputerName - Get the Mask Length"
		$result = ConvertTo-MaskLength | Out-String
		Add-RichTextBox $result
	}
	
	$button_Mask_Click={
		Get-ComputerTxtBox
		Add-logs -text "$ComputerName - Convert IP to Mask"
		$result = ConvertTo-Mask | Out-String
		Add-RichTextBox $result
	}
	
	
	$button_Aliases_Click={
		Get-ComputerTxtBox
		Add-logs -text "$ComputerName - Get all available Alias's"
		$result = Get-Alias | Out-String
		Add-RichTextBox $result
	}
	
	
	#endregion
	
	#region Tab Processes
	$button_Over100Mb_Click={
		#Clear-RichTextBox
		Get-ComputerTxtBox
		Add-Logs -text "$ComputerName - Processes >100MB"
		if ($ComputerName -eq "localhost") { $ComputerName = "." }
		$owners = @{ }
		Get-WmiObject win32_process -ComputerName $ComputerName | % { $owners[$_.handle] = $_.getowner().user }
		$Processes_Over100MB = Get-Process -ComputerName $ComputerName | Where-Object { $_.WorkingSet -gt 100mb } | Select-Object Handles, NPM, PM, WS, VM, CPU, ID, ProcessName, MachineName, @{ l = "Owner"; e = { $owners[$_.id.tostring()] } } | sort ws | ft -AutoSize | Out-String
		Add-RichTextBox $Processes_Over100MB
	}
	
	$button_Owners_Click={
		#Clear-RichTextBox
		Get-ComputerTxtBox
		Add-Logs -text "$ComputerName - Processes with owners"
		if ($ComputerName -eq "localhost") { $ComputerName = "." }
		$owners = @{ }
		Get-WmiObject win32_process -ComputerName $ComputerName | % { $owners[$_.handle] = $_.getowner().user }
		$ProcessALL = get-process -ComputerName $ComputerName | Select ProcessName, @{ l = "Owner"; e = { $owners[$_.id.tostring()] } }, CPU, WorkingSet, Handles, Id, MachineName | ft -AutoSize | out-string
		Add-RichTextBox $ProcessALL
	}
	
	$button_Processes_Click={
		Get-ComputerTxtBox
		Add-Logs -text "$ComputerName - All Processes"
		if ($ComputerName -eq "localhost") { $ComputerName = "." }
		$ProcessALL = get-process -ComputerName $ComputerName | out-string
		Add-RichTextBox $ProcessALL
	}
	
	$button_RecentlyRun_Click={
		#Clear-RichTextBox
		Get-ComputerTxtBox
		Add-Logs "$ComputerName - Processes - Processes started in last hour"
		if ($ComputerName -eq "localhost") { $ComputerName = "." }
		$owners = @{ }
		Get-WmiObject win32_process -ComputerName $ComputerName | % { $owners[$_.handle] = $_.getowner().user }
		$ProcessALL = get-process -ComputerName $ComputerName | Where-Object { trap { continue }  (New-Timespan $_.StartTime).TotalMinutes -le 10 } | Select ProcessName, @{ l = "StartTime"; e = { $_.StartTime } }, @{ l = "Owner"; e = { $owners[$_.id.tostring()] } }, CPU, WorkingSet, Handles, Id | fl | out-string
		Add-RichTextBox $ProcessALL
	}
	
	$buttonTaskManager_Click={
		Start-Process taskmgr.exe
	}
	
	$button_Terminate_Click={
		#Button Types 
		#
		#$a = new-object -comobject wscript.shell
		#$intAnswer = $a.popup("Do you want to continue ?",0,"Shutdown",4)
		#if ($intAnswer -eq 6){do something}
		#Value  Description  
		#0 Show OK button.
		#1 Show OK and Cancel buttons.
		#2 Show Abort, Retry, and Ignore buttons.
		#3 Show Yes, No, and Cancel buttons.
		#4 Show Yes and No buttons.
		#5 Show Retry and Cancel buttons.
		#Clear-RichTextBox
		Get-ComputerTxtBox
		Add-logs -text "$ComputerName - Terminate Process"
		#$Service_query = Read-Host "Enter the Service Name to Stop `n"
		$Process_query = $textbox_processName.text
		Add-logs -text "$ComputerName - Process to Terminate: $Process_query"
		$a = new-object -comobject wscript.shell
		$intAnswer = $a.popup("Do you want to continue ?", 0, "$ComputerName - Terminate Process: $Process_query", 4)
		
		#localhost
		if (($ComputerName -like "localhost") -and ($intAnswer -eq 6))
		{
			Add-logs -text "$ComputerName - Terminate Process: $Process_query - Terminating..."
			$Process_query_return = (Get-WmiObject Win32_Process -Filter "Name='$Process_query'").Terminate() | Out-String
			#$Process_query_return.Terminate()
			#Add-Logs -Text "$ComputerName - Terminate Process: $Process_query ..."
			Add-RichTextBox $Process_query_return
			Add-logs -text "$ComputerName - Terminate Process: $Process_query - Checking Status... "
			Start-Sleep -Milliseconds 1000
			$Process_query_return = Get-WmiObject Win32_Process -Filter "Name='$Process_query'" | Out-String
			if (!($Process_query_return)) { Add-Logs -Text "$ComputerName - $Process_query  has been terminated" }
			Add-logs -text "$ComputerName - Terminate Process: $Process_query - Terminated "
		} #end IF
		
		#RemoteHost
		else
		{
			if ($intAnswer -eq 6)
			{
				Add-logs -text "$ComputerName - Terminate Process: $Process_query - Terminating..."
				$Process_query_return = (Get-WmiObject Win32_Process -Filter "Name='$Process_query'").Terminate() | Out-String
				#$Process_query_return.Terminate()
				Add-RichTextBox $Process_query_return
				Add-logs -text "$ComputerName - Terminate Process: $Process_query - Checking Status... "
				Start-Sleep -Milliseconds 1000
				$Process_query_return = Get-WmiObject Win32_Process -computername $ComputerName -Filter "Name='$Process_query'" | Out-String
				if (!($Process_query_return)) { Add-Logs -Text "$ComputerName - Terminate Process: $Process_query - Terminated " }
				#Add-logs -text "$ComputerName - Terminate Process: $Process_query - Terminated "
			} #end IF
		} #end ELSE
	}
	
	#endregion
	
	
	
	$button_gpupdate_Click={
		Get-ComputerTxtBox
		Add-logs -text "$ComputerName - Update the Group Policy"
		$result = Invoke-GPUpdate -ComputerName $ComputerName
		if ($result -ne $null)
		{
			if ($result.ReturnValue -eq 0)
			{
				Show-MsgBox -BoxType "OKOnly" -Title "$ComputerName - Group Policy Update" -Prompt "Gpupdate ran successfully!" -Icon "Information"
				Add-RichTextBox $($result | Out-String)
			}
		}
		else { Show-MsgBox -BoxType "OKOnly" -Title "$ComputerName - Group Policy Update" -Prompt "Gpupdate does not seem to work! Are you in a Domain ?" -Icon "Exclamation" }
	}
	
	$button_retstart_Click={
		Get-ComputerTxtBox
		Add-Logs -text "$ComputerName - Restart Computer"
		#$result = Restart-Computer -ComputerName $ComputerName -Force -Confirm
		$Confirmation = Show-MsgBox -Prompt "Confirm to restart $ComputerName, Are you sure ?" -Title "$ComputerName - Restart Computer" -Icon Exclamation -BoxType YesNo
		#$result = (Get-WmiObject Win32_OperatingSystem -ComputerName $ComputerName).Reboot()
		if ($Confirmation -eq "YES")
		{
			#(Get-WmiObject Win32_OperatingSystem -ComputerName $ComputerName).Reboot()
			Restart-Computer -ComputerName $ComputerName -Force
			Show-MsgBox -Prompt "$ComputerName - Restart Initialized" -Title "$ComputerName - Restart Computer" -Icon Information -BoxType OKOnly
		}
		else { Show-MsgBox -BoxType "OKOnly" -Title "$ComputerName - Restart" -Prompt "$ComputerName - Cancelled" -Icon "Information" }
	}
	
	$button_shutdown_Click={
		Get-ComputerTxtBox
		Add-Logs -text "$ComputerName - Shutdown Computer"
		#$result = Stop-Computer -ComputerName $ComputerName -Force -Confirm
		$Confirmation = Show-MsgBox -Prompt "Shutdown $ComputerName, Are you sure ?" -Title "$ComputerName - Shutdown Computer" -Icon Exclamation -BoxType YesNo
		if ($Confirmation -eq "YES")
		{
			#(Get-WmiObject Win32_OperatingSystem -ComputerName $ComputerName).shutdown()
			Stop-Computer -ComputerName $ComputerName -Force
			Show-MsgBox -Prompt "$ComputerName - Shutdown Initialized" -Title "$ComputerName - Shutdown Computer" -Icon Information -BoxType OKOnly
		}
		else { Show-MsgBox -BoxType "OKOnly" -Title "$ComputerName - Shutdown" -Prompt "$ComputerName - Cancelled" -Icon "Information" }
	}
	$button_remoteAssistance_Click={
		Get-ComputerTxtBox
		Add-Logs -text "$ComputerName - Remote Assistance"
		MSRA.exe /OfferRA $ComputerName
	}
	
	$button_remoteDesktop_Click={
		Get-ComputerTxtBox
		add-logs -text "$ComputerName - Remote Desktop Connection"
		$port = ":3389"
		$command = "mstsc"
		$argument = "/v:$computername$port /admin"
		Start-Process $command $argument
	}
	
	$button_openCdrive_Click={
		Get-ComputerTxtBox
		Add-Logs -text "$ComputerName - Open C$ Drive"
		$PathToCDrive = "\\$ComputerName\c$"
		Explorer.exe $PathToCDrive
	}
	
	$button_pshellremote_Click={
		Get-ComputerTXTBOX
		Add-logs -text "$ComputerName - Open a PowerShell Remoting Session"
		if (Test-PSRemoting -ComputerName $ComputerName)
		{
			Add-logs -text "$ComputerName - Powershell Remote Session"
			Start-Process powershell.exe -ArgumentList "-noexit -command Enter-PSSession -ComputerName $ComputerName"
		}
		else
		{
			Add-logs -text "$ComputerName - PsRemoting does not seem to be enabled"
			Show-MsgBox -Title "PSRemoting" -BoxType "OKOnly" -Icon "Exclamation" -Prompt "PSRemoting does not seem to be enabled"
		}
	}
	
	$button_remoteCmd_Click={
		Get-ComputerTxtBox
		Add-Logs -text "$ComputerName - Run a Remote Command"
		$RemoteCommand = Show-Inputbox -message "Enter a command" -title "$Computername - Run-RemoteCMD" -default "-restart"
		if ($RemoteCommand -ne "")
		{
			Run-RemoteCMD -ComputerName $ComputerName -Command $RemoteCommand
			Add-Logs -text "$ComputerName - Remote Command Sent!"
		}
	}
	
	$button__Click={
		
		Get-ComputerTxtBox
		#disable the button to avoid multiple click
		$button_mmcCompmgmt.Enabled = $false
		if (($ComputerName -like "localhost") -or ($ComputerName -like ".") -or ($ComputerName -like "127.0.0.1") -or ($ComputerName -like "$env:computername"))
		{
			Add-logs -text "Localhost - Computer Management MMC (compmgmt.msc)"
			$command = "compmgmt.msc"
			Start-Process $command
		}
		else
		{
			Add-logs -text "$ComputerName - Computer Management MMC (compmgmt.msc /computer:$Computername)"
			$command = "compmgmt.msc"
			$arguments = "/computer:$computername"
			Start-Process $command $arguments
		}
		#Enable the button
		$button_mmcCompmgmt.Enabled = $true
	}
	
	$button_mmcservices_Click={
		Get-ComputerTxtBox
		Add-logs -text "$ComputerName - Services MMC (services.msc /computer:$ComputerName)"
		$command = "services.msc"
		$arguments = "/computer:$computername"
		Start-Process $command $arguments
	}
	
	$button_EventViewer_Click={
		Get-ComputerTxtBox
		Add-logs -text "$ComputerName - Event Viewer MMC (eventvwr $Computername)"
		$command = "eventvwr"
		$arguments = "$ComputerName"
		Start-Process $command $arguments
	}
	
	$button_shares_Click={
		$ComputerName = $textbox_computername.Text
		Add-logs -text "$ComputerName - Shared Folders MMC (fsmgmt.msc /computer:$ComputerName"
		$cmd = "fsmgmt.msc"; $param = "/computer:$ComputerName"
		Start-Process $cmd $param
	}
	
	$button_firewallmmc_Click={
		Get-ComputerTxtBox
		Add-logs -text "$ComputerName - Firewall MMC (WF.msc $Computername)"
		$command = "WF.msc"
		$arguments = "$ComputerName"
		Start-Process $command $arguments
	}
	
	$button_taskmgrmmc_Click={ 
		Get-ComputerTxtBox
		Add-logs -text "$ComputerName - Task Manager (taskmgr.exe $Computername)"
		$command = "taskmgr.exe"
		$arguments = "$ComputerName"
		Start-Process $command $arguments
	}
	
	$button_securityPolicy_Click={
		Get-ComputerTxtBox
		Add-logs -text "$ComputerName - Security Policy (secpol.msc $Computername)"
		$command = "secpol.msc"
		$arguments = "$ComputerName"
		Start-Process $command $arguments
	}
	
	$button_windefender_Click={
		Get-ComputerTxtBox
		Add-logs -text "$ComputerName - Windows Defender (MSASCui.exe $Computername)"
		$command = "MSASCui.exe"
		$arguments = "$ComputerName"
		Start-Process $command $arguments
	}
		# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$form_MainForm.WindowState = $InitialFormWindowState
	}
	
	$Form_StoreValues_Closing=
	{
		#Store the control values
		$script:MainForm_richtextbox_logs = $richtextbox_logs.Text
		$script:MainForm_richtextbox_output = $richtextbox_output.Text
		$script:MainForm_textbox_ComputerName = $textbox_ComputerName.Text
		$script:MainForm_textbox_services = $textbox_services.Text
		$script:MainForm_textbox_processName = $textbox_processName.Text
	}

	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$button_CopyLogs.remove_Click($button_CopyLogs_Click)
			$button_ClearLogs.remove_Click($button_ClearLogs_Click)
			$button_CopyResults.remove_Click($button_CopyResults_Click)
			$button_ResultsClear.remove_Click($button_ResultsClear_Click)
			$richtextbox_logs.remove_TextChanged($richtextbox_logs_TextChanged)
			$richtextbox_output.remove_TextChanged($richtextbox_output_TextChanged)
			$button_properties.remove_Click($button_properties_Click)
			$textbox_ComputerName.remove_TextChanged($textbox_ComputerName_TextChanged)
			$button_.remove_Click($button__Click)
			$button_securityPolicy.remove_Click($button_securityPolicy_Click)
			$button_mmcservices.remove_Click($button_mmcservices_Click)
			$button_firewallmmc.remove_Click($button_firewallmmc_Click)
			$button_taskmgrmmc.remove_Click($button_taskmgrmmc_Click)
			$button_shares.remove_Click($button_shares_Click)
			$button_EventViewer.remove_Click($button_EventViewer_Click)
			$button_productKey.remove_Click($button_productKey_Click)
			$button_motherboard.remove_Click($button_motherboard_Click)
			$button_Aliases.remove_Click($button_Aliases_Click)
			$button_licensestatus.remove_Click($button_licensestatus_Click)
			$button_remoteCmd.remove_Click($button_remoteCmd_Click)
			$button_pshellremote.remove_Click($button_pshellremote_Click)
			$button_shutdown.remove_Click($button_shutdown_Click)
			$button_SetExePolicy.remove_Click($button_SetExePolicy_Click)
			$button_openCdrive.remove_Click($button_openCdrive_Click)
			$button_retstart.remove_Click($button_retstart_Click)
			$button_gpupdate.remove_Click($button_gpupdate_Click)
			$button_remoteAssistance.remove_Click($button_remoteAssistance_Click)
			$button_remoteDesktop.remove_Click($button_remoteDesktop_Click)
			$button_IPInfo.remove_Click($button_IPInfo_Click)
			$button_ping.remove_Click($button_ping_Click)
			$button_networkRouteTable.remove_Click($button_networkRouteTable_Click)
			$button_ConnectivityTest.remove_Click($button_ConnectivityTest_Click)
			$button_adapterinfo.remove_Click($button_adapterinfo_Click)
			$buttonIPConfig.remove_Click($buttonIPConfig_Click)
			$button_NetworkInterface.remove_Click($button_NetworkInterface_Click)
			$button_summary.remove_Click($button_summary_Click)
			$button_HostFile.remove_Click($button_HostFile_Click)
			$button_Nslookup.remove_Click($button_Nslookup_Click)
			$button_Mask.remove_Click($button_Mask_Click)
			$button_MaskLength.remove_Click($button_MaskLength_Click)
			$button_broadcastaddress.remove_Click($button_broadcastaddress_Click)
			$buttonConvertBinary.remove_Click($buttonConvertBinary_Click)
			$button_convertDecimal.remove_Click($button_convertDecimal_Click)
			$button_ServiceQuery.remove_Click($button_ServiceQuery_Click)
			$button_ServiceStop.remove_Click($button_ServiceStop_Click)
			$button_ServiceStart.remove_Click($button_ServiceStart_Click)
			$button_ServiceRestart.remove_Click($button_ServiceRestart_Click)
			$button_RunningServices.remove_Click($button_RunningServices_Click)
			$button_servicesAutomatic.remove_Click($button_servicesAutomatic_Click)
			$button_ServicesDisabled.remove_Click($button_ServicesDisabled_Click)
			$button_ServicesManual.remove_Click($button_ServicesManual_Click)
			$button_msclink.remove_Click($button_msclink_Click)
			$button_Over100Mb.remove_Click($button_Over100Mb_Click)
			$button_Owners.remove_Click($button_Owners_Click)
			$button_Processes.remove_Click($button_Processes_Click)
			$button_RecentlyRun.remove_Click($button_RecentlyRun_Click)
			$button_Terminate.remove_Click($button_Terminate_Click)
			$buttonTaskManager.remove_Click($buttonTaskManager_Click)
			$button_eventviewerlink.remove_Click($button_eventviewerlink_Click)
			$button_eventlogstats.remove_Click($button_eventlogstats_Click)
			$button_eventsearch.remove_Click($button_eventsearch_Click)
			$button_rebootLog.remove_Click($button_rebootLog_Click)
			$button_AppErrorLog.remove_Click($button_AppErrorLog_Click)
			$button_GroupChangesLog.remove_Click($button_GroupChangesLog_Click)
			$button_AppHangLog.remove_Click($button_AppHangLog_Click)
			$button_NewJobLog.remove_Click($button_NewJobLog_Click)
			$button_ProtectedModeViolateLog.remove_Click($button_ProtectedModeViolateLog_Click)
			$button_InstallServiceLog.remove_Click($button_InstallServiceLog_Click)
			$button_ServiceTermLog.remove_Click($button_ServiceTermLog_Click)
			$button_AccessAuditFileLog.remove_Click($button_AccessAuditFileLog_Click)
			$button_accountlogonfailslog.remove_Click($button_accountlogonfailslog_Click)
			$button_adminlogonLog.remove_Click($button_adminlogonLog_Click)
			$button_AccountChangesLog.remove_Click($button_AccountChangesLog_Click)
			$button_PasswordChangesLog.remove_Click($button_PasswordChangesLog_Click)
			$button_PriviligeAssignedLog.remove_Click($button_PriviligeAssignedLog_Click)
			$button_ClearSecurityLog.remove_Click($button_ClearSecurityLog_Click)
			$button_SoftwareRestLog.remove_Click($button_SoftwareRestLog_Click)
			$button_AuditPolicyChangedLog.remove_Click($button_AuditPolicyChangedLog_Click)
			$button_HardLinkAuditLog.remove_Click($button_HardLinkAuditLog_Click)
			$button_SysAccessGrantedLog.remove_Click($button_SysAccessGrantedLog_Click)
			$button_WinDefenderFindLog.remove_Click($button_WinDefenderFindLog_Click)
			$button_DomainPolicyChangeLog.remove_Click($button_DomainPolicyChangeLog_Click)
			$button_AccessRefusedLog.remove_Click($button_AccessRefusedLog_Click)
			$button_AdminLockoutLog.remove_Click($button_AdminLockoutLog_Click)
			$button_AccountLogonsLog.remove_Click($button_AccountLogonsLog_Click)
			$button_ChangeSystemTimeLog.remove_Click($button_ChangeSystemTimeLog_Click)
			$button_ManualSearch.remove_Click($button_ManualSearch_Click)
			$button_last20security.remove_Click($button_last20security_Click)
			$button_last20application.remove_Click($button_last20application_Click)
			$button_last20hardware.remove_Click($button_last20hardware_Click)
			$button_last20oalerts.remove_Click($button_last20oalerts_Click)
			$button_last20powershell.remove_Click($button_last20powershell_Click)
			$button_last20system.remove_Click($button_last20system_Click)
			$form_MainForm.remove_Load($form_MainForm_Load)
			$exitToolStripMenuItem.remove_Click($exitToolStripMenuItem_Click)
			$export_wordpadToolStripMenuItem.remove_Click($export_wordpadToolStripMenuItem_Click)
			$export_wordpadLogsToWordpadToolStripMenuItem.remove_Click($wordpadToolStripMenuItem1_Click)
			$export_LogsToNotepadToolStripMenuItemToolStripMenuItem.remove_Click($notpadToolStripMenuItem_Click)
			$notepadToolStripMenuItem.remove_Click($notepadToolStripMenuItem_Click)
			$scheduledTasksToolStripMenuItem.remove_Click($scheduledTasksToolStripMenuItem_Click)
			$addRemoveProgramsToolStripMenuItem.remove_Click($addRemoveProgramsToolStripMenuItem_Click)
			$administrativeToolsToolStripMenuItem.remove_Click($administrativeToolsToolStripMenuItem_Click)
			$certificateManagerToolStripMenuItem.remove_Click($certificateManagerToolStripMenuItem_Click)
			$diskManagementToolStripMenuItem.remove_Click($diskManagementToolStripMenuItem_Click)
			$groupPolicyEditorToolStripMenuItem.remove_Click($groupPolicyEditorToolStripMenuItem_Click)
			$localSecuritySettingsToolStripMenuItem.remove_Click($localSecuritySettingsToolStripMenuItem_Click)
			$localUsersAndGroupsToolStripMenuItem.remove_Click($localUsersAndGroupsToolStripMenuItem_Click)
			$networkConnectionsToolStripMenuItem.remove_Click($networkConnectionsToolStripMenuItem_Click)
			$performanceMonitorToolStripMenuItem.remove_Click($performanceMonitorToolStripMenuItem_Click)
			$sharedFoldersToolStripMenuItem.remove_Click($sharedFoldersToolStripMenuItem_Click)
			$comToolStripMenuItem.remove_Click($comToolStripMenuItem_Click)
			$diskCleanupToolStripMenuItem.remove_Click($diskCleanupToolStripMenuItem_Click)
			$eventViewerToolStripMenuItem.remove_Click($eventViewerToolStripMenuItem_Click)
			$iSCSIInitiatorToolStripMenuItem.remove_Click($iSCSIInitiatorToolStripMenuItem_Click)
			$oDBC32BitToolStripMenuItem.remove_Click($oDBC32BitToolStripMenuItem_Click)
			$oDBC64BitToolStripMenuItem.remove_Click($oDBC64BitToolStripMenuItem_Click)
			$printManagementToolStripMenuItem.remove_Click($printManagementToolStripMenuItem_Click)
			$servicesToolStripMenuItem.remove_Click($servicesToolStripMenuItem_Click)
			$systemConfigurationToolStripMenuItem.remove_Click($systemConfigurationToolStripMenuItem_Click)
			$systemInformationToolStripMenuItem.remove_Click($systemInformationToolStripMenuItem_Click)
			$windowsFirewallToolStripMenuItem.remove_Click($windowsFirewallToolStripMenuItem_Click)
			$windowsMemoryDianosticToolStripMenuItem.remove_Click($windowsMemoryDianosticToolStripMenuItem_Click)
			$form_MainForm.remove_Load($Form_StateCorrection_Load)
			$form_MainForm.remove_Closing($Form_StoreValues_Closing)
			$form_MainForm.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch [Exception]
		{ }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$form_MainForm.SuspendLayout()
	$tabcontrol1.SuspendLayout()
	$tabpage_computer.SuspendLayout()
	$tabpage_general.SuspendLayout()
	$groupbox8.SuspendLayout()
	$groupbox7.SuspendLayout()
	$groupbox6.SuspendLayout()
	$tabpage_networking.SuspendLayout()
	$groupbox2.SuspendLayout()
	$groupbox1.SuspendLayout()
	$tabpage_services.SuspendLayout()
	$groupbox3.SuspendLayout()
	$groupbox4.SuspendLayout()
	$tabpage_processes.SuspendLayout()
	$groupbox5.SuspendLayout()
	$tabpage_eventlogs.SuspendLayout()
	$groupbox_eventsgeneral.SuspendLayout()
	$groupbox_AppEventLogs.SuspendLayout()
	$groupbox_SecurityEventLogs.SuspendLayout()
	$groupbox_last25events.SuspendLayout()
	$menustrip1.SuspendLayout()
	#
	# form_MainForm
	#
	$form_MainForm.Controls.Add($label_Outputlabel)
	$form_MainForm.Controls.Add($button_CopyLogs)
	$form_MainForm.Controls.Add($button_ClearLogs)
	$form_MainForm.Controls.Add($button_CopyResults)
	$form_MainForm.Controls.Add($button_ResultsClear)
	$form_MainForm.Controls.Add($richtextbox_logs)
	$form_MainForm.Controls.Add($richtextbox_output)
	$form_MainForm.Controls.Add($tabcontrol1)
	$form_MainForm.Controls.Add($menustrip1)
	$form_MainForm.ClientSize = '1148, 706'
	$form_MainForm.MainMenuStrip = $menustrip1
	$form_MainForm.Name = 'form_MainForm'
	$form_MainForm.StartPosition = 'CenterScreen'
	$form_MainForm.Text = 'Last 20 Events Quick Click'
	$form_MainForm.add_Load($form_MainForm_Load)
	#
	# label_Outputlabel
	#
	$label_Outputlabel.Font = 'Microsoft Sans Serif, 9.75pt'
	$label_Outputlabel.Location = '8, 291'
	$label_Outputlabel.Name = 'label_Outputlabel'
	$label_Outputlabel.Size = '100, 23'
	$label_Outputlabel.TabIndex = 10
	$label_Outputlabel.Text = 'Results:'
	$label_Outputlabel.TextAlign = 'MiddleCenter'
	#
	# button_CopyLogs
	#
	$button_CopyLogs.Location = '211, 231'
	$button_CopyLogs.Name = 'button_CopyLogs'
	$button_CopyLogs.Size = '84, 23'
	$button_CopyLogs.TabIndex = 9
	$button_CopyLogs.Text = 'Copy Logs'
	$button_CopyLogs.UseVisualStyleBackColor = $True
	$button_CopyLogs.add_Click($button_CopyLogs_Click)
	#
	# button_ClearLogs
	#
	$button_ClearLogs.Location = '120, 231'
	$button_ClearLogs.Name = 'button_ClearLogs'
	$button_ClearLogs.Size = '85, 23'
	$button_ClearLogs.TabIndex = 8
	$button_ClearLogs.Text = 'Clear Logs'
	$button_ClearLogs.UseVisualStyleBackColor = $True
	$button_ClearLogs.add_Click($button_ClearLogs_Click)
	#
	# button_CopyResults
	#
	$button_CopyResults.Location = '211, 288'
	$button_CopyResults.Name = 'button_CopyResults'
	$button_CopyResults.Size = '84, 23'
	$button_CopyResults.TabIndex = 7
	$button_CopyResults.Text = 'Copy Results'
	$button_CopyResults.UseVisualStyleBackColor = $True
	$button_CopyResults.add_Click($button_CopyResults_Click)
	#
	# button_ResultsClear
	#
	$button_ResultsClear.Location = '120, 288'
	$button_ResultsClear.Name = 'button_ResultsClear'
	$button_ResultsClear.Size = '85, 23'
	$button_ResultsClear.TabIndex = 6
	$button_ResultsClear.Text = 'Clear Results'
	$button_ResultsClear.UseVisualStyleBackColor = $True
	$button_ResultsClear.add_Click($button_ResultsClear_Click)
	#
	# richtextbox_logs
	#
	$richtextbox_logs.ImeMode = 'Disable'
	$richtextbox_logs.Location = '301, 231'
	$richtextbox_logs.Name = 'richtextbox_logs'
	$richtextbox_logs.Size = '836, 80'
	$richtextbox_logs.TabIndex = 4
	$richtextbox_logs.Text = ''
	$richtextbox_logs.add_TextChanged($richtextbox_logs_TextChanged)
	#
	# richtextbox_output
	#
	$richtextbox_output.Font = 'Courier New, 8.25pt'
	$richtextbox_output.Location = '4, 317'
	$richtextbox_output.Name = 'richtextbox_output'
	$richtextbox_output.RightToLeft = 'No'
	$richtextbox_output.Size = '1133, 377'
	$richtextbox_output.TabIndex = 3
	$richtextbox_output.Text = ''
	$richtextbox_output.WordWrap = $False
	$richtextbox_output.add_TextChanged($richtextbox_output_TextChanged)
	#
	# tabcontrol1
	#
	$tabcontrol1.Controls.Add($tabpage_computer)
	$tabcontrol1.Controls.Add($tabpage_general)
	$tabcontrol1.Controls.Add($tabpage_networking)
	$tabcontrol1.Controls.Add($tabpage_services)
	$tabcontrol1.Controls.Add($tabpage_processes)
	$tabcontrol1.Controls.Add($tabpage_eventlogs)
	$tabcontrol1.Font = 'Microsoft Sans Serif, 9pt'
	$tabcontrol1.Location = '4, 27'
	$tabcontrol1.Name = 'tabcontrol1'
	$tabcontrol1.SelectedIndex = 0
	$tabcontrol1.Size = '1133, 198'
	$tabcontrol1.TabIndex = 2
	#
	# tabpage_computer
	#
	$tabpage_computer.Controls.Add($label_licenseLabel)
	$tabpage_computer.Controls.Add($label_ProductKeyLabel)
	$tabpage_computer.Controls.Add($label_productkey)
	$tabpage_computer.Controls.Add($label_licensestatus)
	$tabpage_computer.Controls.Add($label_IpAddress)
	$tabpage_computer.Controls.Add($label_IPaddressLabel)
	$tabpage_computer.Controls.Add($label_uptimelabel)
	$tabpage_computer.Controls.Add($label_EXEPolicyLabel)
	$tabpage_computer.Controls.Add($label_OSLabel)
	$tabpage_computer.Controls.Add($label_PSRemoteLabel)
	$tabpage_computer.Controls.Add($label_RDPLabel)
	$tabpage_computer.Controls.Add($label_PermissionLabel)
	$tabpage_computer.Controls.Add($label_ConnectionLabel)
	$tabpage_computer.Controls.Add($label_PSRemotingStatus)
	$tabpage_computer.Controls.Add($label_RDPStatus)
	$tabpage_computer.Controls.Add($label_PermissionStatus)
	$tabpage_computer.Controls.Add($label_UptimeStatus)
	$tabpage_computer.Controls.Add($label_expolicy)
	$tabpage_computer.Controls.Add($label_OSStatus)
	$tabpage_computer.Controls.Add($button_properties)
	$tabpage_computer.Controls.Add($label_PingStatus)
	$tabpage_computer.Controls.Add($textbox_ComputerName)
	$tabpage_computer.Location = '4, 24'
	$tabpage_computer.Name = 'tabpage_computer'
	$tabpage_computer.Padding = '3, 3, 3, 3'
	$tabpage_computer.Size = '1125, 170'
	$tabpage_computer.TabIndex = 0
	$tabpage_computer.Text = 'Computer'
	$tabpage_computer.UseVisualStyleBackColor = $True
	#
	# label_licenseLabel
	#
	$label_licenseLabel.Location = '184, 109'
	$label_licenseLabel.Name = 'label_licenseLabel'
	$label_licenseLabel.Size = '116, 23'
	$label_licenseLabel.TabIndex = 24
	$label_licenseLabel.Text = 'Activation Status:'
	#
	# label_ProductKeyLabel
	#
	$label_ProductKeyLabel.Location = '479, 114'
	$label_ProductKeyLabel.Name = 'label_ProductKeyLabel'
	$label_ProductKeyLabel.Size = '100, 23'
	$label_ProductKeyLabel.TabIndex = 5
	$label_ProductKeyLabel.Text = 'Product Key:'
	#
	# label_productkey
	#
	$label_productkey.Location = '603, 114'
	$label_productkey.Name = 'label_productkey'
	$label_productkey.Size = '243, 23'
	$label_productkey.TabIndex = 23
	$label_productkey.Text = 'Product Key'
	#
	# label_licensestatus
	#
	$label_licensestatus.Location = '317, 110'
	$label_licensestatus.Name = 'label_licensestatus'
	$label_licensestatus.Size = '149, 23'
	$label_licensestatus.TabIndex = 20
	$label_licensestatus.Text = 'License'
	#
	# label_IpAddress
	#
	$label_IpAddress.Location = '603, 91'
	$label_IpAddress.Name = 'label_IpAddress'
	$label_IpAddress.Size = '243, 23'
	$label_IpAddress.TabIndex = 19
	$label_IpAddress.Text = 'IP Address'
	#
	# label_IPaddressLabel
	#
	$label_IPaddressLabel.Location = '479, 91'
	$label_IPaddressLabel.Name = 'label_IPaddressLabel'
	$label_IPaddressLabel.Size = '118, 23'
	$label_IPaddressLabel.TabIndex = 17
	$label_IPaddressLabel.Text = 'IP Address:'
	#
	# label_uptimelabel
	#
	$label_uptimelabel.Location = '479, 64'
	$label_uptimelabel.Name = 'label_uptimelabel'
	$label_uptimelabel.Size = '118, 23'
	$label_uptimelabel.TabIndex = 16
	$label_uptimelabel.Text = 'Uptime:'
	#
	# label_EXEPolicyLabel
	#
	$label_EXEPolicyLabel.Location = '479, 41'
	$label_EXEPolicyLabel.Name = 'label_EXEPolicyLabel'
	$label_EXEPolicyLabel.Size = '118, 23'
	$label_EXEPolicyLabel.TabIndex = 15
	$label_EXEPolicyLabel.Text = 'Execution Policy:'
	#
	# label_OSLabel
	#
	$label_OSLabel.Location = '479, 18'
	$label_OSLabel.Name = 'label_OSLabel'
	$label_OSLabel.Size = '118, 23'
	$label_OSLabel.TabIndex = 14
	$label_OSLabel.Text = 'Operating System:'
	#
	# label_PSRemoteLabel
	#
	$label_PSRemoteLabel.Location = '184, 87'
	$label_PSRemoteLabel.Name = 'label_PSRemoteLabel'
	$label_PSRemoteLabel.Size = '116, 23'
	$label_PSRemoteLabel.TabIndex = 13
	$label_PSRemoteLabel.Text = 'PS Remote Status:'
	#
	# label_RDPLabel
	#
	$label_RDPLabel.Location = '184, 64'
	$label_RDPLabel.Name = 'label_RDPLabel'
	$label_RDPLabel.Size = '116, 23'
	$label_RDPLabel.TabIndex = 12
	$label_RDPLabel.Text = 'RDP Status:'
	#
	# label_PermissionLabel
	#
	$label_PermissionLabel.Location = '184, 41'
	$label_PermissionLabel.Name = 'label_PermissionLabel'
	$label_PermissionLabel.Size = '116, 23'
	$label_PermissionLabel.TabIndex = 11
	$label_PermissionLabel.Text = 'Permission Status:'
	#
	# label_ConnectionLabel
	#
	$label_ConnectionLabel.Location = '184, 18'
	$label_ConnectionLabel.Name = 'label_ConnectionLabel'
	$label_ConnectionLabel.Size = '116, 23'
	$label_ConnectionLabel.TabIndex = 10
	$label_ConnectionLabel.Text = 'Connection Status:'
	#
	# label_PSRemotingStatus
	#
	$label_PSRemotingStatus.Location = '317, 87'
	$label_PSRemotingStatus.Name = 'label_PSRemotingStatus'
	$label_PSRemotingStatus.Size = '149, 23'
	$label_PSRemotingStatus.TabIndex = 9
	$label_PSRemotingStatus.Text = 'PSRemote'
	#
	# label_RDPStatus
	#
	$label_RDPStatus.Location = '317, 64'
	$label_RDPStatus.Name = 'label_RDPStatus'
	$label_RDPStatus.Size = '149, 23'
	$label_RDPStatus.TabIndex = 8
	$label_RDPStatus.Text = 'RDP'
	#
	# label_PermissionStatus
	#
	$label_PermissionStatus.Location = '317, 41'
	$label_PermissionStatus.Name = 'label_PermissionStatus'
	$label_PermissionStatus.Size = '149, 23'
	$label_PermissionStatus.TabIndex = 7
	$label_PermissionStatus.Text = 'Permission'
	#
	# label_UptimeStatus
	#
	$label_UptimeStatus.Location = '603, 64'
	$label_UptimeStatus.Name = 'label_UptimeStatus'
	$label_UptimeStatus.Size = '243, 23'
	$label_UptimeStatus.TabIndex = 6
	$label_UptimeStatus.Text = 'Uptime'
	#
	# label_expolicy
	#
	$label_expolicy.Location = '603, 41'
	$label_expolicy.Name = 'label_expolicy'
	$label_expolicy.Size = '243, 23'
	$label_expolicy.TabIndex = 5
	$label_expolicy.Text = 'Policy'
	#
	# label_OSStatus
	#
	$label_OSStatus.Location = '603, 18'
	$label_OSStatus.Name = 'label_OSStatus'
	$label_OSStatus.Size = '358, 34'
	$label_OSStatus.TabIndex = 4
	$label_OSStatus.Text = 'OS'
	#
	# button_properties
	#
	$button_properties.Location = '8, 56'
	$button_properties.Name = 'button_properties'
	$button_properties.Size = '99, 23'
	$button_properties.TabIndex = 3
	$button_properties.Text = 'Properties'
	$button_properties.UseVisualStyleBackColor = $True
	$button_properties.add_Click($button_properties_Click)
	#
	# label_PingStatus
	#
	$label_PingStatus.Location = '317, 18'
	$label_PingStatus.Name = 'label_PingStatus'
	$label_PingStatus.Size = '149, 23'
	$label_PingStatus.TabIndex = 2
	$label_PingStatus.Text = 'Ping'
	#
	# textbox_ComputerName
	#
	$textbox_ComputerName.Font = 'Microsoft Sans Serif, 9.75pt'
	$textbox_ComputerName.Location = '8, 19'
	$textbox_ComputerName.Name = 'textbox_ComputerName'
	$textbox_ComputerName.RightToLeft = 'No'
	$textbox_ComputerName.Size = '100, 22'
	$textbox_ComputerName.TabIndex = 1
	$textbox_ComputerName.TextAlign = 'Center'
	$textbox_ComputerName.add_TextChanged($textbox_ComputerName_TextChanged)
	#
	# tabpage_general
	#
	$tabpage_general.Controls.Add($groupbox8)
	$tabpage_general.Controls.Add($groupbox7)
	$tabpage_general.Controls.Add($groupbox6)
	$tabpage_general.Location = '4, 24'
	$tabpage_general.Name = 'tabpage_general'
	$tabpage_general.Padding = '3, 3, 3, 3'
	$tabpage_general.Size = '1129, 174'
	$tabpage_general.TabIndex = 5
	$tabpage_general.Text = 'General'
	$tabpage_general.UseVisualStyleBackColor = $True
	#
	# groupbox8
	#
	$groupbox8.Controls.Add($button_)
	$groupbox8.Controls.Add($button_securityPolicy)
	$groupbox8.Controls.Add($button_mmcservices)
	$groupbox8.Controls.Add($button_firewallmmc)
	$groupbox8.Controls.Add($button_taskmgrmmc)
	$groupbox8.Controls.Add($button_shares)
	$groupbox8.Controls.Add($button_EventViewer)
	$groupbox8.Location = '576, 6'
	$groupbox8.Name = 'groupbox8'
	$groupbox8.Size = '219, 139'
	$groupbox8.TabIndex = 41
	$groupbox8.TabStop = $False
	$groupbox8.Text = 'Quick Management'
	#
	# button_
	#
	$button_.Location = '6, 20'
	$button_.Name = 'button_'
	$button_.Size = '98, 23'
	$button_.TabIndex = 36
	$button_.Text = 'MMC'
	$button_.UseVisualStyleBackColor = $True
	$button_.add_Click($button__Click)
	#
	# button_securityPolicy
	#
	$button_securityPolicy.Location = '110, 78'
	$button_securityPolicy.Name = 'button_securityPolicy'
	$button_securityPolicy.Size = '98, 23'
	$button_securityPolicy.TabIndex = 40
	$button_securityPolicy.Text = 'Security Policy'
	$button_securityPolicy.UseVisualStyleBackColor = $True
	$button_securityPolicy.add_Click($button_securityPolicy_Click)
	#
	# button_mmcservices
	#
	$button_mmcservices.Location = '110, 20'
	$button_mmcservices.Name = 'button_mmcservices'
	$button_mmcservices.Size = '98, 23'
	$button_mmcservices.TabIndex = 33
	$button_mmcservices.Text = 'Services'
	$button_mmcservices.UseVisualStyleBackColor = $True
	$button_mmcservices.add_Click($button_mmcservices_Click)
	#
	# button_firewallmmc
	#
	$button_firewallmmc.Location = '6, 78'
	$button_firewallmmc.Name = 'button_firewallmmc'
	$button_firewallmmc.Size = '98, 23'
	$button_firewallmmc.TabIndex = 39
	$button_firewallmmc.Text = 'Firewall'
	$button_firewallmmc.UseVisualStyleBackColor = $True
	$button_firewallmmc.add_Click($button_firewallmmc_Click)
	#
	# button_taskmgrmmc
	#
	$button_taskmgrmmc.Location = '6, 107'
	$button_taskmgrmmc.Name = 'button_taskmgrmmc'
	$button_taskmgrmmc.Size = '98, 23'
	$button_taskmgrmmc.TabIndex = 35
	$button_taskmgrmmc.Text = 'Task Manager'
	$button_taskmgrmmc.UseVisualStyleBackColor = $True
	$button_taskmgrmmc.add_Click($button_taskmgrmmc_Click)
	#
	# button_shares
	#
	$button_shares.Location = '110, 49'
	$button_shares.Name = 'button_shares'
	$button_shares.Size = '98, 23'
	$button_shares.TabIndex = 38
	$button_shares.Text = 'Shares'
	$button_shares.UseVisualStyleBackColor = $True
	$button_shares.add_Click($button_shares_Click)
	#
	# button_EventViewer
	#
	$button_EventViewer.Location = '6, 49'
	$button_EventViewer.Name = 'button_EventViewer'
	$button_EventViewer.Size = '98, 23'
	$button_EventViewer.TabIndex = 37
	$button_EventViewer.Text = 'Event Viewer'
	$button_EventViewer.UseVisualStyleBackColor = $True
	$button_EventViewer.add_Click($button_EventViewer_Click)
	#
	# groupbox7
	#
	$groupbox7.Controls.Add($button_productKey)
	$groupbox7.Controls.Add($button_motherboard)
	$groupbox7.Controls.Add($button_Aliases)
	$groupbox7.Controls.Add($button_licensestatus)
	$groupbox7.Location = '6, 6'
	$groupbox7.Name = 'groupbox7'
	$groupbox7.Size = '262, 118'
	$groupbox7.TabIndex = 32
	$groupbox7.TabStop = $False
	$groupbox7.Text = 'General'
	#
	# button_productKey
	#
	$button_productKey.Location = '6, 19'
	$button_productKey.Name = 'button_productKey'
	$button_productKey.Size = '98, 23'
	$button_productKey.TabIndex = 22
	$button_productKey.Text = 'Product Key'
	$button_productKey.UseVisualStyleBackColor = $True
	$button_productKey.add_Click($button_productKey_Click)
	#
	# button_motherboard
	#
	$button_motherboard.Location = '6, 77'
	$button_motherboard.Name = 'button_motherboard'
	$button_motherboard.Size = '98, 23'
	$button_motherboard.TabIndex = 1
	$button_motherboard.Text = 'MotherBoard'
	$button_motherboard.UseVisualStyleBackColor = $True
	$button_motherboard.add_Click($button_motherboard_Click)
	#
	# button_Aliases
	#
	$button_Aliases.Location = '110, 20'
	$button_Aliases.Name = 'button_Aliases'
	$button_Aliases.Size = '75, 23'
	$button_Aliases.TabIndex = 18
	$button_Aliases.Text = 'Aliases'
	$button_Aliases.UseVisualStyleBackColor = $True
	$button_Aliases.add_Click($button_Aliases_Click)
	#
	# button_licensestatus
	#
	$button_licensestatus.Location = '6, 48'
	$button_licensestatus.Name = 'button_licensestatus'
	$button_licensestatus.Size = '98, 23'
	$button_licensestatus.TabIndex = 18
	$button_licensestatus.Text = 'License'
	$button_licensestatus.UseVisualStyleBackColor = $True
	$button_licensestatus.add_Click($button_licensestatus_Click)
	#
	# groupbox6
	#
	$groupbox6.Controls.Add($button_remoteCmd)
	$groupbox6.Controls.Add($button_pshellremote)
	$groupbox6.Controls.Add($button_shutdown)
	$groupbox6.Controls.Add($button_SetExePolicy)
	$groupbox6.Controls.Add($button_openCdrive)
	$groupbox6.Controls.Add($button_retstart)
	$groupbox6.Controls.Add($button_gpupdate)
	$groupbox6.Controls.Add($button_remoteAssistance)
	$groupbox6.Controls.Add($button_remoteDesktop)
	$groupbox6.Location = '274, 6'
	$groupbox6.Name = 'groupbox6'
	$groupbox6.Size = '296, 162'
	$groupbox6.TabIndex = 31
	$groupbox6.TabStop = $False
	$groupbox6.Text = 'Remote Commands'
	#
	# button_remoteCmd
	#
	$button_remoteCmd.Location = '7, 136'
	$button_remoteCmd.Name = 'button_remoteCmd'
	$button_remoteCmd.Size = '128, 23'
	$button_remoteCmd.TabIndex = 31
	$button_remoteCmd.Text = 'Remote CMD'
	$button_remoteCmd.UseVisualStyleBackColor = $True
	$button_remoteCmd.add_Click($button_remoteCmd_Click)
	#
	# button_pshellremote
	#
	$button_pshellremote.Location = '6, 20'
	$button_pshellremote.Name = 'button_pshellremote'
	$button_pshellremote.Size = '129, 23'
	$button_pshellremote.TabIndex = 30
	$button_pshellremote.Text = 'PowerShell Remote'
	$button_pshellremote.UseVisualStyleBackColor = $True
	$button_pshellremote.add_Click($button_pshellremote_Click)
	#
	# button_shutdown
	#
	$button_shutdown.Location = '141, 76'
	$button_shutdown.Name = 'button_shutdown'
	$button_shutdown.Size = '75, 23'
	$button_shutdown.TabIndex = 26
	$button_shutdown.Text = 'Shutdown'
	$button_shutdown.UseVisualStyleBackColor = $True
	$button_shutdown.add_Click($button_shutdown_Click)
	#
	# button_SetExePolicy
	#
	$button_SetExePolicy.Location = '141, 107'
	$button_SetExePolicy.Name = 'button_SetExePolicy'
	$button_SetExePolicy.Size = '75, 23'
	$button_SetExePolicy.TabIndex = 23
	$button_SetExePolicy.Text = 'Set Policy'
	$button_SetExePolicy.UseVisualStyleBackColor = $True
	$button_SetExePolicy.add_Click($button_SetExePolicy_Click)
	#
	# button_openCdrive
	#
	$button_openCdrive.Location = '141, 20'
	$button_openCdrive.Name = 'button_openCdrive'
	$button_openCdrive.Size = '75, 23'
	$button_openCdrive.TabIndex = 29
	$button_openCdrive.Text = "C$"
	$button_openCdrive.UseVisualStyleBackColor = $True
	$button_openCdrive.add_Click($button_openCdrive_Click)
	#
	# button_retstart
	#
	$button_retstart.Location = '141, 48'
	$button_retstart.Name = 'button_retstart'
	$button_retstart.Size = '75, 23'
	$button_retstart.TabIndex = 25
	$button_retstart.Text = 'Restart'
	$button_retstart.UseVisualStyleBackColor = $True
	$button_retstart.add_Click($button_retstart_Click)
	#
	# button_gpupdate
	#
	$button_gpupdate.Location = '6, 106'
	$button_gpupdate.Name = 'button_gpupdate'
	$button_gpupdate.Size = '129, 23'
	$button_gpupdate.TabIndex = 24
	$button_gpupdate.Text = 'Update Group Policy'
	$button_gpupdate.UseVisualStyleBackColor = $True
	$button_gpupdate.add_Click($button_gpupdate_Click)
	#
	# button_remoteAssistance
	#
	$button_remoteAssistance.Location = '6, 77'
	$button_remoteAssistance.Name = 'button_remoteAssistance'
	$button_remoteAssistance.Size = '129, 23'
	$button_remoteAssistance.TabIndex = 27
	$button_remoteAssistance.Text = 'Remote Assistance'
	$button_remoteAssistance.UseVisualStyleBackColor = $True
	$button_remoteAssistance.add_Click($button_remoteAssistance_Click)
	#
	# button_remoteDesktop
	#
	$button_remoteDesktop.Location = '6, 48'
	$button_remoteDesktop.Name = 'button_remoteDesktop'
	$button_remoteDesktop.Size = '129, 23'
	$button_remoteDesktop.TabIndex = 28
	$button_remoteDesktop.Text = 'Remote Desktop'
	$button_remoteDesktop.UseVisualStyleBackColor = $True
	$button_remoteDesktop.add_Click($button_remoteDesktop_Click)
	#
	# tabpage_networking
	#
	$tabpage_networking.Controls.Add($groupbox2)
	$tabpage_networking.Controls.Add($groupbox1)
	$tabpage_networking.Location = '4, 24'
	$tabpage_networking.Name = 'tabpage_networking'
	$tabpage_networking.Padding = '3, 3, 3, 3'
	$tabpage_networking.Size = '1129, 174'
	$tabpage_networking.TabIndex = 1
	$tabpage_networking.Text = 'Networking'
	$tabpage_networking.UseVisualStyleBackColor = $True
	#
	# groupbox2
	#
	$groupbox2.Controls.Add($button_IPInfo)
	$groupbox2.Controls.Add($button_ping)
	$groupbox2.Controls.Add($button_networkRouteTable)
	$groupbox2.Controls.Add($button_ConnectivityTest)
	$groupbox2.Controls.Add($button_adapterinfo)
	$groupbox2.Controls.Add($buttonIPConfig)
	$groupbox2.Controls.Add($button_NetworkInterface)
	$groupbox2.Controls.Add($button_summary)
	$groupbox2.Controls.Add($button_HostFile)
	$groupbox2.Controls.Add($button_Nslookup)
	$groupbox2.Location = '14, 6'
	$groupbox2.Name = 'groupbox2'
	$groupbox2.Size = '334, 148'
	$groupbox2.TabIndex = 16
	$groupbox2.TabStop = $False
	$groupbox2.Text = 'Network Information'
	#
	# button_IPInfo
	#
	$button_IPInfo.Location = '6, 108'
	$button_IPInfo.Name = 'button_IPInfo'
	$button_IPInfo.Size = '89, 23'
	$button_IPInfo.TabIndex = 17
	$button_IPInfo.Text = 'Get IP Info'
	$button_IPInfo.UseVisualStyleBackColor = $True
	$button_IPInfo.add_Click($button_IPInfo_Click)
	#
	# button_ping
	#
	$button_ping.Location = '6, 20'
	$button_ping.Name = 'button_ping'
	$button_ping.Size = '89, 23'
	$button_ping.TabIndex = 0
	$button_ping.Text = 'Ping'
	$button_ping.UseVisualStyleBackColor = $True
	$button_ping.add_Click($button_ping_Click)
	#
	# button_networkRouteTable
	#
	$button_networkRouteTable.Location = '101, 20'
	$button_networkRouteTable.Name = 'button_networkRouteTable'
	$button_networkRouteTable.Size = '89, 23'
	$button_networkRouteTable.TabIndex = 2
	$button_networkRouteTable.Text = 'Route Table'
	$button_networkRouteTable.UseVisualStyleBackColor = $True
	$button_networkRouteTable.add_Click($button_networkRouteTable_Click)
	#
	# button_ConnectivityTest
	#
	$button_ConnectivityTest.Location = '196, 79'
	$button_ConnectivityTest.Name = 'button_ConnectivityTest'
	$button_ConnectivityTest.Size = '121, 23'
	$button_ConnectivityTest.TabIndex = 6
	$button_ConnectivityTest.Text = 'Connectivity Test'
	$button_ConnectivityTest.UseVisualStyleBackColor = $True
	$button_ConnectivityTest.add_Click($button_ConnectivityTest_Click)
	#
	# button_adapterinfo
	#
	$button_adapterinfo.Location = '196, 49'
	$button_adapterinfo.Name = 'button_adapterinfo'
	$button_adapterinfo.Size = '121, 23'
	$button_adapterinfo.TabIndex = 9
	$button_adapterinfo.Text = 'Network Adapter'
	$button_adapterinfo.UseVisualStyleBackColor = $True
	$button_adapterinfo.add_Click($button_adapterinfo_Click)
	#
	# buttonIPConfig
	#
	$buttonIPConfig.Location = '6, 49'
	$buttonIPConfig.Name = 'buttonIPConfig'
	$buttonIPConfig.Size = '89, 23'
	$buttonIPConfig.TabIndex = 4
	$buttonIPConfig.Text = 'IP Config'
	$buttonIPConfig.UseVisualStyleBackColor = $True
	$buttonIPConfig.add_Click($buttonIPConfig_Click)
	#
	# button_NetworkInterface
	#
	$button_NetworkInterface.Location = '196, 20'
	$button_NetworkInterface.Name = 'button_NetworkInterface'
	$button_NetworkInterface.Size = '121, 23'
	$button_NetworkInterface.TabIndex = 7
	$button_NetworkInterface.Text = 'Network Interface'
	$button_NetworkInterface.UseVisualStyleBackColor = $True
	$button_NetworkInterface.add_Click($button_NetworkInterface_Click)
	#
	# button_summary
	#
	$button_summary.Location = '102, 78'
	$button_summary.Name = 'button_summary'
	$button_summary.Size = '88, 23'
	$button_summary.TabIndex = 10
	$button_summary.Text = 'Summary'
	$button_summary.UseVisualStyleBackColor = $True
	$button_summary.add_Click($button_summary_Click)
	#
	# button_HostFile
	#
	$button_HostFile.Location = '6, 79'
	$button_HostFile.Name = 'button_HostFile'
	$button_HostFile.Size = '89, 23'
	$button_HostFile.TabIndex = 5
	$button_HostFile.Text = 'Host File'
	$button_HostFile.UseVisualStyleBackColor = $True
	$button_HostFile.add_Click($button_HostFile_Click)
	#
	# button_Nslookup
	#
	$button_Nslookup.Location = '101, 50'
	$button_Nslookup.Name = 'button_Nslookup'
	$button_Nslookup.Size = '89, 23'
	$button_Nslookup.TabIndex = 8
	$button_Nslookup.Text = 'Nslookup'
	$button_Nslookup.UseVisualStyleBackColor = $True
	$button_Nslookup.add_Click($button_Nslookup_Click)
	#
	# groupbox1
	#
	$groupbox1.Controls.Add($button_Mask)
	$groupbox1.Controls.Add($button_MaskLength)
	$groupbox1.Controls.Add($button_broadcastaddress)
	$groupbox1.Controls.Add($buttonConvertBinary)
	$groupbox1.Controls.Add($button_convertDecimal)
	$groupbox1.Location = '354, 6'
	$groupbox1.Name = 'groupbox1'
	$groupbox1.Size = '272, 119'
	$groupbox1.TabIndex = 15
	$groupbox1.TabStop = $False
	$groupbox1.Text = 'Conversion'
	#
	# button_Mask
	#
	$button_Mask.Location = '137, 20'
	$button_Mask.Name = 'button_Mask'
	$button_Mask.Size = '115, 23'
	$button_Mask.TabIndex = 16
	$button_Mask.Text = 'Mask'
	$button_Mask.UseVisualStyleBackColor = $True
	$button_Mask.add_Click($button_Mask_Click)
	#
	# button_MaskLength
	#
	$button_MaskLength.Location = '136, 49'
	$button_MaskLength.Name = 'button_MaskLength'
	$button_MaskLength.Size = '115, 23'
	$button_MaskLength.TabIndex = 15
	$button_MaskLength.Text = 'Mask Length'
	$button_MaskLength.UseVisualStyleBackColor = $True
	$button_MaskLength.add_Click($button_MaskLength_Click)
	#
	# button_broadcastaddress
	#
	$button_broadcastaddress.Location = '6, 79'
	$button_broadcastaddress.Name = 'button_broadcastaddress'
	$button_broadcastaddress.Size = '125, 23'
	$button_broadcastaddress.TabIndex = 11
	$button_broadcastaddress.Text = 'Broadcast Address'
	$button_broadcastaddress.UseVisualStyleBackColor = $True
	$button_broadcastaddress.add_Click($button_broadcastaddress_Click)
	#
	# buttonConvertBinary
	#
	$buttonConvertBinary.Location = '6, 20'
	$buttonConvertBinary.Name = 'buttonConvertBinary'
	$buttonConvertBinary.Size = '125, 23'
	$buttonConvertBinary.TabIndex = 12
	$buttonConvertBinary.Text = 'Binary IP'
	$buttonConvertBinary.UseVisualStyleBackColor = $True
	$buttonConvertBinary.add_Click($buttonConvertBinary_Click)
	#
	# button_convertDecimal
	#
	$button_convertDecimal.Location = '6, 50'
	$button_convertDecimal.Name = 'button_convertDecimal'
	$button_convertDecimal.Size = '125, 23'
	$button_convertDecimal.TabIndex = 13
	$button_convertDecimal.Text = 'Decimal IP'
	$button_convertDecimal.UseVisualStyleBackColor = $True
	$button_convertDecimal.add_Click($button_convertDecimal_Click)
	#
	# tabpage_services
	#
	$tabpage_services.Controls.Add($groupbox3)
	$tabpage_services.Controls.Add($button_msclink)
	$tabpage_services.Location = '4, 24'
	$tabpage_services.Name = 'tabpage_services'
	$tabpage_services.Padding = '3, 3, 3, 3'
	$tabpage_services.Size = '1129, 174'
	$tabpage_services.TabIndex = 2
	$tabpage_services.Text = 'Services'
	$tabpage_services.UseVisualStyleBackColor = $True
	#
	# groupbox3
	#
	$groupbox3.Controls.Add($groupbox4)
	$groupbox3.Controls.Add($button_RunningServices)
	$groupbox3.Controls.Add($button_servicesAutomatic)
	$groupbox3.Controls.Add($button_ServicesDisabled)
	$groupbox3.Controls.Add($button_ServicesManual)
	$groupbox3.Location = '192, 6'
	$groupbox3.Name = 'groupbox3'
	$groupbox3.Size = '339, 140'
	$groupbox3.TabIndex = 10
	$groupbox3.TabStop = $False
	$groupbox3.Text = 'Services'
	#
	# groupbox4
	#
	$groupbox4.Controls.Add($textbox_services)
	$groupbox4.Controls.Add($button_ServiceQuery)
	$groupbox4.Controls.Add($button_ServiceStop)
	$groupbox4.Controls.Add($button_ServiceStart)
	$groupbox4.Controls.Add($button_ServiceRestart)
	$groupbox4.Location = '130, 20'
	$groupbox4.Name = 'groupbox4'
	$groupbox4.Size = '200, 113'
	$groupbox4.TabIndex = 11
	$groupbox4.TabStop = $False
	$groupbox4.Text = 'Service Management'
	#
	# textbox_services
	#
	$textbox_services.Location = '6, 20'
	$textbox_services.Name = 'textbox_services'
	$textbox_services.ShortcutsEnabled = $False
	$textbox_services.Size = '100, 21'
	$textbox_services.TabIndex = 9
	#
	# button_ServiceQuery
	#
	$button_ServiceQuery.Location = '21, 47'
	$button_ServiceQuery.Name = 'button_ServiceQuery'
	$button_ServiceQuery.Size = '75, 23'
	$button_ServiceQuery.TabIndex = 5
	$button_ServiceQuery.Text = 'Query'
	$button_ServiceQuery.UseVisualStyleBackColor = $True
	$button_ServiceQuery.add_Click($button_ServiceQuery_Click)
	#
	# button_ServiceStop
	#
	$button_ServiceStop.Location = '21, 76'
	$button_ServiceStop.Name = 'button_ServiceStop'
	$button_ServiceStop.Size = '75, 23'
	$button_ServiceStop.TabIndex = 6
	$button_ServiceStop.Text = 'Stop'
	$button_ServiceStop.UseVisualStyleBackColor = $True
	$button_ServiceStop.add_Click($button_ServiceStop_Click)
	#
	# button_ServiceStart
	#
	$button_ServiceStart.Location = '102, 47'
	$button_ServiceStart.Name = 'button_ServiceStart'
	$button_ServiceStart.Size = '75, 23'
	$button_ServiceStart.TabIndex = 8
	$button_ServiceStart.Text = 'Start'
	$button_ServiceStart.UseVisualStyleBackColor = $True
	$button_ServiceStart.add_Click($button_ServiceStart_Click)
	#
	# button_ServiceRestart
	#
	$button_ServiceRestart.Location = '102, 76'
	$button_ServiceRestart.Name = 'button_ServiceRestart'
	$button_ServiceRestart.Size = '75, 23'
	$button_ServiceRestart.TabIndex = 7
	$button_ServiceRestart.Text = 'Restart'
	$button_ServiceRestart.UseVisualStyleBackColor = $True
	$button_ServiceRestart.add_Click($button_ServiceRestart_Click)
	#
	# button_RunningServices
	#
	$button_RunningServices.Location = '6, 20'
	$button_RunningServices.Name = 'button_RunningServices'
	$button_RunningServices.Size = '118, 23'
	$button_RunningServices.TabIndex = 0
	$button_RunningServices.Text = 'Running Services'
	$button_RunningServices.UseVisualStyleBackColor = $True
	$button_RunningServices.add_Click($button_RunningServices_Click)
	#
	# button_servicesAutomatic
	#
	$button_servicesAutomatic.Location = '6, 49'
	$button_servicesAutomatic.Name = 'button_servicesAutomatic'
	$button_servicesAutomatic.Size = '75, 23'
	$button_servicesAutomatic.TabIndex = 2
	$button_servicesAutomatic.Text = 'Automatic'
	$button_servicesAutomatic.UseVisualStyleBackColor = $True
	$button_servicesAutomatic.add_Click($button_servicesAutomatic_Click)
	#
	# button_ServicesDisabled
	#
	$button_ServicesDisabled.Location = '6, 78'
	$button_ServicesDisabled.Name = 'button_ServicesDisabled'
	$button_ServicesDisabled.Size = '75, 23'
	$button_ServicesDisabled.TabIndex = 3
	$button_ServicesDisabled.Text = 'Disabled'
	$button_ServicesDisabled.UseVisualStyleBackColor = $True
	$button_ServicesDisabled.add_Click($button_ServicesDisabled_Click)
	#
	# button_ServicesManual
	#
	$button_ServicesManual.Location = '6, 107'
	$button_ServicesManual.Name = 'button_ServicesManual'
	$button_ServicesManual.Size = '75, 23'
	$button_ServicesManual.TabIndex = 4
	$button_ServicesManual.Text = 'Manual'
	$button_ServicesManual.UseVisualStyleBackColor = $True
	$button_ServicesManual.add_Click($button_ServicesManual_Click)
	#
	# button_msclink
	#
	$button_msclink.Location = '38, 24'
	$button_msclink.Name = 'button_msclink'
	$button_msclink.Size = '118, 23'
	$button_msclink.TabIndex = 1
	$button_msclink.Text = 'Services.msc'
	$button_msclink.UseVisualStyleBackColor = $True
	$button_msclink.add_Click($button_msclink_Click)
	#
	# tabpage_processes
	#
	$tabpage_processes.Controls.Add($groupbox5)
	$tabpage_processes.Controls.Add($textbox_processName)
	$tabpage_processes.Controls.Add($button_Terminate)
	$tabpage_processes.Controls.Add($buttonTaskManager)
	$tabpage_processes.Location = '4, 24'
	$tabpage_processes.Name = 'tabpage_processes'
	$tabpage_processes.Padding = '3, 3, 3, 3'
	$tabpage_processes.Size = '1129, 174'
	$tabpage_processes.TabIndex = 3
	$tabpage_processes.Text = 'Processes'
	$tabpage_processes.UseVisualStyleBackColor = $True
	#
	# groupbox5
	#
	$groupbox5.Controls.Add($button_Over100Mb)
	$groupbox5.Controls.Add($button_Owners)
	$groupbox5.Controls.Add($button_Processes)
	$groupbox5.Controls.Add($button_RecentlyRun)
	$groupbox5.Location = '14, 7'
	$groupbox5.Name = 'groupbox5'
	$groupbox5.Size = '159, 146'
	$groupbox5.TabIndex = 7
	$groupbox5.TabStop = $False
	$groupbox5.Text = 'Process Information'
	#
	# button_Over100Mb
	#
	$button_Over100Mb.Location = '6, 20'
	$button_Over100Mb.Name = 'button_Over100Mb'
	$button_Over100Mb.Size = '98, 23'
	$button_Over100Mb.TabIndex = 0
	$button_Over100Mb.Text = 'Over 100 MB'
	$button_Over100Mb.UseVisualStyleBackColor = $True
	$button_Over100Mb.add_Click($button_Over100Mb_Click)
	#
	# button_Owners
	#
	$button_Owners.Location = '6, 50'
	$button_Owners.Name = 'button_Owners'
	$button_Owners.Size = '98, 23'
	$button_Owners.TabIndex = 1
	$button_Owners.Text = 'Owners'
	$button_Owners.UseVisualStyleBackColor = $True
	$button_Owners.add_Click($button_Owners_Click)
	#
	# button_Processes
	#
	$button_Processes.Location = '6, 80'
	$button_Processes.Name = 'button_Processes'
	$button_Processes.Size = '98, 23'
	$button_Processes.TabIndex = 2
	$button_Processes.Text = 'Processes'
	$button_Processes.UseVisualStyleBackColor = $True
	$button_Processes.add_Click($button_Processes_Click)
	#
	# button_RecentlyRun
	#
	$button_RecentlyRun.Location = '6, 110'
	$button_RecentlyRun.Name = 'button_RecentlyRun'
	$button_RecentlyRun.Size = '98, 23'
	$button_RecentlyRun.TabIndex = 3
	$button_RecentlyRun.Text = 'Recently Run'
	$button_RecentlyRun.UseVisualStyleBackColor = $True
	$button_RecentlyRun.add_Click($button_RecentlyRun_Click)
	#
	# textbox_processName
	#
	$textbox_processName.Location = '306, 18'
	$textbox_processName.Name = 'textbox_processName'
	$textbox_processName.Size = '100, 21'
	$textbox_processName.TabIndex = 6
	#
	# button_Terminate
	#
	$button_Terminate.Location = '412, 18'
	$button_Terminate.Name = 'button_Terminate'
	$button_Terminate.Size = '75, 23'
	$button_Terminate.TabIndex = 5
	$button_Terminate.Text = 'Terminate'
	$button_Terminate.UseVisualStyleBackColor = $True
	$button_Terminate.add_Click($button_Terminate_Click)
	#
	# buttonTaskManager
	#
	$buttonTaskManager.Location = '179, 16'
	$buttonTaskManager.Name = 'buttonTaskManager'
	$buttonTaskManager.Size = '96, 23'
	$buttonTaskManager.TabIndex = 4
	$buttonTaskManager.Text = 'Task Manager'
	$buttonTaskManager.UseVisualStyleBackColor = $True
	$buttonTaskManager.add_Click($buttonTaskManager_Click)
	#
	# tabpage_eventlogs
	#
	$tabpage_eventlogs.Controls.Add($groupbox_eventsgeneral)
	$tabpage_eventlogs.Controls.Add($groupbox_AppEventLogs)
	$tabpage_eventlogs.Controls.Add($groupbox_SecurityEventLogs)
	$tabpage_eventlogs.Controls.Add($button_ChangeSystemTimeLog)
	$tabpage_eventlogs.Controls.Add($groupbox_last25events)
	$tabpage_eventlogs.Location = '4, 24'
	$tabpage_eventlogs.Name = 'tabpage_eventlogs'
	$tabpage_eventlogs.Padding = '3, 3, 3, 3'
	$tabpage_eventlogs.Size = '1129, 174'
	$tabpage_eventlogs.TabIndex = 4
	$tabpage_eventlogs.Text = 'Event Logs'
	$tabpage_eventlogs.UseVisualStyleBackColor = $True
	#
	# groupbox_eventsgeneral
	#
	$groupbox_eventsgeneral.Controls.Add($button_eventviewerlink)
	$groupbox_eventsgeneral.Controls.Add($button_eventlogstats)
	$groupbox_eventsgeneral.Controls.Add($button_eventsearch)
	$groupbox_eventsgeneral.Location = '8, 8'
	$groupbox_eventsgeneral.Name = 'groupbox_eventsgeneral'
	$groupbox_eventsgeneral.Size = '136, 130'
	$groupbox_eventsgeneral.TabIndex = 5
	$groupbox_eventsgeneral.TabStop = $False
	$groupbox_eventsgeneral.Text = 'Event Log Data'
	#
	# button_eventviewerlink
	#
	$button_eventviewerlink.Location = '7, 80'
	$button_eventviewerlink.Name = 'button_eventviewerlink'
	$button_eventviewerlink.Size = '107, 23'
	$button_eventviewerlink.TabIndex = 10
	$button_eventviewerlink.Text = 'Event Viewer'
	$button_eventviewerlink.UseVisualStyleBackColor = $True
	$button_eventviewerlink.add_Click($button_eventviewerlink_Click)
	#
	# button_eventlogstats
	#
	$button_eventlogstats.Location = '6, 19'
	$button_eventlogstats.Name = 'button_eventlogstats'
	$button_eventlogstats.Size = '108, 23'
	$button_eventlogstats.TabIndex = 0
	$button_eventlogstats.Text = 'Stats'
	$button_eventlogstats.UseVisualStyleBackColor = $True
	$button_eventlogstats.add_Click($button_eventlogstats_Click)
	#
	# button_eventsearch
	#
	$button_eventsearch.Location = '6, 50'
	$button_eventsearch.Name = 'button_eventsearch'
	$button_eventsearch.Size = '108, 23'
	$button_eventsearch.TabIndex = 9
	$button_eventsearch.Text = 'Search for Term'
	$button_eventsearch.UseVisualStyleBackColor = $True
	$button_eventsearch.add_Click($button_eventsearch_Click)
	#
	# groupbox_AppEventLogs
	#
	$groupbox_AppEventLogs.Controls.Add($button_rebootLog)
	$groupbox_AppEventLogs.Controls.Add($button_AppErrorLog)
	$groupbox_AppEventLogs.Controls.Add($button_GroupChangesLog)
	$groupbox_AppEventLogs.Controls.Add($button_AppHangLog)
	$groupbox_AppEventLogs.Controls.Add($button_NewJobLog)
	$groupbox_AppEventLogs.Controls.Add($button_ProtectedModeViolateLog)
	$groupbox_AppEventLogs.Controls.Add($button_InstallServiceLog)
	$groupbox_AppEventLogs.Controls.Add($button_ServiceTermLog)
	$groupbox_AppEventLogs.Controls.Add($button_AccessAuditFileLog)
	$groupbox_AppEventLogs.Location = '589, 6'
	$groupbox_AppEventLogs.Name = 'groupbox_AppEventLogs'
	$groupbox_AppEventLogs.Size = '275, 162'
	$groupbox_AppEventLogs.TabIndex = 5
	$groupbox_AppEventLogs.TabStop = $False
	$groupbox_AppEventLogs.Text = 'Application Event ID Reference'
	#
	# button_rebootLog
	#
	$button_rebootLog.Location = '136, 107'
	$button_rebootLog.Name = 'button_rebootLog'
	$button_rebootLog.Size = '113, 23'
	$button_rebootLog.TabIndex = 46
	$button_rebootLog.Text = 'Restart History'
	$button_rebootLog.UseVisualStyleBackColor = $True
	$button_rebootLog.add_Click($button_rebootLog_Click)
	#
	# button_AppErrorLog
	#
	$button_AppErrorLog.Location = '6, 19'
	$button_AppErrorLog.Name = 'button_AppErrorLog'
	$button_AppErrorLog.Size = '124, 23'
	$button_AppErrorLog.TabIndex = 40
	$button_AppErrorLog.Text = 'App Error'
	$button_AppErrorLog.UseVisualStyleBackColor = $True
	$button_AppErrorLog.add_Click($button_AppErrorLog_Click)
	#
	# button_GroupChangesLog
	#
	$button_GroupChangesLog.Location = '136, 78'
	$button_GroupChangesLog.Name = 'button_GroupChangesLog'
	$button_GroupChangesLog.Size = '114, 23'
	$button_GroupChangesLog.TabIndex = 32
	$button_GroupChangesLog.Text = 'Group Changes'
	$button_GroupChangesLog.UseVisualStyleBackColor = $True
	$button_GroupChangesLog.add_Click($button_GroupChangesLog_Click)
	#
	# button_AppHangLog
	#
	$button_AppHangLog.Location = '6, 48'
	$button_AppHangLog.Name = 'button_AppHangLog'
	$button_AppHangLog.Size = '124, 23'
	$button_AppHangLog.TabIndex = 41
	$button_AppHangLog.Text = 'App Hang'
	$button_AppHangLog.UseVisualStyleBackColor = $True
	$button_AppHangLog.add_Click($button_AppHangLog_Click)
	#
	# button_NewJobLog
	#
	$button_NewJobLog.Location = '136, 49'
	$button_NewJobLog.Name = 'button_NewJobLog'
	$button_NewJobLog.Size = '114, 23'
	$button_NewJobLog.TabIndex = 35
	$button_NewJobLog.Text = 'New Jobs'
	$button_NewJobLog.UseVisualStyleBackColor = $True
	$button_NewJobLog.add_Click($button_NewJobLog_Click)
	#
	# button_ProtectedModeViolateLog
	#
	$button_ProtectedModeViolateLog.Location = '5, 78'
	$button_ProtectedModeViolateLog.Name = 'button_ProtectedModeViolateLog'
	$button_ProtectedModeViolateLog.Size = '125, 23'
	$button_ProtectedModeViolateLog.TabIndex = 42
	$button_ProtectedModeViolateLog.Text = 'Protected Mode'
	$button_ProtectedModeViolateLog.UseVisualStyleBackColor = $True
	$button_ProtectedModeViolateLog.add_Click($button_ProtectedModeViolateLog_Click)
	#
	# button_InstallServiceLog
	#
	$button_InstallServiceLog.Location = '136, 20'
	$button_InstallServiceLog.Name = 'button_InstallServiceLog'
	$button_InstallServiceLog.Size = '113, 23'
	$button_InstallServiceLog.TabIndex = 45
	$button_InstallServiceLog.Text = 'Install Services'
	$button_InstallServiceLog.UseVisualStyleBackColor = $True
	$button_InstallServiceLog.add_Click($button_InstallServiceLog_Click)
	#
	# button_ServiceTermLog
	#
	$button_ServiceTermLog.Location = '6, 107'
	$button_ServiceTermLog.Name = 'button_ServiceTermLog'
	$button_ServiceTermLog.Size = '125, 23'
	$button_ServiceTermLog.TabIndex = 43
	$button_ServiceTermLog.Text = 'Service Terminated'
	$button_ServiceTermLog.UseVisualStyleBackColor = $True
	$button_ServiceTermLog.add_Click($button_ServiceTermLog_Click)
	#
	# button_AccessAuditFileLog
	#
	$button_AccessAuditFileLog.Location = '6, 135'
	$button_AccessAuditFileLog.Name = 'button_AccessAuditFileLog'
	$button_AccessAuditFileLog.Size = '125, 23'
	$button_AccessAuditFileLog.TabIndex = 44
	$button_AccessAuditFileLog.Text = 'Audit File Access'
	$button_AccessAuditFileLog.UseVisualStyleBackColor = $True
	$button_AccessAuditFileLog.add_Click($button_AccessAuditFileLog_Click)
	#
	# groupbox_SecurityEventLogs
	#
	$groupbox_SecurityEventLogs.Controls.Add($button_accountlogonfailslog)
	$groupbox_SecurityEventLogs.Controls.Add($button_adminlogonLog)
	$groupbox_SecurityEventLogs.Controls.Add($button_AccountChangesLog)
	$groupbox_SecurityEventLogs.Controls.Add($button_PasswordChangesLog)
	$groupbox_SecurityEventLogs.Controls.Add($button_PriviligeAssignedLog)
	$groupbox_SecurityEventLogs.Controls.Add($button_ClearSecurityLog)
	$groupbox_SecurityEventLogs.Controls.Add($button_SoftwareRestLog)
	$groupbox_SecurityEventLogs.Controls.Add($button_AuditPolicyChangedLog)
	$groupbox_SecurityEventLogs.Controls.Add($button_HardLinkAuditLog)
	$groupbox_SecurityEventLogs.Controls.Add($button_SysAccessGrantedLog)
	$groupbox_SecurityEventLogs.Controls.Add($button_WinDefenderFindLog)
	$groupbox_SecurityEventLogs.Controls.Add($button_DomainPolicyChangeLog)
	$groupbox_SecurityEventLogs.Controls.Add($button_AccessRefusedLog)
	$groupbox_SecurityEventLogs.Controls.Add($button_AdminLockoutLog)
	$groupbox_SecurityEventLogs.Controls.Add($button_AccountLogonsLog)
	$groupbox_SecurityEventLogs.Location = '183, 6'
	$groupbox_SecurityEventLogs.Name = 'groupbox_SecurityEventLogs'
	$groupbox_SecurityEventLogs.Size = '387, 162'
	$groupbox_SecurityEventLogs.TabIndex = 5
	$groupbox_SecurityEventLogs.TabStop = $False
	$groupbox_SecurityEventLogs.Text = 'Security Event ID Reference'
	#
	# button_accountlogonfailslog
	#
	$button_accountlogonfailslog.Location = '246, 19'
	$button_accountlogonfailslog.Name = 'button_accountlogonfailslog'
	$button_accountlogonfailslog.Size = '124, 23'
	$button_accountlogonfailslog.TabIndex = 46
	$button_accountlogonfailslog.Text = 'Logon - Fails'
	$button_accountlogonfailslog.UseVisualStyleBackColor = $True
	$button_accountlogonfailslog.add_Click($button_accountlogonfailslog_Click)
	#
	# button_adminlogonLog
	#
	$button_adminlogonLog.Location = '126, 106'
	$button_adminlogonLog.Name = 'button_adminlogonLog'
	$button_adminlogonLog.Size = '114, 23'
	$button_adminlogonLog.TabIndex = 47
	$button_adminlogonLog.Text = 'Admin Logon'
	$button_adminlogonLog.UseVisualStyleBackColor = $True
	$button_adminlogonLog.add_Click($button_adminlogonLog_Click)
	#
	# button_AccountChangesLog
	#
	$button_AccountChangesLog.Location = '6, 19'
	$button_AccountChangesLog.Name = 'button_AccountChangesLog'
	$button_AccountChangesLog.Size = '114, 23'
	$button_AccountChangesLog.TabIndex = 7
	$button_AccountChangesLog.Text = 'Account Changes'
	$button_AccountChangesLog.UseVisualStyleBackColor = $True
	$button_AccountChangesLog.add_Click($button_AccountChangesLog_Click)
	#
	# button_PasswordChangesLog
	#
	$button_PasswordChangesLog.Location = '6, 48'
	$button_PasswordChangesLog.Name = 'button_PasswordChangesLog'
	$button_PasswordChangesLog.Size = '114, 23'
	$button_PasswordChangesLog.TabIndex = 8
	$button_PasswordChangesLog.Text = 'Password Logs'
	$button_PasswordChangesLog.UseVisualStyleBackColor = $True
	$button_PasswordChangesLog.add_Click($button_PasswordChangesLog_Click)
	#
	# button_PriviligeAssignedLog
	#
	$button_PriviligeAssignedLog.Location = '6, 77'
	$button_PriviligeAssignedLog.Name = 'button_PriviligeAssignedLog'
	$button_PriviligeAssignedLog.Size = '115, 23'
	$button_PriviligeAssignedLog.TabIndex = 33
	$button_PriviligeAssignedLog.Text = 'Privilege Assigned'
	$button_PriviligeAssignedLog.UseVisualStyleBackColor = $True
	$button_PriviligeAssignedLog.add_Click($button_PriviligeAssignedLog_Click)
	#
	# button_ClearSecurityLog
	#
	$button_ClearSecurityLog.Location = '6, 106'
	$button_ClearSecurityLog.Name = 'button_ClearSecurityLog'
	$button_ClearSecurityLog.Size = '114, 23'
	$button_ClearSecurityLog.TabIndex = 27
	$button_ClearSecurityLog.Text = 'Security Log'
	$button_ClearSecurityLog.UseVisualStyleBackColor = $True
	$button_ClearSecurityLog.add_Click($button_ClearSecurityLog_Click)
	#
	# button_SoftwareRestLog
	#
	$button_SoftwareRestLog.Location = '246, 135'
	$button_SoftwareRestLog.Name = 'button_SoftwareRestLog'
	$button_SoftwareRestLog.Size = '124, 23'
	$button_SoftwareRestLog.TabIndex = 39
	$button_SoftwareRestLog.Text = 'Software Restriction'
	$button_SoftwareRestLog.UseVisualStyleBackColor = $True
	$button_SoftwareRestLog.add_Click($button_SoftwareRestLog_Click)
	#
	# button_AuditPolicyChangedLog
	#
	$button_AuditPolicyChangedLog.Location = '6, 135'
	$button_AuditPolicyChangedLog.Name = 'button_AuditPolicyChangedLog'
	$button_AuditPolicyChangedLog.Size = '114, 23'
	$button_AuditPolicyChangedLog.TabIndex = 31
	$button_AuditPolicyChangedLog.Text = 'Audit Policy'
	$button_AuditPolicyChangedLog.UseVisualStyleBackColor = $True
	$button_AuditPolicyChangedLog.add_Click($button_AuditPolicyChangedLog_Click)
	#
	# button_HardLinkAuditLog
	#
	$button_HardLinkAuditLog.Location = '246, 106'
	$button_HardLinkAuditLog.Name = 'button_HardLinkAuditLog'
	$button_HardLinkAuditLog.Size = '124, 23'
	$button_HardLinkAuditLog.TabIndex = 38
	$button_HardLinkAuditLog.Text = 'Hard Links (Audit)'
	$button_HardLinkAuditLog.UseVisualStyleBackColor = $True
	$button_HardLinkAuditLog.add_Click($button_HardLinkAuditLog_Click)
	#
	# button_SysAccessGrantedLog
	#
	$button_SysAccessGrantedLog.Location = '126, 19'
	$button_SysAccessGrantedLog.Name = 'button_SysAccessGrantedLog'
	$button_SysAccessGrantedLog.Size = '114, 23'
	$button_SysAccessGrantedLog.TabIndex = 30
	$button_SysAccessGrantedLog.Text = 'System Access'
	$button_SysAccessGrantedLog.UseVisualStyleBackColor = $True
	$button_SysAccessGrantedLog.add_Click($button_SysAccessGrantedLog_Click)
	#
	# button_WinDefenderFindLog
	#
	$button_WinDefenderFindLog.Location = '246, 76'
	$button_WinDefenderFindLog.Name = 'button_WinDefenderFindLog'
	$button_WinDefenderFindLog.Size = '124, 23'
	$button_WinDefenderFindLog.TabIndex = 37
	$button_WinDefenderFindLog.Text = 'Win Defender '
	$button_WinDefenderFindLog.UseVisualStyleBackColor = $True
	$button_WinDefenderFindLog.add_Click($button_WinDefenderFindLog_Click)
	#
	# button_DomainPolicyChangeLog
	#
	$button_DomainPolicyChangeLog.Location = '126, 48'
	$button_DomainPolicyChangeLog.Name = 'button_DomainPolicyChangeLog'
	$button_DomainPolicyChangeLog.Size = '114, 23'
	$button_DomainPolicyChangeLog.TabIndex = 29
	$button_DomainPolicyChangeLog.Text = 'Domain Policy'
	$button_DomainPolicyChangeLog.UseVisualStyleBackColor = $True
	$button_DomainPolicyChangeLog.add_Click($button_DomainPolicyChangeLog_Click)
	#
	# button_AccessRefusedLog
	#
	$button_AccessRefusedLog.Location = '246, 47'
	$button_AccessRefusedLog.Name = 'button_AccessRefusedLog'
	$button_AccessRefusedLog.Size = '124, 23'
	$button_AccessRefusedLog.TabIndex = 36
	$button_AccessRefusedLog.Text = 'Access Refused'
	$button_AccessRefusedLog.UseVisualStyleBackColor = $True
	$button_AccessRefusedLog.add_Click($button_AccessRefusedLog_Click)
	#
	# button_AdminLockoutLog
	#
	$button_AdminLockoutLog.Location = '126, 78'
	$button_AdminLockoutLog.Name = 'button_AdminLockoutLog'
	$button_AdminLockoutLog.Size = '114, 23'
	$button_AdminLockoutLog.TabIndex = 28
	$button_AdminLockoutLog.Text = 'Admin Lockout'
	$button_AdminLockoutLog.UseVisualStyleBackColor = $True
	$button_AdminLockoutLog.add_Click($button_AdminLockoutLog_Click)
	#
	# button_AccountLogonsLog
	#
	$button_AccountLogonsLog.Location = '126, 134'
	$button_AccountLogonsLog.Name = 'button_AccountLogonsLog'
	$button_AccountLogonsLog.Size = '114, 23'
	$button_AccountLogonsLog.TabIndex = 34
	$button_AccountLogonsLog.Text = 'Logon - Success'
	$button_AccountLogonsLog.UseVisualStyleBackColor = $True
	$button_AccountLogonsLog.add_Click($button_AccountLogonsLog_Click)
	#
	# button_ChangeSystemTimeLog
	#
	$button_ChangeSystemTimeLog.Location = '589, 182'
	$button_ChangeSystemTimeLog.Name = 'button_ChangeSystemTimeLog'
	$button_ChangeSystemTimeLog.Size = '114, 23'
	$button_ChangeSystemTimeLog.TabIndex = 26
	$button_ChangeSystemTimeLog.Text = 'System Time'
	$button_ChangeSystemTimeLog.UseVisualStyleBackColor = $True
	$button_ChangeSystemTimeLog.add_Click($button_ChangeSystemTimeLog_Click)
	#
	# groupbox_last25events
	#
	$groupbox_last25events.Controls.Add($button_ManualSearch)
	$groupbox_last25events.Controls.Add($button_last20security)
	$groupbox_last25events.Controls.Add($button_last20application)
	$groupbox_last25events.Controls.Add($button_last20hardware)
	$groupbox_last25events.Controls.Add($button_last20oalerts)
	$groupbox_last25events.Controls.Add($button_last20powershell)
	$groupbox_last25events.Controls.Add($button_last20system)
	$groupbox_last25events.Location = '892, 8'
	$groupbox_last25events.Name = 'groupbox_last25events'
	$groupbox_last25events.Size = '198, 143'
	$groupbox_last25events.TabIndex = 25
	$groupbox_last25events.TabStop = $False
	$groupbox_last25events.Text = 'Last 25 Events Quick Reference '
	#
	# button_ManualSearch
	#
	$button_ManualSearch.Location = '29, 109'
	$button_ManualSearch.Name = 'button_ManualSearch'
	$button_ManualSearch.Size = '129, 23'
	$button_ManualSearch.TabIndex = 7
	$button_ManualSearch.Text = 'Manual Search'
	$button_ManualSearch.UseVisualStyleBackColor = $True
	$button_ManualSearch.add_Click($button_ManualSearch_Click)
	#
	# button_last20security
	#
	$button_last20security.Location = '100, 79'
	$button_last20security.Name = 'button_last20security'
	$button_last20security.Size = '85, 23'
	$button_last20security.TabIndex = 6
	$button_last20security.Text = 'Security'
	$button_last20security.UseVisualStyleBackColor = $True
	$button_last20security.add_Click($button_last20security_Click)
	#
	# button_last20application
	#
	$button_last20application.Location = '6, 20'
	$button_last20application.Name = 'button_last20application'
	$button_last20application.Size = '86, 23'
	$button_last20application.TabIndex = 2
	$button_last20application.Text = 'Application'
	$button_last20application.UseVisualStyleBackColor = $True
	$button_last20application.add_Click($button_last20application_Click)
	#
	# button_last20hardware
	#
	$button_last20hardware.Location = '6, 49'
	$button_last20hardware.Name = 'button_last20hardware'
	$button_last20hardware.Size = '86, 23'
	$button_last20hardware.TabIndex = 3
	$button_last20hardware.Text = 'Hardware'
	$button_last20hardware.UseVisualStyleBackColor = $True
	$button_last20hardware.add_Click($button_last20hardware_Click)
	#
	# button_last20oalerts
	#
	$button_last20oalerts.Location = '6, 78'
	$button_last20oalerts.Name = 'button_last20oalerts'
	$button_last20oalerts.Size = '87, 23'
	$button_last20oalerts.TabIndex = 4
	$button_last20oalerts.Text = 'OAlerts'
	$button_last20oalerts.UseVisualStyleBackColor = $True
	$button_last20oalerts.add_Click($button_last20oalerts_Click)
	#
	# button_last20powershell
	#
	$button_last20powershell.Location = '98, 20'
	$button_last20powershell.Name = 'button_last20powershell'
	$button_last20powershell.Size = '87, 23'
	$button_last20powershell.TabIndex = 5
	$button_last20powershell.Text = 'PowerShell'
	$button_last20powershell.UseVisualStyleBackColor = $True
	$button_last20powershell.add_Click($button_last20powershell_Click)
	#
	# button_last20system
	#
	$button_last20system.Location = '99, 49'
	$button_last20system.Name = 'button_last20system'
	$button_last20system.Size = '86, 23'
	$button_last20system.TabIndex = 1
	$button_last20system.Text = 'System'
	$button_last20system.UseVisualStyleBackColor = $True
	$button_last20system.add_Click($button_last20system_Click)
	#
	# menustrip1
	#
	[void]$menustrip1.Items.Add($fileToolStripMenuItem)
	[void]$menustrip1.Items.Add($appsToolStripMenuItem)
	[void]$menustrip1.Items.Add($toolsToolStripMenuItem)
	$menustrip1.Location = '0, 0'
	$menustrip1.Name = 'menustrip1'
	$menustrip1.Size = '1148, 24'
	$menustrip1.TabIndex = 5
	$menustrip1.Text = 'menustrip1'
	#
	# tooltip_properties
	#
	#
	# tooltip1
	#
	#
	# fileToolStripMenuItem
	#
	[void]$fileToolStripMenuItem.DropDownItems.Add($export_TextTo44NotepadToolStripMenuItem)
	[void]$fileToolStripMenuItem.DropDownItems.Add($export_TextToWordpadToolStripMenuItem)
	[void]$fileToolStripMenuItem.DropDownItems.Add($exitToolStripMenuItem)
	$fileToolStripMenuItem.Name = 'fileToolStripMenuItem'
	$fileToolStripMenuItem.Size = '37, 20'
	$fileToolStripMenuItem.Text = 'File'
	#
	# appsToolStripMenuItem
	#
	[void]$appsToolStripMenuItem.DropDownItems.Add($addRemoveProgramsToolStripMenuItem)
	[void]$appsToolStripMenuItem.DropDownItems.Add($localUsersAndGroupsToolStripMenuItem)
	[void]$appsToolStripMenuItem.DropDownItems.Add($performanceMonitorToolStripMenuItem)
	[void]$appsToolStripMenuItem.DropDownItems.Add($diskManagementToolStripMenuItem)
	[void]$appsToolStripMenuItem.DropDownItems.Add($networkConnectionsToolStripMenuItem)
	[void]$appsToolStripMenuItem.DropDownItems.Add($certificateManagerToolStripMenuItem)
	[void]$appsToolStripMenuItem.DropDownItems.Add($administrativeToolsToolStripMenuItem)
	[void]$appsToolStripMenuItem.DropDownItems.Add($scheduledTasksToolStripMenuItem)
	[void]$appsToolStripMenuItem.DropDownItems.Add($groupPolicyEditorToolStripMenuItem)
	[void]$appsToolStripMenuItem.DropDownItems.Add($localSecuritySettingsToolStripMenuItem)
	[void]$appsToolStripMenuItem.DropDownItems.Add($sharedFoldersToolStripMenuItem)
	$appsToolStripMenuItem.Name = 'appsToolStripMenuItem'
	$appsToolStripMenuItem.Size = '46, 20'
	$appsToolStripMenuItem.Text = 'Apps'
	#
	# toolsToolStripMenuItem
	#
	[void]$toolsToolStripMenuItem.DropDownItems.Add($comToolStripMenuItem)
	[void]$toolsToolStripMenuItem.DropDownItems.Add($diskCleanupToolStripMenuItem)
	[void]$toolsToolStripMenuItem.DropDownItems.Add($eventViewerToolStripMenuItem)
	[void]$toolsToolStripMenuItem.DropDownItems.Add($iSCSIInitiatorToolStripMenuItem)
	[void]$toolsToolStripMenuItem.DropDownItems.Add($dataSourcesToolStripMenuItem)
	[void]$toolsToolStripMenuItem.DropDownItems.Add($printManagementToolStripMenuItem)
	[void]$toolsToolStripMenuItem.DropDownItems.Add($servicesToolStripMenuItem)
	[void]$toolsToolStripMenuItem.DropDownItems.Add($systemConfigurationToolStripMenuItem)
	[void]$toolsToolStripMenuItem.DropDownItems.Add($systemInformationToolStripMenuItem)
	[void]$toolsToolStripMenuItem.DropDownItems.Add($windowsFirewallToolStripMenuItem)
	[void]$toolsToolStripMenuItem.DropDownItems.Add($windowsMemoryDianosticToolStripMenuItem)
	$toolsToolStripMenuItem.Name = 'toolsToolStripMenuItem'
	$toolsToolStripMenuItem.Size = '47, 20'
	$toolsToolStripMenuItem.Text = 'Tools'
	#
	# export_TextTo44NotepadToolStripMenuItem
	#
	[void]$export_TextTo44NotepadToolStripMenuItem.DropDownItems.Add($export_wordpadToolStripMenuItem)
	[void]$export_TextTo44NotepadToolStripMenuItem.DropDownItems.Add($notepadToolStripMenuItem)
	$export_TextTo44NotepadToolStripMenuItem.Name = 'export_TextTo44NotepadToolStripMenuItem'
	$export_TextTo44NotepadToolStripMenuItem.Size = '152, 22'
	$export_TextTo44NotepadToolStripMenuItem.Text = 'Export Results'
	#
	# export_TextToWordpadToolStripMenuItem
	#
	[void]$export_TextToWordpadToolStripMenuItem.DropDownItems.Add($export_wordpadLogsToWordpadToolStripMenuItem)
	[void]$export_TextToWordpadToolStripMenuItem.DropDownItems.Add($export_LogsToNotepadToolStripMenuItemToolStripMenuItem)
	$export_TextToWordpadToolStripMenuItem.Name = 'export_TextToWordpadToolStripMenuItem'
	$export_TextToWordpadToolStripMenuItem.Size = '152, 22'
	$export_TextToWordpadToolStripMenuItem.Text = 'Export Log'
	#
	# exitToolStripMenuItem
	#
	$exitToolStripMenuItem.Name = 'exitToolStripMenuItem'
	$exitToolStripMenuItem.Size = '152, 22'
	$exitToolStripMenuItem.Text = 'Exit'
	$exitToolStripMenuItem.add_Click($exitToolStripMenuItem_Click)
	#
	# export_wordpadToolStripMenuItem
	#
	$export_wordpadToolStripMenuItem.Name = 'export_wordpadToolStripMenuItem'
	$export_wordpadToolStripMenuItem.Size = '152, 22'
	$export_wordpadToolStripMenuItem.Text = 'Wordpad'
	$export_wordpadToolStripMenuItem.add_Click($export_wordpadToolStripMenuItem_Click)
	#
	# export_wordpadLogsToWordpadToolStripMenuItem
	#
	$export_wordpadLogsToWordpadToolStripMenuItem.Name = 'export_wordpadLogsToWordpadToolStripMenuItem'
	$export_wordpadLogsToWordpadToolStripMenuItem.Size = '152, 22'
	$export_wordpadLogsToWordpadToolStripMenuItem.Text = 'Wordpad'
	$export_wordpadLogsToWordpadToolStripMenuItem.add_Click($wordpadToolStripMenuItem1_Click)
	#
	# export_LogsToNotepadToolStripMenuItemToolStripMenuItem
	#
	$export_LogsToNotepadToolStripMenuItemToolStripMenuItem.Name = 'export_LogsToNotepadToolStripMenuItemToolStripMenuItem'
	$export_LogsToNotepadToolStripMenuItemToolStripMenuItem.Size = '152, 22'
	$export_LogsToNotepadToolStripMenuItemToolStripMenuItem.Text = 'Notepad'
	$export_LogsToNotepadToolStripMenuItemToolStripMenuItem.add_Click($notpadToolStripMenuItem_Click)
	#
	# notepadToolStripMenuItem
	#
	$notepadToolStripMenuItem.Name = 'notepadToolStripMenuItem'
	$notepadToolStripMenuItem.Size = '152, 22'
	$notepadToolStripMenuItem.Text = 'Notepad'
	$notepadToolStripMenuItem.add_Click($notepadToolStripMenuItem_Click)
	#
	# scheduledTasksToolStripMenuItem
	#
	$scheduledTasksToolStripMenuItem.Name = 'scheduledTasksToolStripMenuItem'
	$scheduledTasksToolStripMenuItem.Size = '204, 22'
	$scheduledTasksToolStripMenuItem.Text = 'Scheduled Tasks'
	$scheduledTasksToolStripMenuItem.add_Click($scheduledTasksToolStripMenuItem_Click)
	#
	# addRemoveProgramsToolStripMenuItem
	#
	$addRemoveProgramsToolStripMenuItem.Name = 'addRemoveProgramsToolStripMenuItem'
	$addRemoveProgramsToolStripMenuItem.Size = '204, 22'
	$addRemoveProgramsToolStripMenuItem.Text = 'Add / Remove Programs'
	$addRemoveProgramsToolStripMenuItem.add_Click($addRemoveProgramsToolStripMenuItem_Click)
	#
	# administrativeToolsToolStripMenuItem
	#
	$administrativeToolsToolStripMenuItem.Name = 'administrativeToolsToolStripMenuItem'
	$administrativeToolsToolStripMenuItem.Size = '204, 22'
	$administrativeToolsToolStripMenuItem.Text = 'Administrative Tools'
	$administrativeToolsToolStripMenuItem.add_Click($administrativeToolsToolStripMenuItem_Click)
	#
	# certificateManagerToolStripMenuItem
	#
	$certificateManagerToolStripMenuItem.Name = 'certificateManagerToolStripMenuItem'
	$certificateManagerToolStripMenuItem.Size = '204, 22'
	$certificateManagerToolStripMenuItem.Text = 'Certificate Manager'
	$certificateManagerToolStripMenuItem.add_Click($certificateManagerToolStripMenuItem_Click)
	#
	# diskManagementToolStripMenuItem
	#
	$diskManagementToolStripMenuItem.Name = 'diskManagementToolStripMenuItem'
	$diskManagementToolStripMenuItem.Size = '204, 22'
	$diskManagementToolStripMenuItem.Text = 'Disk Management'
	$diskManagementToolStripMenuItem.add_Click($diskManagementToolStripMenuItem_Click)
	#
	# groupPolicyEditorToolStripMenuItem
	#
	$groupPolicyEditorToolStripMenuItem.Name = 'groupPolicyEditorToolStripMenuItem'
	$groupPolicyEditorToolStripMenuItem.Size = '204, 22'
	$groupPolicyEditorToolStripMenuItem.Text = 'Group Policy Editor'
	$groupPolicyEditorToolStripMenuItem.add_Click($groupPolicyEditorToolStripMenuItem_Click)
	#
	# localSecuritySettingsToolStripMenuItem
	#
	$localSecuritySettingsToolStripMenuItem.Name = 'localSecuritySettingsToolStripMenuItem'
	$localSecuritySettingsToolStripMenuItem.Size = '204, 22'
	$localSecuritySettingsToolStripMenuItem.Text = 'Local Security Settings'
	$localSecuritySettingsToolStripMenuItem.add_Click($localSecuritySettingsToolStripMenuItem_Click)
	#
	# localUsersAndGroupsToolStripMenuItem
	#
	$localUsersAndGroupsToolStripMenuItem.Name = 'localUsersAndGroupsToolStripMenuItem'
	$localUsersAndGroupsToolStripMenuItem.Size = '204, 22'
	$localUsersAndGroupsToolStripMenuItem.Text = 'Local Users and Groups'
	$localUsersAndGroupsToolStripMenuItem.add_Click($localUsersAndGroupsToolStripMenuItem_Click)
	#
	# networkConnectionsToolStripMenuItem
	#
	$networkConnectionsToolStripMenuItem.Name = 'networkConnectionsToolStripMenuItem'
	$networkConnectionsToolStripMenuItem.Size = '204, 22'
	$networkConnectionsToolStripMenuItem.Text = 'Network Connections'
	$networkConnectionsToolStripMenuItem.add_Click($networkConnectionsToolStripMenuItem_Click)
	#
	# performanceMonitorToolStripMenuItem
	#
	$performanceMonitorToolStripMenuItem.Name = 'performanceMonitorToolStripMenuItem'
	$performanceMonitorToolStripMenuItem.Size = '204, 22'
	$performanceMonitorToolStripMenuItem.Text = 'Performance Monitor'
	$performanceMonitorToolStripMenuItem.add_Click($performanceMonitorToolStripMenuItem_Click)
	#
	# sharedFoldersToolStripMenuItem
	#
	$sharedFoldersToolStripMenuItem.Name = 'sharedFoldersToolStripMenuItem'
	$sharedFoldersToolStripMenuItem.Size = '204, 22'
	$sharedFoldersToolStripMenuItem.Text = 'Shared Folders'
	$sharedFoldersToolStripMenuItem.add_Click($sharedFoldersToolStripMenuItem_Click)
	#
	# comToolStripMenuItem
	#
	$comToolStripMenuItem.Name = 'comToolStripMenuItem'
	$comToolStripMenuItem.Size = '202, 22'
	$comToolStripMenuItem.Text = 'Computer Management'
	$comToolStripMenuItem.add_Click($comToolStripMenuItem_Click)
	#
	# diskCleanupToolStripMenuItem
	#
	$diskCleanupToolStripMenuItem.Name = 'diskCleanupToolStripMenuItem'
	$diskCleanupToolStripMenuItem.Size = '202, 22'
	$diskCleanupToolStripMenuItem.Text = 'Disk Cleanup'
	$diskCleanupToolStripMenuItem.add_Click($diskCleanupToolStripMenuItem_Click)
	#
	# eventViewerToolStripMenuItem
	#
	$eventViewerToolStripMenuItem.Name = 'eventViewerToolStripMenuItem'
	$eventViewerToolStripMenuItem.Size = '202, 22'
	$eventViewerToolStripMenuItem.Text = 'Event Viewer'
	$eventViewerToolStripMenuItem.add_Click($eventViewerToolStripMenuItem_Click)
	#
	# iSCSIInitiatorToolStripMenuItem
	#
	$iSCSIInitiatorToolStripMenuItem.Name = 'iSCSIInitiatorToolStripMenuItem'
	$iSCSIInitiatorToolStripMenuItem.Size = '202, 22'
	$iSCSIInitiatorToolStripMenuItem.Text = 'iSCSI Initiator'
	$iSCSIInitiatorToolStripMenuItem.add_Click($iSCSIInitiatorToolStripMenuItem_Click)
	#
	# dataSourcesToolStripMenuItem
	#
	[void]$dataSourcesToolStripMenuItem.DropDownItems.Add($oDBC32BitToolStripMenuItem)
	[void]$dataSourcesToolStripMenuItem.DropDownItems.Add($oDBC64BitToolStripMenuItem)
	$dataSourcesToolStripMenuItem.Name = 'dataSourcesToolStripMenuItem'
	$dataSourcesToolStripMenuItem.Size = '202, 22'
	$dataSourcesToolStripMenuItem.Text = 'Data Sources'
	#
	# oDBC32BitToolStripMenuItem
	#
	$oDBC32BitToolStripMenuItem.Name = 'oDBC32BitToolStripMenuItem'
	$oDBC32BitToolStripMenuItem.Size = '148, 22'
	$oDBC32BitToolStripMenuItem.Text = 'ODBC (32-Bit)'
	$oDBC32BitToolStripMenuItem.add_Click($oDBC32BitToolStripMenuItem_Click)
	#
	# oDBC64BitToolStripMenuItem
	#
	$oDBC64BitToolStripMenuItem.Name = 'oDBC64BitToolStripMenuItem'
	$oDBC64BitToolStripMenuItem.Size = '152, 22'
	$oDBC64BitToolStripMenuItem.Text = 'ODBC (64-Bit'
	$oDBC64BitToolStripMenuItem.add_Click($oDBC64BitToolStripMenuItem_Click)
	#
	# printManagementToolStripMenuItem
	#
	$printManagementToolStripMenuItem.Name = 'printManagementToolStripMenuItem'
	$printManagementToolStripMenuItem.Size = '202, 22'
	$printManagementToolStripMenuItem.Text = 'Print Management'
	$printManagementToolStripMenuItem.add_Click($printManagementToolStripMenuItem_Click)
	#
	# servicesToolStripMenuItem
	#
	$servicesToolStripMenuItem.Name = 'servicesToolStripMenuItem'
	$servicesToolStripMenuItem.Size = '202, 22'
	$servicesToolStripMenuItem.Text = 'Services'
	$servicesToolStripMenuItem.add_Click($servicesToolStripMenuItem_Click)
	#
	# systemConfigurationToolStripMenuItem
	#
	$systemConfigurationToolStripMenuItem.Name = 'systemConfigurationToolStripMenuItem'
	$systemConfigurationToolStripMenuItem.Size = '202, 22'
	$systemConfigurationToolStripMenuItem.Text = 'System Configuration'
	$systemConfigurationToolStripMenuItem.add_Click($systemConfigurationToolStripMenuItem_Click)
	#
	# systemInformationToolStripMenuItem
	#
	$systemInformationToolStripMenuItem.Name = 'systemInformationToolStripMenuItem'
	$systemInformationToolStripMenuItem.Size = '202, 22'
	$systemInformationToolStripMenuItem.Text = 'System Information'
	$systemInformationToolStripMenuItem.add_Click($systemInformationToolStripMenuItem_Click)
	#
	# windowsFirewallToolStripMenuItem
	#
	$windowsFirewallToolStripMenuItem.Name = 'windowsFirewallToolStripMenuItem'
	$windowsFirewallToolStripMenuItem.Size = '202, 22'
	$windowsFirewallToolStripMenuItem.Text = 'Windows Firewall'
	$windowsFirewallToolStripMenuItem.add_Click($windowsFirewallToolStripMenuItem_Click)
	#
	# windowsMemoryDianosticToolStripMenuItem
	#
	$windowsMemoryDianosticToolStripMenuItem.Name = 'windowsMemoryDianosticToolStripMenuItem'
	$windowsMemoryDianosticToolStripMenuItem.Size = '223, 22'
	$windowsMemoryDianosticToolStripMenuItem.Text = 'Windows Memory Dianostic'
	$windowsMemoryDianosticToolStripMenuItem.add_Click($windowsMemoryDianosticToolStripMenuItem_Click)
	$menustrip1.ResumeLayout()
	$groupbox_last25events.ResumeLayout()
	$groupbox_SecurityEventLogs.ResumeLayout()
	$groupbox_AppEventLogs.ResumeLayout()
	$groupbox_eventsgeneral.ResumeLayout()
	$tabpage_eventlogs.ResumeLayout()
	$groupbox5.ResumeLayout()
	$tabpage_processes.ResumeLayout()
	$groupbox4.ResumeLayout()
	$groupbox3.ResumeLayout()
	$tabpage_services.ResumeLayout()
	$groupbox1.ResumeLayout()
	$groupbox2.ResumeLayout()
	$tabpage_networking.ResumeLayout()
	$groupbox6.ResumeLayout()
	$groupbox7.ResumeLayout()
	$groupbox8.ResumeLayout()
	$tabpage_general.ResumeLayout()
	$tabpage_computer.ResumeLayout()
	$tabcontrol1.ResumeLayout()
	$form_MainForm.ResumeLayout()
	#endregion Generated Form Code

	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $form_MainForm.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$form_MainForm.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$form_MainForm.add_FormClosed($Form_Cleanup_FormClosed)
	#Store the control values when form is closing
	$form_MainForm.add_Closing($Form_StoreValues_Closing)
	#Show the Form
	return $form_MainForm.ShowDialog()

}
#endregion Source: MainForm.psf

#region Source: Globals.ps1
	#--------------------------------------------
	# Declare Global Variables and Functions here
	#--------------------------------------------
	
	#region Get-ComputerTxtBox
	function Get-ComputerTxtBox
	{ $global:ComputerName = $textbox_computername.Text }
	#endregion
	
	#region Add-RichTextBox
	function Add-RichTextBox
	{
		[CmdletBinding()]
		param ($text)
		#To output to richtextbox, use following
		#Set-Alias artb Add-RichTextBox -Description "Add content to the RichTextBox"
		#$richtextbox_output.Text += "`tCOMPUTERNAME: $ComputerName`n"
		$richtextbox_output.Text += "$text"
		$richtextbox_output.Text += "# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #`n"
		
	}
	#endregion
	
	#region Get-LicenseStatus
	function Get-LicenseStatus
	{
		[CmdletBinding()]
		param (
			[Parameter(ValueFromPipelineByPropertyName = $true, ValueFromPipeline = $true)]
			[String]$ComputerName = $env:COMPUTERNAME
		)
		process
		{
			try
			{
				$wpa = Get-WmiObject SoftwareLicensingProduct -ComputerName $ComputerName `
									 -Filter "ApplicationID = '55c92734-d682-4d71-983e-d6ec3f16059f'" `
									 -Property LicenseStatus -ErrorAction Stop
			}
			catch
			{
				$status = $wpa
				$wpa = $null
			}
			$out = New-Object psobject -Property @{
				Status = $wpa;
			}
			if ($wpa)
			{
				:outer foreach ($item in $wpa)
				{
					switch ($item.LicenseStatus)
					{
						0 { $out.Status = "Unlicensed" }
						1 { $out.Status = "Licensed"; break outer }
						2 { $out.Status = "Out-Of-Box Grace Period"; break outer }
						3 { $out.Status = "Out-Of-Tolerance Grace Period"; break outer }
						4 { $out.Status = "Non-Genuine Grace Period"; break outer }
						5 { $out.Status = "Notification"; break outer }
						6 { $out.Status = "Extended Grace"; break outer }
						default { $out.Status = "Unknown value" }
					}
				}
			}
			else { $out.Status = $status.Message }
			$out
		}
	}
	#endregion
	
	#region Get-ProductKey
	function Get-ProductKey
	{
	     <#   
	    .SYNOPSIS   
	        Retrieves the product key and OS information from a local or remote system/s.
	         
	    .DESCRIPTION   
	        Retrieves the product key and OS information from a local or remote system/s. Queries of 64bit OS from a 32bit OS will result in 
	        inaccurate data being returned for the Product Key. You must query a 64bit OS from a system running a 64bit OS.
	        
	    .PARAMETER Computername
	        Name of the local or remote system/s.
	         
	    .NOTES   
	        Author: Boe Prox
	        Version: 1.1       
	            -Update of function from http://powershell.com/cs/blogs/tips/archive/2012/04/30/getting-windows-product-key.aspx
	            -Added capability to query more than one system
	            -Supports remote system query
	            -Supports querying 64bit OSes
	            -Shows OS description and Version in output object
	            -Error Handling
	     
	    .EXAMPLE 
	     Get-ProductKey -Computername Server1
	     
	    OSDescription                                           Computername OSVersion ProductKey                   
	    -------------                                           ------------ --------- ----------                   
	    Microsoft(R) Windows(R) Server 2003, Enterprise Edition Server1       5.2.3790  bcdfg-hjklm-pqrtt-vwxyy-12345     
	         
	        Description 
	        ----------- 
	        Retrieves the product key information from 'Server1'
	    #>	
		[cmdletbinding()]
		Param (
			[parameter(ValueFromPipeLine = $True, ValueFromPipeLineByPropertyName = $True)]
			[Alias("CN", "__Server", "IPAddress", "Server")]
			[string[]]$Computername = $Env:Computername
		)
		Begin
		{
			$map = "BCDFGHJKMPQRTVWXY2346789"
		}
		Process
		{
			ForEach ($Computer in $Computername)
			{
				Write-Verbose ("{0}: Checking network availability" -f $Computer)
				If (Test-Connection -ComputerName $Computer -Count 1 -Quiet)
				{
					Try
					{
						Write-Verbose ("{0}: Retrieving WMI OS information" -f $Computer)
						$OS = Get-WmiObject -ComputerName $Computer Win32_OperatingSystem -ErrorAction Stop
					}
					Catch
					{
						$OS = New-Object PSObject -Property @{
							Caption = $_.Exception.Message
							Version = $_.Exception.Message
						}
					}
					Try
					{
						Write-Verbose ("{0}: Attempting remote registry access" -f $Computer)
						$remoteReg = [Microsoft.Win32.RegistryKey]::OpenRemoteBaseKey([Microsoft.Win32.RegistryHive]::LocalMachine, $Computer)
						If ($OS.OSArchitecture -eq '64-bit')
						{
							$value = $remoteReg.OpenSubKey("SOFTWARE\Microsoft\Windows NT\CurrentVersion").GetValue('DigitalProductId4')[0x34..0x42]
						}
						Else
						{
							$value = $remoteReg.OpenSubKey("SOFTWARE\Microsoft\Windows NT\CurrentVersion").GetValue('DigitalProductId')[0x34..0x42]
						}
						$ProductKey = ""
						Write-Verbose ("{0}: Translating data into product key" -f $Computer)
						for ($i = 24; $i -ge 0; $i--)
						{
							$r = 0
							for ($j = 14; $j -ge 0; $j--)
							{
								$r = ($r * 256) -bxor $value[$j]
								$value[$j] = [math]::Floor([double]($r/24))
								$r = $r % 24
							}
							$ProductKey = $map[$r] + $ProductKey
							if (($i % 5) -eq 0 -and $i -ne 0)
							{
								$ProductKey = "-" + $ProductKey
							}
						}
					}
					Catch
					{
						$ProductKey = $_.Exception.Message
					}
					$object = New-Object PSObject -Property @{
						ComputerName = $Computer
						ProductKey = $ProductKey
					}
					$object.pstypenames.insert(0, 'ProductKey.Info')
					$object
				}
				Else
				{
					$object = New-Object PSObject -Property @{
						ComputerName = $Computer
						ProductKey = 'Unreachable'
					}
					$object.pstypenames.insert(0, 'ProductKey.Info')
					$object
				}
			}
		}
	}
	#endregion
	
	#region Activation Status - Technet
	function Get-ActivationStatus
	{
		[CmdletBinding()]
		param (
			[Parameter(ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true)]
			[string]$ComputerName = $Env:COMPUTERNAME
		)
		process
		{
			try
			{
				$wpa = Get-WmiObject SoftwareLicensingProduct -ComputerName $ComputerName `
									 -Filter "ApplicationID = '55c92734-d682-4d71-983e-d6ec3f16059f'" `
									 -Property LicenseStatus -ErrorAction Stop
			}
			catch
			{
				$status = New-Object ComponentModel.Win32Exception ($_.Exception.ErrorCode)
				$wpa = $null
			}
			$out = New-Object psobject -Property @{
				ComputerName = $ComputerName;
				Status = [string]::Empty;
			}
			if ($wpa)
			{
				:outer foreach ($item in $wpa)
				{
					switch ($item.LicenseStatus)
					{
						0 { $out.Status = "Unlicensed" }
						1 { $out.Status = "Licensed"; break outer }
						2 { $out.Status = "Out-Of-Box Grace Period"; break outer }
						3 { $out.Status = "Out-Of-Tolerance Grace Period"; break outer }
						4 { $out.Status = "Non-Genuine Grace Period"; break outer }
						5 { $out.Status = "Notification"; break outer }
						6 { $out.Status = "Extended Grace"; break outer }
						default { $out.Status = "Unknown value" }
					}
				}
			}
			else { $out.Status = $status.Message }
			$out
		}
	}
	
	#endregion
	
	
	#region Get-SortableDate
	function Get-SortableDate
	{
		$global:SortableDate = Get-Date -Format "dd/MM/yyyy  - HH':'mm':'ss"
		return $global:SortableDate
	}#endregion Get-SortableDate
	
	#region Add-Logs
	function Add-Logs
	{
		[CmdletBinding()]
		param ($text)
		Get-SortableDate
		$richtextbox_logs.Text += "[$global:SortableDate] - $text`r"
		Set-Alias alogs Add-Logs -Description "Add content to the RichTextBoxLogs"
		Set-Alias Add-Log Add-Logs -Description "Add content to the RichTextBoxLogs"
	}#endregion Add Logs
	
	#region Clear-RichTextBox
	# Function - Clear the RichTextBox
	function Clear-RichTextBox { $richtextbox_output.Text = "" }
	
	#endregion
	
	#region Clear-Logs
	# Function - Clear the Logs
	function Clear-Logs { $richtextbox_logs.Text = "" }
	
	#endregion
	
	#region Add-ClipBoard
	function Add-ClipBoard ($text)
	{
		Add-Type -AssemblyName System.Windows.Forms
		$tb = New-Object System.Windows.Forms.TextBox
		$tb.Multiline = $true
		$tb.Text = $text
		$tb.SelectAll()
		$tb.Copy()
	}
	#endregion
	
	#region Test-TcpPort
	function Test-TcpPort ($ComputerName, [int]$port = 80)
	{
		$socket = new-object Net.Sockets.TcpClient
		$socket.Connect($ComputerName, $port)
		if ($socket.Connected)
		{
			$status = "Open"
			$socket.Close()
		}
		else
		{
			$status = "Closed / Filtered"
		}
		$socket = $null
		Add-RichTextBox "ComputerName:$ComputerName`nPort:$port`nStatus:$status"
	}
	#endregion
	
	#region Set-RDPEnable
	# Function RDP Enable
	function Set-RDPEnable ($ComputerName = '.')
	{
		$regKey = [Microsoft.Win32.RegistryKey]::OpenRemoteBaseKey([Microsoft.Win32.RegistryHive]::LocalMachine, $ComputerName)
		$regKey = $regKey.OpenSubKey("SYSTEM\\CurrentControlSet\\Control\\Terminal Server", $True)
		$regkey.SetValue("fDenyTSConnections", 0)
		$regKey.flush()
		$regKey.Close()
	}
	#endregion
	
	#region Set-RDPDisable
	# Function RDP Disable
	function Set-RDPDisable ($ComputerName = '.')
	{
		$regKey = [Microsoft.Win32.RegistryKey]::OpenRemoteBaseKey([Microsoft.Win32.RegistryHive]::LocalMachine, $ComputerName)
		$regKey = $regKey.OpenSubKey("SYSTEM\\CurrentControlSet\\Control\\Terminal Server", $True)
		$regkey.SetValue("fDenyTSConnections", 1)
		$regKey.flush()
		$regKey.Close()
	}
	#endregion
	
	#region Start-Proc
	function Start-Proc
	{
		param (
			[string]$exe = $(Throw "An executable must be specified"),
			[string]$arguments,
			[switch]$hidden,
			[switch]$waitforexit
		)
		# Build Startinfo and set options according to parameters
		$startinfo = new-object System.Diagnostics.ProcessStartInfo
		$startinfo.FileName = $exe
		$startinfo.Arguments = $arguments
		if ($hidden)
		{
			$startinfo.WindowStyle = "Hidden"
			$startinfo.CreateNoWindow = $TRUE
		}
		$process = [System.Diagnostics.Process]::Start($startinfo)
		if ($waitforexit) { $process.WaitForExit() }
	}
	#endregion
	
	#region Get-Uptime
	function Get-Uptime
	{
		param ($ComputerName = "localhost")
		$wmi = Get-WmiObject -class Win32_OperatingSystem -computer $ComputerName
		$LBTime = $wmi.ConvertToDateTime($wmi.Lastbootuptime)
		[TimeSpan]$uptime = New-TimeSpan $LBTime $(get-date)
		Write-Output "$($uptime.days) Days $($uptime.hours) Hours $($uptime.minutes) Minutes $($uptime.seconds) Seconds"
	}
	#endregion Get-Uptime
	
	#region Invoke-GPUpdate
	function Invoke-GPUpdate()
	{
		param ($ComputerName = ".")
		$targetOSInfo = Get-WmiObject -ComputerName $ComputerName -Class Win32_OperatingSystem -ErrorAction SilentlyContinue
		
		If (
		$targetOSInfo -eq $null) { return "Unable to connect to $ComputerName" }
		Else
		{
			If ($targetOSInfo.version -ge 5.1) { Invoke-WmiMethod -ComputerName $ComputerName -Path win32_process -Name create -ArgumentList "gpupdate /target:Computer /force /wait:0" }
			Else { Invoke-WmiMethod -ComputerName $ComputerName -Path win32_process -Name create –ArgumentList "secedit /refreshpolicy machine_policy /enforce" }
		}
	}
	#endregion
	
	#region Get-Scriptdirectory
	#Sample function that provides the location of the script
	function Get-Scriptdirectory
	{
		if ($hostinvocation -ne $null)
		{
			Split-Path $hostinvocation.MyCommand.path
		}
		else
		{
			$invocation = (get-variable MyInvocation -Scope 1).Value
			Split-Path -Parent $invocation.MyCommand.Definition
		}
	}
	#Sample variable that provides the location of the script
	[string]$ScriptDirectory = Get-Scriptdirectory
	#endregion
	
	### BSONPOSH / Boe Prox http://bsonposh.com/
	
	#region Get-PageFile
	
	function Get-PageFile
	{
		
		    <#
		        .Synopsis 
		            Gets the Page File info for specified host
		            
		        .Description
		            Gets the Page File info for specified host
		            
		        .Parameter ComputerName
		            Name of the Computer to get the Paging File info from (Default is localhost.)
		            
		        .Example
		            Get-PageFile
		            Description
		            -----------
		            Gets Page File from local machine
		    
		        .Example
		            Get-PageFile -ComputerName MyServer
		            Description
		            -----------
		            Gets Page File from MyServer
		            
		        .Example
		            $Servers | Get-PageFile
		            Description
		            -----------
		            Gets Page File for each machine in the pipeline
		            
		        .OUTPUTS
		            PSObject
		            
		        .Notes
		            NAME:      Get-PageFile 
		            AUTHOR:    YetiCentral\bshell
		            Website:   www.bsonposh.com
		            #Requires -Version 2.0
		    #>
		
		[Cmdletbinding()]
		Param (
			[alias('dnsHostName')]
			[Parameter(ValueFromPipelineByPropertyName = $true, ValueFromPipeline = $true)]
			[string]$ComputerName = $Env:COMPUTERNAME
		)
		
		Process
		{
			Write-Verbose " [Get-PageFile] :: Process Start"
			if ($ComputerName -match "(.*)(\$)$")
			{
				$ComputerName = $ComputerName -replace "(.*)(\$)$", '$1'
			}
			if (Test-Connection $ComputerName -Count 1 -Quiet)
			{
				try
				{
					Write-Verbose " [Get-PageFile] :: Collecting Paging File Info"
					$PagingFiles = Get-WmiObject Win32_PageFile -ComputerName $ComputerName -ErrorAction SilentlyContinue
					if ($PagingFiles)
					{
						foreach ($PageFile in $PagingFiles)
						{
							$myobj = @{
								ComputerName = $ComputerName
								Name = $PageFile.Name
								SizeGB = [int]($PageFile.FileSize / 1GB)
								InitialSize = $PageFile.InitialSize
								MaximumSize = $PageFile.MaximumSize
							}
							
							$obj = New-Object PSObject -Property $myobj
							$obj.PSTypeNames.Clear()
							$obj.PSTypeNames.Add('BSonPosh.Computer.PageFile')
							$obj
						}
					}
					else
					{
						$Pagefile = Get-ChildItem \\$ComputerName\c$\pagefile.sys -Force -ErrorAction SilentlyContinue
						if ($PageFile)
						{
							$myobj = @{
								ComputerName = $ComputerName
								Name = $PageFile.Name
								SizeGB = [int]($Pagefile.Length / 1GB)
								InitialSize = "System Managed"
								MaximumSize = "System Managed"
							}
							
							$obj = New-Object PSObject -Property $myobj
							$obj.PSTypeNames.Clear()
							$obj.PSTypeNames.Add('BSonPosh.Computer.PageFile')
							$obj
						}
						else
						{
							Write-Host "[Get-PageFile] :: No Paging File setting found. Most likely set to system managed or you do not have access."
						}
					}
				}
				catch
				{
					Write-Verbose " [Get-PageFile] :: [$ComputerName] Failed with Error: $($Error[0])"
				}
			}
		}
	}
	
	#endregion 
	
	#region Get-PageFileSetting
	
	function Get-PageFileSetting
	{
		
		    <#
		        .Synopsis 
		            Gets the Page File setting info for specified host
		            
		        .Description
		            Gets the Page File setting info for specified host
		            
		        .Parameter ComputerName
		            Name of the Computer to get the Page File setting info from (Default is localhost.)
		            
		        .Example
		            Get-PageFileSetting
		            Description
		            -----------
		            Gets Page File setting from local machine
		    
		        .Example
		            Get-PageFileSetting -ComputerName MyServer
		            Description
		            -----------
		            Gets Page File setting from MyServer
		            
		        .Example
		            $Servers | Get-PageFileSetting
		            Description
		            -----------
		            Gets Page File setting for each machine in the pipeline
		            
		        .OUTPUTS
		            PSObject
		            
		        .Notes
		            NAME:      Get-PageFileSetting 
		            AUTHOR:    YetiCentral\bshell
		            Website:   www.bsonposh.com
		            #Requires -Version 2.0
		    #>
		
		[Cmdletbinding()]
		Param (
			[alias('dnsHostName')]
			[Parameter(ValueFromPipelineByPropertyName = $true, ValueFromPipeline = $true)]
			[string]$ComputerName = $Env:COMPUTERNAME
		)
		
		Process
		{
			Write-Verbose " [Get-PageFileSetting] :: Process Start"
			if ($ComputerName -match "(.*)(\$)$")
			{
				$ComputerName = $ComputerName -replace "(.*)(\$)$", '$1'
			}
			if (Test-Host $ComputerName -TCPPort 135)
			{
				try
				{
					Write-Verbose " [Get-PageFileSetting] :: Collecting Paging File Info"
					$PagingFiles = Get-WmiObject Win32_PageFileSetting -ComputerName $ComputerName -EnableAllPrivileges
					if ($PagingFiles)
					{
						foreach ($PageFile in $PagingFiles)
						{
							$PageFile
						}
					}
					else
					{
						Return "No Paging File setting found. Most likely set to system managed"
					}
				}
				catch
				{
					Write-Verbose " [Get-PageFileSetting] :: [$ComputerName] Failed with Error: $($Error[0])"
				}
			}
		}
	}
	
	#endregion 
	
	#region Get-HostsFile
	Function Get-HostsFile
	{
		<#
		.SYNOPSIS
		   Retrieves the contents of a hosts file on a specified system
		.DESCRIPTION
		   Retrieves the contents of a hosts file on a specified system
		.PARAMETER Computer
		    Computer name to view host file from
		.NOTES
		    Name: Get-HostsFile
		    Author: Boe Prox
		    DateCreated: 15Mar2011
		.LINK  
		
		http://boeprox.wordpress.com
		
		.EXAMPLE
		    Get-HostsFile "server1" 
		
		Description
		-----------
		Retrieves the contents of the hosts file on 'server1' 
		
		#>
		[cmdletbinding(
					   DefaultParameterSetName = 'Default',
					   ConfirmImpact = 'low'
					   )]
		Param (
			[Parameter(
					   ValueFromPipeline = $True)]
			[string[]]$Computer
			
		)
		Begin
		{
			$psBoundParameters.GetEnumerator() | % {
				Write-Verbose "Parameter: $_"
			}
			If (!$PSBoundParameters['computer'])
			{
				Write-Verbose "No computer name given, using local computername"
				[string[]]$computer = $Env:Computername
			}
			$report = @()
		}
		Process
		{
			Write-Verbose "Starting process of computers"
			ForEach ($c in $computer)
			{
				Write-Verbose "Testing connection of $c"
				If (Test-Connection -ComputerName $c -Quiet -Count 1)
				{
					Write-Verbose "Validating path to hosts file"
					If (Test-Path "\\$c\C$\Windows\system32\drivers\etc\hosts")
					{
						Switch -regex -file ("\\$c\c$\Windows\system32\drivers\etc\hosts")
						{
							"^\d\w+" {
								Write-Verbose "Adding IPV4 information to collection"
								$temp = "" | Select Computer, IPV4, IPV6, Hostname, Notes
								$new = $_.Split("") | ? { $_ -ne "" }
								$temp.Computer = $c
								$temp.IPV4 = $new[0]
								$temp.HostName = $new[1]
								If ($new[2] -eq $Null)
								{
									$temp.Notes = "NA"
								}
								Else
								{
									$temp.Notes = $new[2]
								}
								$report += $temp
							}
							Default
							{
								If (!("\s+" -match $_ -OR $_.StartsWith("#")))
								{
									Write-Verbose "Adding IPV6 information to collection"
									$temp = "" | Select Computer, IPV4, IPV6, Hostname, Notes
									$new = $_.Split("") | ? { $_ -ne "" }
									$temp.Computer = $c
									$temp.IPV6 = $new[0]
									$temp.HostName = $new[1]
									If ($new[2] -eq $Null)
									{
										$temp.Notes = "NA"
									}
									Else
									{
										$temp.Notes = $new[2]
									}
									$report += $temp
								}
							}
						}
					} #EndIF
					ElseIf (Test-Path "\\$c\C$\WinNT\system32\drivers\etc\hosts")
					{
						Switch -regex -file ("\\$c\c$\WinNT\system32\drivers\etc\hosts")
						{
							"^#\w+" {
							}
							"^\d\w+" {
								Write-Verbose "Adding IPV4 information to collection"
								$temp = "" | Select Computer, IPV4, IPV6, Hostname, Notes
								$new = $_.Split("") | ? { $_ -ne "" }
								$temp.Computer = $c
								$temp.IPV4 = $new[0]
								$temp.HostName = $new[1]
								If ($new[2] -eq $Null)
								{
									$temp.Notes = "NA"
								}
								Else
								{
									$temp.Notes = $new[2]
								}
								$report += $temp
							}
							Default
							{
								If (!("\s+" -match $_ -OR $_.StartsWith("#")))
								{
									Write-Verbose "Adding IPV6 information to collection"
									$temp = "" | Select Computer, IPV4, IPV6, Hostname, Notes
									$new = $_.Split("") | ? { $_ -ne "" }
									$temp.Computer = $c
									$temp.IPV6 = $new[0]
									$temp.HostName = $new[1]
									If ($new[2] -eq $Null)
									{
										$temp.Notes = "NA"
									}
									Else
									{
										$temp.Notes = $new[2]
									}
									$report += $temp
								}
							}
						}
					} #End ElseIf
					Else
					{
						Write-Verbose "No host file found"
						$temp = "" | Select Computer, IPV4, IPV6, Hostname, Notes
						$temp.Computer = $c
						$temp.IPV4 = "NA"
						$temp.IPV6 = "NA"
						$temp.Hostname = "NA"
						$temp.Notes = "Unable to locate host file"
						$report += $temp
					} #End Else
				}
				Else
				{
					Write-Verbose "No computer found"
					$temp = "" | Select Computer, IPV4, IPV6, Hostname, Notes
					$temp.Computer = $c
					$temp.IPV4 = "NA"
					$temp.IPV6 = "NA"
					$temp.Hostname = "NA"
					$temp.Notes = "Unable to locate Computer"
					$report += $temp
				}
			}
		}
		End
		{
			Write-Output $report
		}
	}
	#endregion Get-HostFileContent
	
	#region Get-DiskPartition 
	
	function Get-DiskPartition
	{
		
		    <#
		        .Synopsis 
		            Gets the disk partition info for specified host
		            
		        .Description
		            Gets the disk partition info for specified host
		            
		        .Parameter ComputerName
		            Name of the Computer to get the disk partition info from (Default is localhost.)
		            
		        .Example
		            Get-DiskPartition
		            Description
		            -----------
		            Gets Disk Partitions from local machine
		    
		        .Example
		            Get-DiskPartition -ComputerName MyServer
		            Description
		            -----------
		            Gets Disk Partitions from MyServer
		            
		        .Example
		            $Servers | Get-DiskPartition
		            Description
		            -----------
		            Gets Disk Partitions for each machine in the pipeline
		            
		        .OUTPUTS
		            PSObject
		            
		        .Notes
		        NAME:      Get-DiskPartition 
		        AUTHOR:    YetiCentral\bshell
		        Website:   www.bsonposh.com
		        #Requires -Version 2.0
		    #>
		
		[Cmdletbinding()]
		Param (
			[alias('dnsHostName')]
			[Parameter(ValueFromPipelineByPropertyName = $true, ValueFromPipeline = $true)]
			[string]$ComputerName = $Env:COMPUTERNAME
		)
		
		Process
		{
			Write-Verbose " [Get-DiskPartition] :: Process Start"
			if ($ComputerName -match "(.*)(\$)$")
			{
				$ComputerName = $ComputerName -replace "(.*)(\$)$", '$1'
			}
			if (Test-Host $ComputerName -TCPPort 135)
			{
				try
				{
					Write-Verbose " [Get-DiskPartition] :: Getting Partition info use WMI"
					$Partitions = Get-WmiObject Win32_DiskPartition -ComputerName $ComputerName
					Write-Verbose " [Get-DiskPartition] :: Found $($Partitions.Count) partitions"
					foreach ($Partition in $Partitions)
					{
						Write-Verbose " [Get-DiskPartition] :: Creating Hash Table"
						$myobj = @{ }
						
						Write-Verbose " [Get-DiskPartition] :: Adding BlockSize        - $($Partition.BlockSize)"
						$myobj.BlockSize = $Partition.BlockSize
						
						Write-Verbose " [Get-DiskPartition] :: Adding BootPartition    - $($Partition.BootPartition)"
						$myobj.BootPartition = $Partition.BootPartition
						
						Write-Verbose " [Get-DiskPartition] :: Adding ComputerName     - $ComputerName"
						$myobj.ComputerName = $ComputerName
						
						Write-Verbose " [Get-DiskPartition] :: Adding Description      - $($Partition.name)"
						$myobj.Description = $Partition.Name
						
						Write-Verbose " [Get-DiskPartition] :: Adding PrimaryPartition - $($Partition.PrimaryPartition)"
						$myobj.PrimaryPartition = $Partition.PrimaryPartition
						
						Write-Verbose " [Get-DiskPartition] :: Adding Index            - $($Partition.Index)"
						$myobj.Index = $Partition.Index
						
						Write-Verbose " [Get-DiskPartition] :: Adding SizeMB           - $($Partition.Size)"
						$myobj.SizeMB = ($Partition.Size/1mb).ToString("n2", $Culture)
						
						Write-Verbose " [Get-DiskPartition] :: Adding Type             - $($Partition.Type)"
						$myobj.Type = $Partition.Type
						
						Write-Verbose " [Get-DiskPartition] :: Setting IsAligned "
						$myobj.IsAligned = $Partition.StartingOffset%64kb -eq 0
						
						Write-Verbose " [Get-DiskPartition] :: Creating Object"
						$obj = New-Object PSObject -Property $myobj
						$obj.PSTypeNames.Clear()
						$obj.PSTypeNames.Add('BSonPosh.DiskPartition')
						$obj
					}
				}
				catch
				{
					Write-Verbose " [Get-DiskPartition] :: [$ComputerName] Failed with Error: $($Error[0])"
				}
			}
			Write-Verbose " [Get-DiskPartition] :: Process End"
		}
	}
	
	#endregion 
	
	#region Get-DiskSpace
	
	function Get-DiskSpace
	{
		
		    <#
		        .Synopsis  
		            Gets the disk space for specified host
		            
		        .Description
		            Gets the disk space for specified host
		            
		        .Parameter ComputerName
		            Name of the Computer to get the diskspace from (Default is localhost.)
		            
		        .Example
		            Get-Diskspace
		            # Gets diskspace from local machine
		    
		        .Example
		            Get-Diskspace -ComputerName MyServer
		            Description
		            -----------
		            Gets diskspace from MyServer
		            
		        .Example
		            $Servers | Get-Diskspace
		            Description
		            -----------
		            Gets diskspace for each machine in the pipeline
		            
		        .OUTPUTS
		            PSCustomObject
		            
		        .Notes
		            NAME:      Get-DiskSpace 
		            AUTHOR:    YetiCentral\bshell
		            Website:   www.bsonposh.com
		            #Requires -Version 2.0
		    #>
		
		[Cmdletbinding()]
		Param (
			[alias('dnsHostName')]
			[Parameter(ValueFromPipelineByPropertyName = $true, ValueFromPipeline = $true)]
			[string]$ComputerName = $Env:COMPUTERNAME
		)
		
		Begin
		{
			Write-Verbose " [Get-DiskSpace] :: Start Begin"
			$Culture = New-Object System.Globalization.CultureInfo("en-US")
			Write-Verbose " [Get-DiskSpace] :: End Begin"
		}
		
		Process
		{
			Write-Verbose " [Get-DiskSpace] :: Start Process"
			if ($ComputerName -match "(.*)(\$)$")
			{
				$ComputerName = $ComputerName -replace "(.*)(\$)$", '$1'
				
			}
			Write-Verbose " [Get-DiskSpace] :: `$ComputerName - $ComputerName"
			Write-Verbose " [Get-DiskSpace] :: Testing Connectivity"
			if (Test-Host $ComputerName -TCPPort 135)
			{
				Write-Verbose " [Get-DiskSpace] :: Connectivity Passed"
				try
				{
					Write-Verbose " [Get-DiskSpace] :: Getting Operating System Version using - Get-WmiObject Win32_OperatingSystem -ComputerName $ComputerName -Property Version"
					$OSVersionInfo = Get-WmiObject Win32_OperatingSystem -ComputerName $ComputerName -Property Version -ea STOP
					Write-Verbose " [Get-DiskSpace] :: Getting Operating System returned $($OSVersionInfo.Version)"
					if ($OSVersionInfo.Version -gt 5.2)
					{
						Write-Verbose " [Get-DiskSpace] :: Version high enough to use Win32_Volume"
						Write-Verbose " [Get-DiskSpace] :: Calling Get-WmiObject -class Win32_Volume -ComputerName $ComputerName -Property `"Name`",`"FreeSpace`",`"Capacity`" -filter `"DriveType=3`""
						$DiskInfos = Get-WmiObject -class Win32_Volume                          `
												   -ComputerName $ComputerName                  `
												   -Property "Name", "FreeSpace", "Capacity"      `
												   -filter "DriveType=3" -ea STOP
						Write-Verbose " [Get-DiskSpace] :: Win32_Volume returned $($DiskInfos.count) disks"
						foreach ($DiskInfo in $DiskInfos)
						{
							$myobj = @{ }
							$myobj.ComputerName = $ComputerName
							$myobj.OSVersion = $OSVersionInfo.Version
							$Myobj.Drive = $DiskInfo.Name
							$Myobj.CapacityGB = [float]($DiskInfo.Capacity/1GB).ToString("n2", $Culture)
							$Myobj.FreeSpaceGB = [float]($DiskInfo.FreeSpace/1GB).ToString("n2", $Culture)
							$Myobj.PercentFree = "{0:P2}" -f ($DiskInfo.FreeSpace / $DiskInfo.Capacity)
							$obj = New-Object PSObject -Property $myobj
							$obj.PSTypeNames.Clear()
							$obj.PSTypeNames.Add('BSonPosh.DiskSpace')
							$obj
						}
					}
					else
					{
						Write-Verbose " [Get-DiskSpace] :: Version not high enough to use Win32_Volume using Win32_LogicalDisk"
						$DiskInfos = Get-WmiObject -class Win32_LogicalDisk                       `
												   -ComputerName $ComputerName                       `
												   -Property SystemName, DeviceID, FreeSpace, Size   `
												   -filter "DriveType=3" -ea STOP
						foreach ($DiskInfo in $DiskInfos)
						{
							$myobj = @{ }
							$myobj.ComputerName = $ComputerName
							$myobj.OSVersion = $OSVersionInfo.Version
							$Myobj.Drive = "{0}\" -f $DiskInfo.DeviceID
							$Myobj.CapacityGB = [float]($DiskInfo.Capacity/1GB).ToString("n2", $Culture)
							$Myobj.FreeSpaceGB = [float]($DiskInfo.FreeSpace/1GB).ToString("n2", $Culture)
							$Myobj.PercentFree = "{0:P2}" -f ($DiskInfo.FreeSpace / $DiskInfo.Capacity)
							$obj = New-Object PSObject -Property $myobj
							$obj.PSTypeNames.Clear()
							$obj.PSTypeNames.Add('BSonPosh.DiskSpace')
							$obj
						}
					}
				}
				catch
				{
					Write-Host " Host [$ComputerName] Failed with Error: $($Error[0])" -ForegroundColor Red
				}
			}
			else
			{
				Write-Host " Host [$ComputerName] Failed Connectivity Test " -ForegroundColor Red
			}
			Write-Verbose " [Get-DiskSpace] :: End Process"
			
		}
	}
	
	#endregion 
	
	#region Get-Processor
	
	function Get-Processor
	{
		
		    <#
		        .Synopsis 
		            Gets the Computer Processor info for specified host.
		            
		        .Description
		            Gets the Computer Processor info for specified host.
		            
		        .Parameter ComputerName
		            Name of the Computer to get the Computer Processor info from (Default is localhost.)
		            
		        .Example
		            Get-Processor
		            Description
		            -----------
		            Gets Computer Processor info from local machine
		    
		        .Example
		            Get-Processor -ComputerName MyServer
		            Description
		            -----------
		            Gets Computer Processor info from MyServer
		            
		        .Example
		            $Servers | Get-Processor
		            Description
		            -----------
		            Gets Computer Processor info for each machine in the pipeline
		            
		        .OUTPUTS
		            PSCustomObject
		            
		        .INPUTS
		            System.String
		            
		        .Link
		            N/A
		            
		        .Notes
		            NAME:      Get-Processor
		            AUTHOR:    bsonposh
		            Website:   http://www.bsonposh.com
		            Version:   1
		            #Requires -Version 2.0
		    #>
		
		[Cmdletbinding()]
		Param (
			[alias('dnsHostName')]
			[Parameter(ValueFromPipelineByPropertyName = $true, ValueFromPipeline = $true)]
			[string]$ComputerName = $Env:COMPUTERNAME
		)
		
		Process
		{
			
			if ($ComputerName -match "(.*)(\$)$")
			{
				$ComputerName = $ComputerName -replace "(.*)(\$)$", '$1'
			}
			if (Test-Host -ComputerName $ComputerName -TCPPort 135)
			{
				try
				{
					$CPUS = Get-WmiObject Win32_Processor -ComputerName $ComputerName -ea STOP
					foreach ($CPU in $CPUs)
					{
						$myobj = @{
							ComputerName = $ComputerName
							Name = $CPU.Name
							Manufacturer = $CPU.Manufacturer
							Speed = $CPU.MaxClockSpeed
							Cores = $CPU.NumberOfCores
							L2Cache = $CPU.L2CacheSize
							Stepping = $CPU.Stepping
						}
					}
					$obj = New-Object PSObject -Property $myobj
					$obj.PSTypeNames.Clear()
					$obj.PSTypeNames.Add('BSonPosh.Computer.Processor')
					$obj
				}
				catch
				{
					Write-Host " Host [$ComputerName] Failed with Error: $($Error[0])" -ForegroundColor Red
				}
			}
			else
			{
				Write-Host " Host [$ComputerName] Failed Connectivity Test " -ForegroundColor Red
			}
			
		}
	}
	
	#endregion
	
	#region Get-IP 
	
	function Get-IP
	{
		
		    <#
		        .Synopsis 
		            Get the IP of the specified host.
		            
		        .Description
		            Get the IP of the specified host.
		            
		        .Parameter ComputerName
		            Name of the Computer to get IP (Default localhost.)
		                
		        .Example
		            Get-IP
		            Description
		            -----------
		            Get IP information the localhost
		            
		            
		        .OUTPUTS
		            PSCustomObject
		            
		        .INPUTS
		            System.String
		        
		        .Notes
		            NAME:      Get-IP
		            AUTHOR:    YetiCentral\bshell
		            Website:   www.bsonposh.com
		            #Requires -Version 2.0
		    #>
		
		[Cmdletbinding()]
		Param (
			[alias('dnsHostName')]
			[Parameter(ValueFromPipelineByPropertyName = $true, ValueFromPipeline = $true)]
			[string]$ComputerName = $Env:COMPUTERNAME
		)
		Process
		{
			$NICs = Get-WmiObject Win32_NetworkAdapterConfiguration -Filter "IPEnabled='$True'" -ComputerName $ComputerName
			foreach ($Nic in $NICs)
			{
				$myobj = @{
					Name = $Nic.Description
					MacAddress = $Nic.MACAddress
					IP4 = $Nic.IPAddress | where{ $_ -match "\d+\.\d+\.\d+\.\d+" }
					IP6 = $Nic.IPAddress | where{ $_ -match "\:\:" }
					IP4Subnet = $Nic.IPSubnet | where{ $_ -match "\d+\.\d+\.\d+\.\d+" }
					DefaultGWY = $Nic.DefaultIPGateway | Select -First 1
					DNSServer = $Nic.DNSServerSearchOrder
					WINSPrimary = $Nic.WINSPrimaryServer
					WINSSecondary = $Nic.WINSSecondaryServer
				}
				$obj = New-Object PSObject -Property $myobj
				$obj.PSTypeNames.Clear()
				$obj.PSTypeNames.Add('BSonPosh.IPInfo')
				$obj
			}
		}
	}
	Function Get-HostsFile { 
	<#   
	.SYNOPSIS   
	   Retrieves the contents of a hosts file on a specified system 
	.DESCRIPTION 
	   Retrieves the contents of a hosts file on a specified system 
	.PARAMETER Computer 
	    Computer name to view host file from 
	.NOTES   
	    Name: Get-HostsFile 
	    Author: Boe Prox 
	    DateCreated: 15Mar2011  
	.LINK  
	    https://boeprox.wordpress.com        
	.EXAMPLE   
	    Get-HostsFile "server1" 
	  
	Description 
	-----------     
	Retrieves the contents of the hosts file on 'server1' 
	  
	  
	#> 
	[cmdletbinding( 
	    DefaultParameterSetName = 'Default', 
	    ConfirmImpact = 'low'
	)] 
	    Param( 
	        [Parameter( 
	            ValueFromPipeline = $True)] 
	            [string[]]$Computer                                               
	                          
	        ) 
	Begin { 
	    $psBoundParameters.GetEnumerator() | % {   
	        Write-Verbose "Parameter: $_" 
	        } 
	        If (!$PSBoundParameters['computer']) { 
	        Write-Verbose "No computer name given, using local computername"
	        [string[]]$computer = $Env:Computername
	        } 
	    $report = @() 
	    } 
	Process { 
	    Write-Verbose "Starting process of computers"
	    ForEach ($c in $computer) { 
	        Write-Verbose "Testing connection of $c"
	        If (Test-Connection -ComputerName $c -Quiet -Count 1) { 
	            Write-Verbose "Validating path to hosts file"
	            If (Test-Path "\\$c\C$\Windows\system32\drivers\etc\hosts") { 
	                Switch -regex -file ("\\$c\c$\Windows\system32\drivers\etc\hosts") { 
	                    "^\d\w+" { 
	                        Write-Verbose "Adding IPV4 information to collection"
	                        $temp = "" | Select Computer, IPV4, IPV6, Hostname, Notes 
	                        $new = $_.Split("") | ? {$_ -ne ""} 
	                        $temp.Computer = $c 
	                        $temp.IPV4 = $new[0] 
	                        $temp.HostName = $new[1] 
	                        If ($new[2] -eq $Null) { 
	                            $temp.Notes = "NA" 
	                            } 
	                        Else { 
	                            $temp.Notes = $new[2] 
	                            } 
	                        $report += $temp 
	                        } 
	                    Default { 
	                        If (!("\s+" -match $_ -OR $_.StartsWith("#"))) { 
	                            Write-Verbose "Adding IPV6 information to collection" 
	                            $temp = "" | Select Computer, IPV4, IPV6, Hostname, Notes 
	                            $new = $_.Split("") | ? {$_ -ne ""} 
	                            $temp.Computer = $c 
	                            $temp.IPV6 = $new[0] 
	                            $temp.HostName = $new[1] 
	                            If ($new[2] -eq $Null) { 
	                                $temp.Notes = "NA" 
	                                } 
	                            Else { 
	                                $temp.Notes = $new[2] 
	                                } 
	                            $report += $temp 
	                            } 
	                        }                         
	                    } 
	                }#EndIF 
	            ElseIf (Test-Path "\\$c\C$\WinNT\system32\drivers\etc\hosts") { 
	                Switch -regex -file ("\\$c\c$\WinNT\system32\drivers\etc\hosts") { 
	                    "^#\w+" { 
	                        } 
	                    "^\d\w+" { 
	                        Write-Verbose "Adding IPV4 information to collection" 
	                        $temp = "" | Select Computer, IPV4,IPV6, Hostname, Notes 
	                        $new = $_.Split("") | ? {$_ -ne ""} 
	                        $temp.Computer = $c 
	                        $temp.IPV4 = $new[0] 
	                        $temp.HostName = $new[1] 
	                        If ($new[2] -eq $Null) { 
	                            $temp.Notes = "NA" 
	                            } 
	                        Else { 
	                            $temp.Notes = $new[2] 
	                            } 
	                        $report += $temp 
	                        } 
	                    Default { 
	                        If (!("\s+" -match $_ -OR $_.StartsWith("#"))) { 
	                            Write-Verbose "Adding IPV6 information to collection" 
	                            $temp = "" | Select Computer, IPV4, IPV6, Hostname, Notes 
	                            $new = $_.Split("") | ? {$_ -ne ""} 
	                            $temp.Computer = $c 
	                            $temp.IPV6 = $new[0] 
	                            $temp.HostName = $new[1] 
	                            If ($new[2] -eq $Null) { 
	                                $temp.Notes = "NA" 
	                                } 
	                            Else { 
	                                $temp.Notes = $new[2] 
	                                } 
	                            $report += $temp 
	                            } 
	                        }                         
	                    }         
	                }#End ElseIf 
	            Else { 
	                Write-Verbose "No host file found" 
	                $temp = "" | Select Computer, IPV4, IPV6, Hostname, Notes 
	                $temp.Computer = $c 
	                $temp.IPV4 = "NA" 
	                $temp.IPV6 = "NA"                 
	                $temp.Hostname = "NA" 
	                $temp.Notes = "Unable to locate host file" 
	                $report += $temp 
	                }#End Else 
	            } 
	        Else { 
	            Write-Verbose "No computer found" 
	            $temp = "" | Select Computer, IPV4, IPV6, Hostname, Notes 
	            $temp.Computer = $c 
	            $temp.IPV4 = "NA" 
	            $temp.IPV6 = "NA"             
	            $temp.Hostname = "NA" 
	            $temp.Notes = "Unable to locate Computer" 
	            $report += $temp            
	            } 
	        } 
	    } 
	End { 
	    Write-Output $report
	    } 
	}
	
	
	
	
	
	
	Function Get-HostsFile
	{
	<#   
	.SYNOPSIS   
	   Retrieves the contents of a hosts file on a specified system 
	.DESCRIPTION 
	   Retrieves the contents of a hosts file on a specified system 
	.PARAMETER Computer 
	    Computer name to view host file from 
	.NOTES   
	    Name: Get-HostsFile 
	    Author: Boe Prox 
	    DateCreated: 15Mar2011  
	.LINK  
	    https://boeprox.wordpress.com        
	.EXAMPLE   
	    Get-HostsFile "server1" 
	  
	Description 
	-----------     
	Retrieves the contents of the hosts file on 'server1' 
	  
	  
	#>	
		[cmdletbinding(
					   DefaultParameterSetName = 'Default',
					   ConfirmImpact = 'low'
					   )]
		Param (
			[Parameter(
					   ValueFromPipeline = $True)]
			[string[]]$Computer
			
		)
		Begin
		{
			$psBoundParameters.GetEnumerator() | % {
				Write-Verbose "Parameter: $_"
			}
			If (!$PSBoundParameters['computer'])
			{
				Write-Verbose "No computer name given, using local computername"
				[string[]]$computer = $Env:Computername
			}
			$report = @()
		}
		Process
		{
			Write-Verbose "Starting process of computers"
			ForEach ($c in $computer)
			{
				Write-Verbose "Testing connection of $c"
				If (Test-Connection -ComputerName $c -Quiet -Count 1)
				{
					Write-Verbose "Validating path to hosts file"
					If (Test-Path "\\$c\C$\Windows\system32\drivers\etc\hosts")
					{
						Switch -regex -file ("\\$c\c$\Windows\system32\drivers\etc\hosts")
						{
							"^\d\w+" {
								Write-Verbose "Adding IPV4 information to collection"
								$temp = "" | Select Computer, IPV4, IPV6, Hostname, Notes
								$new = $_.Split("") | ? { $_ -ne "" }
								$temp.Computer = $c
								$temp.IPV4 = $new[0]
								$temp.HostName = $new[1]
								If ($new[2] -eq $Null)
								{
									$temp.Notes = "NA"
								}
								Else
								{
									$temp.Notes = $new[2]
								}
								$report += $temp
							}
							Default
							{
								If (!("\s+" -match $_ -OR $_.StartsWith("#")))
								{
									Write-Verbose "Adding IPV6 information to collection"
									$temp = "" | Select Computer, IPV4, IPV6, Hostname, Notes
									$new = $_.Split("") | ? { $_ -ne "" }
									$temp.Computer = $c
									$temp.IPV6 = $new[0]
									$temp.HostName = $new[1]
									If ($new[2] -eq $Null)
									{
										$temp.Notes = "NA"
									}
									Else
									{
										$temp.Notes = $new[2]
									}
									$report += $temp
								}
							}
						}
					} #EndIF 
					ElseIf (Test-Path "\\$c\C$\WinNT\system32\drivers\etc\hosts")
					{
						Switch -regex -file ("\\$c\c$\WinNT\system32\drivers\etc\hosts")
						{
							"^#\w+" {
							}
							"^\d\w+" {
								Write-Verbose "Adding IPV4 information to collection"
								$temp = "" | Select Computer, IPV4, IPV6, Hostname, Notes
								$new = $_.Split("") | ? { $_ -ne "" }
								$temp.Computer = $c
								$temp.IPV4 = $new[0]
								$temp.HostName = $new[1]
								If ($new[2] -eq $Null)
								{
									$temp.Notes = "NA"
								}
								Else
								{
									$temp.Notes = $new[2]
								}
								$report += $temp
							}
							Default
							{
								If (!("\s+" -match $_ -OR $_.StartsWith("#")))
								{
									Write-Verbose "Adding IPV6 information to collection"
									$temp = "" | Select Computer, IPV4, IPV6, Hostname, Notes
									$new = $_.Split("") | ? { $_ -ne "" }
									$temp.Computer = $c
									$temp.IPV6 = $new[0]
									$temp.HostName = $new[1]
									If ($new[2] -eq $Null)
									{
										$temp.Notes = "NA"
									}
									Else
									{
										$temp.Notes = $new[2]
									}
									$report += $temp
								}
							}
						}
					} #End ElseIf 
					Else
					{
						Write-Verbose "No host file found"
						$temp = "" | Select Computer, IPV4, IPV6, Hostname, Notes
						$temp.Computer = $c
						$temp.IPV4 = "NA"
						$temp.IPV6 = "NA"
						$temp.Hostname = "NA"
						$temp.Notes = "Unable to locate host file"
						$report += $temp
					} #End Else 
				}
				Else
				{
					Write-Verbose "No computer found"
					$temp = "" | Select Computer, IPV4, IPV6, Hostname, Notes
					$temp.Computer = $c
					$temp.IPV4 = "NA"
					$temp.IPV6 = "NA"
					$temp.Hostname = "NA"
					$temp.Notes = "Unable to locate Computer"
					$report += $temp
				}
			}
		}
		End
		{
			Write-Output $report
		}
	}
	
	
	
	
	
	
	
	#endregion 
	
	#region Get-InstalledSoftware
	
	function Get-InstalledSoftware
	{
		
		    <#
		        .Synopsis
		            Gets the installed software using Uninstall regkey for specified host.
		
		        .Description
		            Gets the installed software using Uninstall regkey for specified host.
		
		        .Parameter ComputerName
		            Name of the Computer to get the installed software from (Default is localhost.)
		
		        .Example
		            Get-InstalledSoftware
		            Description
		            -----------
		            Gets installed software from local machine
		
		        .Example
		            Get-InstalledSoftware -ComputerName MyServer
		            Description
		            -----------
		            Gets installed software from MyServer
		
		        .Example
		            $Servers | Get-InstalledSoftware
		            Description
		            -----------
		            Gets installed software for each machine in the pipeline
		
		        .OUTPUTS
		            PSCustomObject
		
		        .Notes
		            NAME:      Get-InstalledSoftware
		            AUTHOR:    YetiCentral\bshell
		            Website:   www.bsonposh.com
		            #Requires -Version 2.0
		    #>
		
		[Cmdletbinding()]
		Param (
			[alias('dnsHostName')]
			[Parameter(ValueFromPipelineByPropertyName = $true, ValueFromPipeline = $true)]
			[string]$ComputerName = $Env:COMPUTERNAME
		)
		begin
		{
			
			Write-Verbose " [Get-InstalledPrograms] :: Start Begin"
			$Culture = New-Object System.Globalization.CultureInfo("en-US")
			Write-Verbose " [Get-InstalledPrograms] :: End Begin"
			
		}
		process
		{
			
			Write-Verbose " [Get-InstalledPrograms] :: Start Process"
			if ($ComputerName -match "(.*)(\$)$")
			{
				$ComputerName = $ComputerName -replace "(.*)(\$)$", '$1'
				
			}
			Write-Verbose " [Get-InstalledPrograms] :: `$ComputerName - $ComputerName"
			Write-Verbose " [Get-InstalledPrograms] :: Testing Connectivity"
			if (Test-Host $ComputerName -TCPPort 135)
			{
				try
				{
					$RegKey = Get-RegistryKey -Path "HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall" -ComputerName $ComputerName
					foreach ($key in $RegKey.GetSubKeyNames())
					{
						$SubKey = $RegKey.OpenSubKey($key)
						if ($SubKey.GetValue("DisplayName"))
						{
							$myobj = @{
								Name = $SubKey.GetValue("DisplayName")
								Version = $SubKey.GetValue("DisplayVersion")
								Vendor = $SubKey.GetValue("Publisher")
							}
							$obj = New-Object PSObject -Property $myobj
							$obj.PSTypeNames.Clear()
							$obj.PSTypeNames.Add('BSonPosh.SoftwareInfo')
							$obj
						}
					}
				}
				catch
				{
					Write-Host " Host [$ComputerName] Failed with Error: $($Error[0])" -ForegroundColor Red
				}
			}
			else
			{
				Write-Host " Host [$ComputerName] Failed Connectivity Test " -ForegroundColor Red
			}
			Write-Verbose " [Get-InstalledPrograms] :: End Process"
			
		}
	}
	
	#endregion 
	
	#region Get-RegistryHive 
	
	function Get-RegistryHive
	{
		param ($HiveName)
		Switch -regex ($HiveName)
		{
			"^(HKCR|ClassesRoot|HKEY_CLASSES_ROOT)$"               { [Microsoft.Win32.RegistryHive]"ClassesRoot"; continue }
			"^(HKCU|CurrentUser|HKEY_CURRENTt_USER)$"              { [Microsoft.Win32.RegistryHive]"CurrentUser"; continue }
			"^(HKLM|LocalMachine|HKEY_LOCAL_MACHINE)$"          { [Microsoft.Win32.RegistryHive]"LocalMachine"; continue }
			"^(HKU|Users|HKEY_USERS)$"                          { [Microsoft.Win32.RegistryHive]"Users"; continue }
			"^(HKCC|CurrentConfig|HKEY_CURRENT_CONFIG)$"          { [Microsoft.Win32.RegistryHive]"CurrentConfig"; continue }
			"^(HKPD|PerformanceData|HKEY_PERFORMANCE_DATA)$"    { [Microsoft.Win32.RegistryHive]"PerformanceData"; continue }
			Default { 1; continue }
		}
	}
	
	#endregion 
	
	#region Get-RegistryKey 
	
	function Get-RegistryKey
	{
		
		    <#
		        .Synopsis 
		            Gets the registry key provide by Path.
		            
		        .Description
		            Gets the registry key provide by Path.
		                        
		        .Parameter Path 
		            Path to the key.
		            
		        .Parameter ComputerName 
		            Computer to get the registry key from.
		            
		        .Parameter Recurse 
		            Recursively returns registry keys starting from the Path.
		        
		        .Parameter ReadWrite
		            Returns the Registry key in Read Write mode.
		            
		        .Example
		            Get-registrykey HKLM\Software\Adobe
		            Description
		            -----------
		            Returns the Registry key for HKLM\Software\Adobe
		            
		        .Example
		            Get-registrykey HKLM\Software\Adobe -ComputerName MyServer1
		            Description
		            -----------
		            Returns the Registry key for HKLM\Software\Adobe on MyServer1
		        
		        .Example
		            Get-registrykey HKLM\Software\Adobe -Recurse
		            Description
		            -----------
		            Returns the Registry key for HKLM\Software\Adobe and all child keys
		                    
		        .OUTPUTS
		            Microsoft.Win32.RegistryKey
		            
		        .INPUTS
		            System.String
		            
		        .Link
		            New-RegistryKey
		            Remove-RegistryKey
		            Test-RegistryKey
		        .Notes
		            NAME:      Get-RegistryKey
		            AUTHOR:    bsonposh
		            Website:   http://www.bsonposh.com
		            Version:   1
		            #Requires -Version 2.0
		    #>
		
		[Cmdletbinding()]
		Param (
			
			[Parameter(mandatory = $true)]
			[string]$Path,
			[Alias("Server")]
			[Parameter(ValueFromPipeline = $true)]
			[string]$ComputerName = $Env:ComputerName,
			[Parameter()]
			[switch]$Recurse,
			[Alias("RW")]
			[Parameter()]
			[switch]$ReadWrite
			
		)
		
		Begin
		{
			
			Write-Verbose " [Get-RegistryKey] :: Start Begin"
			Write-Verbose " [Get-RegistryKey] :: `$Path = $Path"
			Write-Verbose " [Get-RegistryKey] :: Getting `$Hive and `$KeyPath from $Path "
			$PathParts = $Path -split "\\|/", 0, "RegexMatch"
			$Hive = $PathParts[0]
			$KeyPath = $PathParts[1..$PathParts.count] -join "\"
			Write-Verbose " [Get-RegistryKey] :: `$Hive = $Hive"
			Write-Verbose " [Get-RegistryKey] :: `$KeyPath = $KeyPath"
			
			Write-Verbose " [Get-RegistryKey] :: End Begin"
			
		}
		
		Process
		{
			
			Write-Verbose " [Get-RegistryKey] :: Start Process"
			Write-Verbose " [Get-RegistryKey] :: `$ComputerName = $ComputerName"
			
			$RegHive = Get-RegistryHive $hive
			
			if ($RegHive -eq 1)
			{
				Write-Host "Invalid Path: $Path, Registry Hive [$hive] is invalid!" -ForegroundColor Red
			}
			else
			{
				Write-Verbose " [Get-RegistryKey] :: `$RegHive = $RegHive"
				
				$BaseKey = [Microsoft.Win32.RegistryKey]::OpenRemoteBaseKey($RegHive, $ComputerName)
				Write-Verbose " [Get-RegistryKey] :: `$BaseKey = $BaseKey"
				
				if ($ReadWrite)
				{
					try
					{
						$Key = $BaseKey.OpenSubKey($KeyPath, $true)
						$Key = $Key | Add-Member -Name "ComputerName" -MemberType NoteProperty -Value $ComputerName -PassThru
						$Key = $Key | Add-Member -Name "Hive" -MemberType NoteProperty -Value $RegHive -PassThru
						$Key = $Key | Add-Member -Name "Path" -MemberType NoteProperty -Value $KeyPath -PassThru
						$Key.PSTypeNames.Clear()
						$Key.PSTypeNames.Add('BSonPosh.Registry.Key')
						$Key
					}
					catch
					{
						Write-Verbose " [Get-RegistryKey] ::  ERROR :: Unable to Open Key:$KeyPath in $KeyPath with RW Access"
					}
					
				}
				else
				{
					try
					{
						$Key = $BaseKey.OpenSubKey("$KeyPath")
						if ($Key)
						{
							$Key = $Key | Add-Member -Name "ComputerName" -MemberType NoteProperty -Value $ComputerName -PassThru
							$Key = $Key | Add-Member -Name "Hive" -MemberType NoteProperty -Value $RegHive -PassThru
							$Key = $Key | Add-Member -Name "Path" -MemberType NoteProperty -Value $KeyPath -PassThru
							$Key.PSTypeNames.Clear()
							$Key.PSTypeNames.Add('BSonPosh.Registry.Key')
							$Key
						}
					}
					catch
					{
						Write-Verbose " [Get-RegistryKey] ::  ERROR :: Unable to Open SubKey:$Name in $KeyPath"
					}
				}
				
				if ($Recurse)
				{
					Write-Verbose " [Get-RegistryKey] :: Recurse Passed: Processing Subkeys of [$($Key.Name)]"
					$Key
					$SubKeyNames = $Key.GetSubKeyNames()
					foreach ($Name in $SubKeyNames)
					{
						try
						{
							$SubKey = $Key.OpenSubKey($Name)
							if ($SubKey.GetSubKeyNames())
							{
								Write-Verbose " [Get-RegistryKey] :: Calling [Get-RegistryKey] for [$($SubKey.Name)]"
								Get-RegistryKey -ComputerName $ComputerName -Path $SubKey.Name -Recurse
							}
							else
							{
								Get-RegistryKey -ComputerName $ComputerName -Path $SubKey.Name
							}
						}
						catch
						{
							Write-Verbose " [Get-RegistryKey] ::  ERROR :: Write-Host Unable to Open SubKey:$Name in $($Key.Name)"
						}
					}
				}
			}
			Write-Verbose " [Get-RegistryKey] :: End Process"
			
		}
	}
	
	#endregion 
	
	#region Get-RegistryValue 
	
	function Get-RegistryValue
	{
		
		    <#
		        .Synopsis 
		            Get the value for given the registry value.
		            
		        .Description
		            Get the value for given the registry value.
		                        
		        .Parameter Path 
		            Path to the key that contains the value.
		            
		        .Parameter Name 
		            Name of the Value to check.
		            
		        .Parameter ComputerName 
		            Computer to get value.
		            
		        .Parameter Recurse 
		            Recursively gets the Values on the given key.
		            
		        .Parameter Default 
		            Returns the default value for the Value.
		        
		        .Example
		            Get-RegistryValue HKLM\SOFTWARE\Adobe\SwInstall -Name State 
		            Description
		            -----------
		            Returns value of State under HKLM\SOFTWARE\Adobe\SwInstall.
		            
		        .Example
		            Get-RegistryValue HKLM\Software\Adobe -Name State -ComputerName MyServer1
		            Description
		            -----------
		            Returns value of State under HKLM\SOFTWARE\Adobe\SwInstall on MyServer1
		            
		        .Example
		            Get-RegistryValue HKLM\Software\Adobe -Recurse
		            Description
		            -----------
		            Returns all the values under HKLM\SOFTWARE\Adobe.
		    
		        .Example
		            Get-RegistryValue HKLM\Software\Adobe -ComputerName MyServer1 -Recurse
		            Description
		            -----------
		            Returns all the values under HKLM\SOFTWARE\Adobe on MyServer1
		            
		        .Example
		            Get-RegistryValue HKLM\Software\Adobe -Default
		            Description
		            -----------
		            Returns the default value for HKLM\SOFTWARE\Adobe.
		                    
		        .OUTPUTS
		            PSCustomObject
		            
		        .INPUTS
		            System.String
		            
		        .Link
		            New-RegistryValue
		            Remove-RegistryValue
		            Test-RegistryValue
		            
		        .Notes    
		            NAME:      Get-RegistryValue
		            AUTHOR:    bsonposh
		            Website:   http://www.bsonposh.com
		            Version:   1
		            #Requires -Version 2.0
		    #>
		
		[Cmdletbinding()]
		Param (
			[Parameter(mandatory = $true)]
			[string]$Path,
			[Parameter()]
			[string]$Name,
			[Alias("dnsHostName")]
			[Parameter(ValueFromPipeline = $true)]
			[string]$ComputerName = $Env:ComputerName,
			[Parameter()]
			[switch]$Recurse,
			[Parameter()]
			[switch]$Default
		)
		
		Process
		{
			
			Write-Verbose " [Get-RegistryValue] :: Begin Process"
			Write-Verbose " [Get-RegistryValue] :: Calling Get-RegistryKey -Path $path -ComputerName $ComputerName"
			
			if ($Recurse)
			{
				$Keys = Get-RegistryKey -Path $path -ComputerName $ComputerName -Recurse
				foreach ($Key in $Keys)
				{
					if ($Name)
					{
						try
						{
							Write-Verbose " [Get-RegistryValue] :: Getting Value for [$Name]"
							$myobj = @{ } #| Select ComputerName,Name,Value,Type,Path
							$myobj.ComputerName = $ComputerName
							$myobj.Name = $Name
							$myobj.value = $Key.GetValue($Name)
							$myobj.Type = $Key.GetValueKind($Name)
							$myobj.path = $Key
							
							$obj = New-Object PSCustomObject -Property $myobj
							$obj.PSTypeNames.Clear()
							$obj.PSTypeNames.Add('BSonPosh.Registry.Value')
							$obj
						}
						catch
						{
							Write-Verbose " [Get-RegistryValue] ::  ERROR :: Unable to Get Value for:$Name in $($Key.Name)"
						}
						
					}
					elseif ($Default)
					{
						try
						{
							Write-Verbose " [Get-RegistryValue] :: Getting Value for [(Default)]"
							$myobj = @{ } #"" | Select ComputerName,Name,Value,Type,Path
							$myobj.ComputerName = $ComputerName
							$myobj.Name = "(Default)"
							$myobj.value = if ($Key.GetValue("")) { $Key.GetValue("") }
							else { "EMPTY" }
							$myobj.Type = if ($Key.GetValue("")) { $Key.GetValueKind("") }
							else { "N/A" }
							$myobj.path = $Key
							
							$obj = New-Object PSCustomObject -Property $myobj
							$obj.PSTypeNames.Clear()
							$obj.PSTypeNames.Add('BSonPosh.Registry.Value')
							$obj
						}
						catch
						{
							Write-Verbose " [Get-RegistryValue] ::  ERROR :: Unable to Get Value for:(Default) in $($Key.Name)"
						}
					}
					else
					{
						try
						{
							Write-Verbose " [Get-RegistryValue] :: Getting all Values for [$Key]"
							foreach ($ValueName in $Key.GetValueNames())
							{
								Write-Verbose " [Get-RegistryValue] :: Getting all Value for [$ValueName]"
								$myobj = @{ } #"" | Select ComputerName,Name,Value,Type,Path
								$myobj.ComputerName = $ComputerName
								$myobj.Name = if ($ValueName -match "^$") { "(Default)" }
								else { $ValueName }
								$myobj.value = $Key.GetValue($ValueName)
								$myobj.Type = $Key.GetValueKind($ValueName)
								$myobj.path = $Key
								
								$obj = New-Object PSCustomObject -Property $myobj
								$obj.PSTypeNames.Clear()
								$obj.PSTypeNames.Add('BSonPosh.Registry.Value')
								$obj
							}
						}
						catch
						{
							Write-Verbose " [Get-RegistryValue] ::  ERROR :: Unable to Get Value for:$ValueName in $($Key.Name)"
						}
					}
				}
			}
			else
			{
				$Key = Get-RegistryKey -Path $path -ComputerName $ComputerName
				Write-Verbose " [Get-RegistryValue] :: Get-RegistryKey returned $Key"
				if ($Name)
				{
					try
					{
						Write-Verbose " [Get-RegistryValue] :: Getting Value for [$Name]"
						$myobj = @{ } # | Select ComputerName,Name,Value,Type,Path
						$myobj.ComputerName = $ComputerName
						$myobj.Name = $Name
						$myobj.value = $Key.GetValue($Name)
						$myobj.Type = $Key.GetValueKind($Name)
						$myobj.path = $Key
						
						$obj = New-Object PSCustomObject -Property $myobj
						$obj.PSTypeNames.Clear()
						$obj.PSTypeNames.Add('BSonPosh.Registry.Value')
						$obj
					}
					catch
					{
						Write-Verbose " [Get-RegistryValue] ::  ERROR :: Unable to Get Value for:$Name in $($Key.Name)"
					}
				}
				elseif ($Default)
				{
					try
					{
						Write-Verbose " [Get-RegistryValue] :: Getting Value for [(Default)]"
						$myobj = @{ } #"" | Select ComputerName,Name,Value,Type,Path
						$myobj.ComputerName = $ComputerName
						$myobj.Name = "(Default)"
						$myobj.value = if ($Key.GetValue("")) { $Key.GetValue("") }
						else { "EMPTY" }
						$myobj.Type = if ($Key.GetValue("")) { $Key.GetValueKind("") }
						else { "N/A" }
						$myobj.path = $Key
						
						$obj = New-Object PSCustomObject -Property $myobj
						$obj.PSTypeNames.Clear()
						$obj.PSTypeNames.Add('BSonPosh.Registry.Value')
						$obj
					}
					catch
					{
						Write-Verbose " [Get-RegistryValue] ::  ERROR :: Unable to Get Value for:$Name in $($Key.Name)"
					}
				}
				else
				{
					Write-Verbose " [Get-RegistryValue] :: Getting all Values for [$Key]"
					foreach ($ValueName in $Key.GetValueNames())
					{
						Write-Verbose " [Get-RegistryValue] :: Getting all Value for [$ValueName]"
						$myobj = @{ } #"" | Select ComputerName,Name,Value,Type,Path
						$myobj.ComputerName = $ComputerName
						$myobj.Name = if ($ValueName -match "^$") { "(Default)" }
						else { $ValueName }
						$myobj.value = $Key.GetValue($ValueName)
						$myobj.Type = $Key.GetValueKind($ValueName)
						$myobj.path = $Key
						
						$obj = New-Object PSCustomObject -Property $myobj
						$obj.PSTypeNames.Clear()
						$obj.PSTypeNames.Add('BSonPosh.Registry.Value')
						$obj
					}
				}
			}
			
			Write-Verbose " [Get-RegistryValue] :: End Process"
			
		}
	}
	
	#endregion 
	
	#region New-RegistryKey 
	
	function New-RegistryKey
	{
		
		    <#
		        .Synopsis 
		            Creates a new key in the provide by Path.
		            
		        .Description
		            Creates a new key in the provide by Path.
		                        
		        .Parameter Path 
		            Path to create the key in.
		            
		        .Parameter ComputerName 
		            Computer to the create registry key on.
		            
		        .Parameter Name 
		            Name of the Key to create
		        
		        .Example
		            New-registrykey HKLM\Software\Adobe -Name DeleteMe
		            Description
		            -----------
		            Creates a key called DeleteMe under HKLM\Software\Adobe
		            
		        .Example
		            New-registrykey HKLM\Software\Adobe -Name DeleteMe -ComputerName MyServer1
		            Description
		            -----------
		            Creates a key called DeleteMe under HKLM\Software\Adobe on MyServer1
		                    
		        .OUTPUTS
		            Microsoft.Win32.RegistryKey
		            
		        .INPUTS
		            System.String
		            
		        .Link
		            Get-RegistryKey
		            Remove-RegistryKey
		            Test-RegistryKey
		            
		        NAME:      New-RegistryKey
		        AUTHOR:    bsonposh
		        Website:   http://www.bsonposh.com
		        Version:   1
		        #Requires -Version 2.0
		    #>
		[Cmdletbinding(SupportsShouldProcess = $true)]
		Param (
			[Parameter(mandatory = $true)]
			[string]$Path,
			[Parameter(mandatory = $true)]
			[string]$Name,
			[Alias("Server")]
			[Parameter(ValueFromPipeline = $true)]
			[string]$ComputerName = $Env:ComputerName
		)
		Begin
		{
			
			Write-Verbose " [New-RegistryKey] :: Start Begin"
			$ReadWrite = [Microsoft.Win32.RegistryKeyPermissionCheck]::ReadWriteSubTree
			
			Write-Verbose " [New-RegistryKey] :: `$Path = $Path"
			Write-Verbose " [New-RegistryKey] :: Getting `$Hive and `$KeyPath from $Path "
			$PathParts = $Path -split "\\|/", 0, "RegexMatch"
			$Hive = $PathParts[0]
			$KeyPath = $PathParts[1..$PathParts.count] -join "\"
			Write-Verbose " [New-RegistryKey] :: `$Hive = $Hive"
			Write-Verbose " [New-RegistryKey] :: `$KeyPath = $KeyPath"
			
			Write-Verbose " [New-RegistryKey] :: End Begin"
			
		}
		Process
		{
			
			Write-Verbose " [Get-RegistryKey] :: Start Process"
			Write-Verbose " [Get-RegistryKey] :: `$ComputerName = $ComputerName"
			
			$RegHive = Get-RegistryHive $hive
			
			if ($RegHive -eq 1)
			{
				Write-Host "Invalid Path: $Path, Registry Hive [$hive] is invalid!" -ForegroundColor Red
			}
			else
			{
				Write-Verbose " [Get-RegistryKey] :: `$RegHive = $RegHive"
				$BaseKey = [Microsoft.Win32.RegistryKey]::OpenRemoteBaseKey($RegHive, $ComputerName)
				Write-Verbose " [Get-RegistryKey] :: `$BaseKey = $BaseKey"
				$Key = $BaseKey.OpenSubKey($KeyPath, $True)
				if ($PSCmdlet.ShouldProcess($ComputerName, "Creating Key [$Name] under $Path"))
				{
					$Key.CreateSubKey($Name, $ReadWrite)
				}
			}
			Write-Verbose " [Get-RegistryKey] :: End Process"
			
		}
	}
	
	#endregion 
	
	#region New-RegistryValue 
	
	function New-RegistryValue
	{
		
		    <#
		        .Synopsis 
		            Create a value under the registry key.
		            
		        .Description
		            Create a value under the registry key.
		                        
		        .Parameter Path 
		            Path to the key.
		            
		        .Parameter Name 
		            Name of the Value to create.
		            
		        .Parameter Value 
		            Value to for the new Value.
		            
		        .Parameter Type
		            Type for the new Value. Valid Types: Unknown, String (default,) ExpandString, Binary, DWord, MultiString, a
		    nd Qword
		            
		        .Parameter ComputerName 
		            Computer to create the Value on.
		            
		        .Example
		            New-RegistryValue HKLM\SOFTWARE\Adobe\MyKey -Name State -Value "Hi There"
		            Description
		            -----------
		            Creates the Value State and sets the value to "Hi There" under HKLM\SOFTWARE\Adobe\MyKey.
		            
		        .Example
		            New-RegistryValue HKLM\SOFTWARE\Adobe\MyKey -Name State -Value 0 -ComputerName MyServer1
		            Description
		            -----------
		            Creates the Value State and sets the value to "Hi There" under HKLM\SOFTWARE\Adobe\MyKey on MyServer1.
		            
		        .Example
		            New-RegistryValue HKLM\SOFTWARE\Adobe\MyKey -Name MyDWord -Value 0 -Type DWord
		            Description
		            -----------
		            Creates the DWORD Value MyDWord and sets the value to 0 under HKLM\SOFTWARE\Adobe\MyKey.
		                    
		        .OUTPUTS
		            System.Boolean
		            
		        .INPUTS
		            System.String
		            
		        .Link
		            New-RegistryValue
		            Remove-RegistryValue
		            Get-RegistryValue
		            
		        NAME:      Test-RegistryValue
		        AUTHOR:    bsonposh
		        Website:   http://www.bsonposh.com
		        Version:   1
		        #Requires -Version 2.0
		    #>
		
		[Cmdletbinding(SupportsShouldProcess = $true)]
		Param (
			[Parameter(mandatory = $true)]
			[string]$Path,
			[Parameter(mandatory = $true)]
			[string]$Name,
			[Parameter()]
			[string]$Value,
			[Parameter()]
			[string]$Type,
			[Alias("dnsHostName")]
			[Parameter(ValueFromPipeline = $true)]
			[string]$ComputerName = $Env:ComputerName
		)
		Begin
		{
			
			Write-Verbose " [New-RegistryValue] :: Start Begin"
			Write-Verbose " [New-RegistryValue] :: `$Path = $Path"
			Write-Verbose " [New-RegistryValue] :: `$Name = $Name"
			Write-Verbose " [New-RegistryValue] :: `$Value = $Value"
			
			Switch ($Type)
			{
				"Unknown"       { $ValueType = [Microsoft.Win32.RegistryValueKind]::Unknown; continue }
				"String"        { $ValueType = [Microsoft.Win32.RegistryValueKind]::String; continue }
				"ExpandString"  { $ValueType = [Microsoft.Win32.RegistryValueKind]::ExpandString; continue }
				"Binary"        { $ValueType = [Microsoft.Win32.RegistryValueKind]::Binary; continue }
				"DWord"         { $ValueType = [Microsoft.Win32.RegistryValueKind]::DWord; continue }
				"MultiString"   { $ValueType = [Microsoft.Win32.RegistryValueKind]::MultiString; continue }
				"QWord"         { $ValueType = [Microsoft.Win32.RegistryValueKind]::QWord; continue }
				default { $ValueType = [Microsoft.Win32.RegistryValueKind]::String; continue }
			}
			Write-Verbose " [New-RegistryValue] :: `$Type = $Type"
			Write-Verbose " [New-RegistryValue] :: End Begin"
			
		}
		
		Process
		{
			
			if (Test-RegistryValue -Path $path -Name $Name -ComputerName $ComputerName)
			{
				"Registry value already exist"
			}
			else
			{
				Write-Verbose " [New-RegistryValue] :: Start Process"
				Write-Verbose " [New-RegistryValue] :: Calling Get-RegistryKey -Path $path -ComputerName $ComputerName"
				$Key = Get-RegistryKey -Path $path -ComputerName $ComputerName -ReadWrite
				Write-Verbose " [New-RegistryValue] :: Get-RegistryKey returned $Key"
				Write-Verbose " [New-RegistryValue] :: Setting Value for [$Name]"
				if ($PSCmdlet.ShouldProcess($ComputerName, "Creating Value [$Name] under $Path with value [$Value]"))
				{
					if ($Value)
					{
						$Key.SetValue($Name, $Value, $ValueType)
					}
					else
					{
						$Key.SetValue($Name, $ValueType)
					}
					Write-Verbose " [New-RegistryValue] :: Returning New Key: Get-RegistryValue -Path $path -Name $Name -ComputerName $ComputerName"
					Get-RegistryValue -Path $path -Name $Name -ComputerName $ComputerName
				}
			}
			Write-Verbose " [New-RegistryValue] :: End Process"
			
		}
	}
	
	#endregion 
	
	#region Remove-RegistryKey 
	
	function Remove-RegistryKey
	{
		
		    <#
		        .Synopsis 
		            Removes a new key in the provide by Path.
		            
		        .Description
		            Removes a new key in the provide by Path.
		                        
		        .Parameter Path 
		            Path to remove the registry key from.
		            
		        .Parameter ComputerName 
		            Computer to remove the registry key from.
		            
		        .Parameter Name 
		            Name of the registry key to remove.
		            
		        .Parameter Recurse 
		            Recursively removes registry key and all children from path.
		        
		        .Example
		            Remove-registrykey HKLM\Software\Adobe -Name DeleteMe
		            Description
		            -----------
		            Removes the registry key called DeleteMe under HKLM\Software\Adobe
		            
		        .Example
		            Remove-RegistryKey HKLM\Software\Adobe -Name DeleteMe -ComputerName MyServer1
		            Description
		            -----------
		            Removes the key called DeleteMe under HKLM\Software\Adobe on MyServer1
		            
		        .Example
		            Remove-RegistryKey HKLM\Software\Adobe -Name DeleteMe -ComputerName MyServer1 -Recurse
		            Description
		            -----------
		            Removes the key called DeleteMe under HKLM\Software\Adobe on MyServer1 and all child keys.
		                    
		        .OUTPUTS
		            $null
		            
		        .INPUTS
		            System.String
		            
		        .Link
		            Get-RegistryKey
		            New-RegistryKey
		            Test-RegistryKey
		            
		        .Notes
		        NAME:      Remove-RegistryKey
		        AUTHOR:    bsonposh
		        Website:   http://www.bsonposh.com
		        Version:   1
		        #Requires -Version 2.0
		    #>
		
		[Cmdletbinding(SupportsShouldProcess = $true)]
		Param (
			
			[Parameter(mandatory = $true)]
			[string]$Path,
			[Parameter(mandatory = $true)]
			[string]$Name,
			[Alias("Server")]
			[Parameter(ValueFromPipeline = $true)]
			[string]$ComputerName = $Env:ComputerName,
			[Parameter()]
			[switch]$Recurse
		)
		Begin
		{
			
			Write-Verbose " [Remove-RegistryKey] :: Start Begin"
			
			Write-Verbose " [Remove-RegistryKey] :: `$Path = $Path"
			Write-Verbose " [Remove-RegistryKey] :: Getting `$Hive and `$KeyPath from $Path "
			$PathParts = $Path -split "\\|/", 0, "RegexMatch"
			$Hive = $PathParts[0]
			$KeyPath = $PathParts[1..$PathParts.count] -join "\"
			Write-Verbose " [Remove-RegistryKey] :: `$Hive = $Hive"
			Write-Verbose " [Remove-RegistryKey] :: `$KeyPath = $KeyPath"
			
			Write-Verbose " [Remove-RegistryKey] :: End Begin"
			
		}
		
		Process
		{
			
			Write-Verbose " [Remove-RegistryKey] :: Start Process"
			Write-Verbose " [Remove-RegistryKey] :: `$ComputerName = $ComputerName"
			
			if (Test-RegistryKey -Path $path\$name -ComputerName $ComputerName)
			{
				$RegHive = Get-RegistryHive $hive
				
				if ($RegHive -eq 1)
				{
					Write-Host "Invalid Path: $Path, Registry Hive [$hive] is invalid!" -ForegroundColor Red
				}
				else
				{
					Write-Verbose " [Remove-RegistryKey] :: `$RegHive = $RegHive"
					$BaseKey = [Microsoft.Win32.RegistryKey]::OpenRemoteBaseKey($RegHive, $ComputerName)
					Write-Verbose " [Remove-RegistryKey] :: `$BaseKey = $BaseKey"
					
					$Key = $BaseKey.OpenSubKey($KeyPath, $True)
					
					if ($PSCmdlet.ShouldProcess($ComputerName, "Deleteing Key [$Name]"))
					{
						if ($Recurse)
						{
							Write-Verbose " [Remove-RegistryKey] :: Calling DeleteSubKeyTree($Name)"
							$Key.DeleteSubKeyTree($Name)
						}
						else
						{
							Write-Verbose " [Remove-RegistryKey] :: Calling DeleteSubKey($Name)"
							$Key.DeleteSubKey($Name)
						}
					}
				}
			}
			else
			{
				"Key [$path\$name] does not exist"
			}
			Write-Verbose " [Remove-RegistryKey] :: End Process"
			
		}
	}
	
	#endregion 
	
	#region Remove-RegistryValue 
	
	function Remove-RegistryValue
	{
		
		    <#
		        .Synopsis 
		            Removes the value.
		            
		        .Description
		            Removes the value.
		                        
		        .Parameter Path 
		            Path to the key that contains the value.
		            
		        .Parameter Name 
		            Name of the Value to Remove.
		    
		        .Parameter ComputerName 
		            Computer to remove value from.
		            
		        .Example
		            Remove-RegistryValue HKLM\SOFTWARE\Adobe\MyKey -Name State
		            Description
		            -----------
		            Removes the value STATE under HKLM\SOFTWARE\Adobe\MyKey.
		            
		        .Example
		            Remove-RegistryValue HKLM\Software\Adobe\MyKey -Name State -ComputerName MyServer1
		            Description
		            -----------
		            Removes the value STATE under HKLM\SOFTWARE\Adobe\MyKey on MyServer1.
		                    
		        .OUTPUTS
		            $null
		            
		        .INPUTS
		            System.String
		            
		        .Link
		            New-RegistryValue
		            Test-RegistryValue
		            Get-RegistryValue
		            Set-RegistryValue
		            
		        NAME:      Remove-RegistryValue
		        AUTHOR:    bsonposh
		        Website:   http://www.bsonposh.com
		        Version:   1
		        #Requires -Version 2.0
		    #>
		
		[Cmdletbinding(SupportsShouldProcess = $true)]
		Param (
			[Parameter(mandatory = $true)]
			[string]$Path,
			[Parameter(mandatory = $true)]
			[string]$Name,
			[Alias("dnsHostName")]
			[Parameter(ValueFromPipeline = $true)]
			[string]$ComputerName = $Env:ComputerName
		)
		Begin
		{
			
			Write-Verbose " [Remove-RegistryValue] :: Start Begin"
			
			Write-Verbose " [Remove-RegistryValue] :: `$Path = $Path"
			Write-Verbose " [Remove-RegistryValue] :: `$Name = $Name"
			
			Write-Verbose " [Remove-RegistryValue] :: End Begin"
			
		}
		
		Process
		{
			
			if (Test-RegistryValue -Path $path -Name $Name -ComputerName $ComputerName)
			{
				Write-Verbose " [Remove-RegistryValue] :: Start Process"
				Write-Verbose " [Remove-RegistryValue] :: Calling Get-RegistryKey -Path $path -ComputerName $ComputerName"
				$Key = Get-RegistryKey -Path $path -ComputerName $ComputerName -ReadWrite
				Write-Verbose " [Remove-RegistryValue] :: Get-RegistryKey returned $Key"
				Write-Verbose " [Remove-RegistryValue] :: Setting Value for [$Name]"
				if ($PSCmdlet.ShouldProcess($ComputerName, "Deleting Value [$Name] under $Path"))
				{
					$Key.DeleteValue($Name)
				}
			}
			else
			{
				"Registry Value is already gone"
			}
			
			Write-Verbose " [Remove-RegistryValue] :: End Process"
			
		}
	}
	
	#endregion 
	
	#region Search-Registry 
	
	function Search-Registry
	{
		
		    <#
		        .Synopsis 
		            Searchs the Registry.
		            
		        .Description
		            Searchs the Registry.
		                        
		        .Parameter Filter 
		            The RegEx filter you want to search for.
		            
		        .Parameter Name 
		            Name of the Key or Value you want to search for.
		        
		        .Parameter Value
		            Value to search for (Registry Values only.)
		            
		        .Parameter Path
		            Base of the Search. Should be in this format: "Software\Microsoft\..." See the Examples for specific exampl
		    es.
		            
		        .Parameter Hive
		            The Base Hive to search in (Default to LocalMachine.)
		            
		        .Parameter ComputerName 
		            Computer to search.
		            
		        .Parameter KeyOnly
		            Only returns Registry Keys. Not valid with -value parameter.
		            
		        .Example
		            Search-Registry -Hive HKLM -Filter "Powershell" -Path "SOFTWARE\Clients"
		            Description
		            -----------
		            Searchs the Registry for Keys or Values that match 'Powershell" in path "SOFTWARE\Clients"
		            
		        .Example
		            Search-Registry -Hive HKLM -Filter "Powershell" -Path "SOFTWARE\Clients" -computername MyServer1
		            Description
		            -----------
		            Searchs the Registry for Keys or Values that match 'Powershell" in path "SOFTWARE\Clients" on MyServer1
		            
		        .Example
		            Search-Registry -Hive HKLM -Name "Powershell" -Path "SOFTWARE\Clients"
		            Description
		            -----------
		            Searchs the Registry keys and values with name 'Powershell' in "SOFTWARE\Clients"
		            
		        .Example
		            Search-Registry -Hive HKLM -Name "Powershell" -Path "SOFTWARE\Clients" -KeyOnly
		            Description
		            -----------
		            Searchs the Registry keys with name 'Powershell' in "SOFTWARE\Clients"
		        
		        .Example
		            Search-Registry -Hive HKLM -Value "Powershell" -Path "SOFTWARE\Clients"
		            Description
		            -----------
		            Searchs the Registry Values with Value of 'Powershell' in "SOFTWARE\Clients"
		            
		        .OUTPUTS
		            Microsoft.Win32.RegistryKey
		            
		        .INPUTS
		            System.String
		            
		        .Link
		            Get-RegistryKey
		            Get-RegistryValue
		            Test-RegistryKey
		        
		        .Notes
		            NAME:      Search-Registry
		            AUTHOR:    bsonposh
		            Website:   http://www.bsonposh.com
		            Version:   1
		            #Requires -Version 2.0
		    #>
		
		[Cmdletbinding(DefaultParameterSetName = "ByFilter")]
		Param (
			[Parameter(ParameterSetName = "ByFilter", Position = 0)]
			[string]$Filter = ".*",
			[Parameter(ParameterSetName = "ByName", Position = 0)]
			[string]$Name,
			[Parameter(ParameterSetName = "ByValue", Position = 0)]
			[string]$Value,
			[Parameter()]
			[string]$Path,
			[Parameter()]
			[string]$Hive = "LocalMachine",
			[alias('dnsHostName')]
			[Parameter(ValueFromPipelineByPropertyName = $true, ValueFromPipeline = $true)]
			[string]$ComputerName = $Env:COMPUTERNAME,
			[Parameter()]
			[switch]$KeyOnly
		)
		Begin
		{
			
			Write-Verbose " [Search-Registry] :: Start Begin"
			
			Write-Verbose " [Search-Registry] :: Active Parameter Set $($PSCmdlet.ParameterSetName)"
			switch ($PSCmdlet.ParameterSetName)
			{
				"ByFilter"    { Write-Verbose " [Search-Registry] :: `$Filter = $Filter" }
				"ByName"    { Write-Verbose " [Search-Registry] :: `$Name = $Name" }
				"ByValue"    { Write-Verbose " [Search-Registry] :: `$Value = $Value" }
			}
			$RegHive = Get-RegistryHive $Hive
			Write-Verbose " [Search-Registry] :: `$Hive = $RegHive"
			Write-Verbose " [Search-Registry] :: `$KeyOnly = $KeyOnly"
			
			Write-Verbose " [Search-Registry] :: End Begin"
			
		}
		
		Process
		{
			
			Write-Verbose " [Search-Registry] :: Start Process"
			
			Write-Verbose " [Search-Registry] :: `$ComputerName = $ComputerName"
			switch ($PSCmdlet.ParameterSetName)
			{
				"ByFilter"    {
					if ($KeyOnly)
					{
						if ($Path -and (Test-RegistryKey "$RegHive\$Path"))
						{
							Get-RegistryKey -Path "$RegHive\$Path" -ComputerName $ComputerName -Recurse | ?{ $_.Name -match "$Filter" }
						}
						else
						{
							$BaseKey = [Microsoft.Win32.RegistryKey]::OpenRemoteBaseKey($RegHive, $ComputerName)
							foreach ($SubKeyName in $BaseKey.GetSubKeyNames())
							{
								try
								{
									$SubKey = $BaseKey.OpenSubKey($SubKeyName, $true)
									Get-RegistryKey -Path $SubKey.Name -ComputerName $ComputerName -Recurse | ?{ $_.Name -match "$Filter" }
								}
								catch
								{
									Write-Host "Access Error on Key [$SubKeyName]... skipping."
								}
							}
						}
					}
					else
					{
						if ($Path -and (Test-RegistryKey "$RegHive\$Path"))
						{
							Get-RegistryKey -Path "$RegHive\$Path" -ComputerName $ComputerName -Recurse | ?{ $_.Name -match "$Filter" }
							Get-RegistryValue -Path "$RegHive\$Path" -ComputerName $ComputerName -Recurse | ?{ $_.Name -match "$Filter" }
						}
						else
						{
							$BaseKey = [Microsoft.Win32.RegistryKey]::OpenRemoteBaseKey($RegHive, $ComputerName)
							foreach ($SubKeyName in $BaseKey.GetSubKeyNames())
							{
								try
								{
									$SubKey = $BaseKey.OpenSubKey($SubKeyName, $true)
									Get-RegistryKey -Path $SubKey.Name -ComputerName $ComputerName -Recurse | ?{ $_.Name -match "$Filter" }
									Get-RegistryValue -Path $SubKey.Name -ComputerName $ComputerName -Recurse | ?{ $_.Name -match "$Filter" }
								}
								catch
								{
									Write-Host "Access Error on Key [$SubKeyName]... skipping."
								}
							}
						}
					}
				}
				"ByName"    {
					if ($KeyOnly)
					{
						if ($Path -and (Test-RegistryKey "$RegHive\$Path"))
						{
							$NameFilter = "^.*\\{0}$" -f $Name
							Get-RegistryKey -Path "$RegHive\$Path" -ComputerName $ComputerName -Recurse | ?{ $_.Name -match $NameFilter }
						}
						else
						{
							$BaseKey = [Microsoft.Win32.RegistryKey]::OpenRemoteBaseKey($RegHive, $ComputerName)
							foreach ($SubKeyName in $BaseKey.GetSubKeyNames())
							{
								try
								{
									$SubKey = $BaseKey.OpenSubKey($SubKeyName, $true)
									$NameFilter = "^.*\\{0}$" -f $Name
									Get-RegistryKey -Path "$RegHive\$Path" -ComputerName $ComputerName -Recurse | ?{ $_.Name -match $NameFilter }
								}
								catch
								{
									Write-Host "Access Error on Key [$SubKeyName]... skipping."
								}
							}
						}
					}
					else
					{
						if ($Path -and (Test-RegistryKey "$RegHive\$Path"))
						{
							$NameFilter = "^.*\\{0}$" -f $Name
							Get-RegistryKey -Path "$RegHive\$Path" -ComputerName $ComputerName -Recurse | ?{ $_.Name -match $NameFilter }
							Get-RegistryValue -Path "$RegHive\$Path" -ComputerName $ComputerName -Recurse | ?{ $_.Name -eq $Name }
						}
						else
						{
							$BaseKey = [Microsoft.Win32.RegistryKey]::OpenRemoteBaseKey($RegHive, $ComputerName)
							foreach ($SubKeyName in $BaseKey.GetSubKeyNames())
							{
								try
								{
									$SubKey = $BaseKey.OpenSubKey($SubKeyName, $true)
									$NameFilter = "^.*\\{0}$" -f $Name
									Get-RegistryKey -Path "$RegHive\$Path" -ComputerName $ComputerName -Recurse | ?{ $_.Name -match $NameFilter }
									Get-RegistryValue -Path $SubKey.Name -ComputerName $ComputerName -Recurse | ?{ $_.Name -eq $Name }
								}
								catch
								{
									Write-Host "Access Error on Key [$SubKeyName]... skipping."
								}
							}
						}
					}
				}
				"ByValue"    {
					if ($Path -and (Test-RegistryKey "$RegHive\$Path"))
					{
						Get-RegistryValue -Path "$RegHive\$Path" -ComputerName $ComputerName -Recurse | ?{ $_.Value -eq $Value }
					}
					else
					{
						$BaseKey = [Microsoft.Win32.RegistryKey]::OpenRemoteBaseKey($RegHive, $ComputerName)
						foreach ($SubKeyName in $BaseKey.GetSubKeyNames())
						{
							try
							{
								$SubKey = $BaseKey.OpenSubKey($SubKeyName, $true)
								Get-RegistryValue -Path "$RegHive\$Path" -ComputerName $ComputerName -Recurse | ?{ $_.Value -eq $Value }
							}
							catch
							{
								Write-Host "Access Error on Key [$SubKeyName]... skipping."
							}
						}
					}
				}
			}
			
			Write-Verbose " [Search-Registry] :: End Process"
			
		}
	}
	
	#endregion 
	
	#region Set-RegistryValue 
	
	function Set-RegistryValue
	{
		
		    <#
		        .Synopsis 
		            Sets a value under the registry key.
		            
		        .Description
		            Sets a value under the registry key.
		                        
		        .Parameter Path 
		            Path to the key.
		            
		        .Parameter Name 
		            Name of the Value to Set.
		            
		        .Parameter Value 
		            New Value.
		            
		        .Parameter Type
		            Type for the Value. Valid Types: Unknown, String (default,) ExpandString, Binary, DWord, MultiString, and Q
		    word
		            
		        .Parameter ComputerName 
		            Computer to set the Value on.
		            
		        .Example
		            Set-RegistryValue HKLM\SOFTWARE\Adobe\MyKey -Name State -Value "Hi There"
		            Description
		            -----------
		            Sets the Value State and sets the value to "Hi There" under HKLM\SOFTWARE\Adobe\MyKey.
		            
		        .Example
		            Set-RegistryValue HKLM\SOFTWARE\Adobe\MyKey -Name State -Value 0 -ComputerName MyServer1
		            Description
		            -----------
		            Sets the Value State and sets the value to "Hi There" under HKLM\SOFTWARE\Adobe\MyKey on MyServer1.
		            
		        .Example
		            Set-RegistryValue HKLM\SOFTWARE\Adobe\MyKey -Name MyDWord -Value 0 -Type DWord
		            Description
		            -----------
		            Sets the DWORD Value MyDWord and sets the value to 0 under HKLM\SOFTWARE\Adobe\MyKey.
		            
		        .OUTPUTS
		            PSCustomObject
		            
		        .INPUTS
		            System.String
		            
		        .Link
		            New-RegistryValue
		            Remove-RegistryValue
		            Get-RegistryValue
		            Test-RegistryValue
		        
		        .Notes
		            NAME:      Set-RegistryValue
		            AUTHOR:    bsonposh
		            Website:   http://www.bsonposh.com
		            Version:   1
		            #Requires -Version 2.0
		    #>
		
		[Cmdletbinding(SupportsShouldProcess = $true)]
		Param (
			[Parameter(mandatory = $true)]
			[string]$Path,
			[Parameter(mandatory = $true)]
			[string]$Name,
			[Parameter()]
			[string]$Value,
			[Parameter()]
			[string]$Type,
			[Alias("dnsHostName")]
			[Parameter(ValueFromPipeline = $true)]
			[string]$ComputerName = $Env:ComputerName
		)
		
		Begin
		{
			
			Write-Verbose " [Set-RegistryValue] :: Start Begin"
			
			Write-Verbose " [Set-RegistryValue] :: `$Path = $Path"
			Write-Verbose " [Set-RegistryValue] :: `$Name = $Name"
			Write-Verbose " [Set-RegistryValue] :: `$Value = $Value"
			
			Switch ($Type)
			{
				"Unknown"       { $ValueType = [Microsoft.Win32.RegistryValueKind]::Unknown; continue }
				"String"        { $ValueType = [Microsoft.Win32.RegistryValueKind]::String; continue }
				"ExpandString"  { $ValueType = [Microsoft.Win32.RegistryValueKind]::ExpandString; continue }
				"Binary"        { $ValueType = [Microsoft.Win32.RegistryValueKind]::Binary; continue }
				"DWord"         { $ValueType = [Microsoft.Win32.RegistryValueKind]::DWord; continue }
				"MultiString"   { $ValueType = [Microsoft.Win32.RegistryValueKind]::MultiString; continue }
				"QWord"         { $ValueType = [Microsoft.Win32.RegistryValueKind]::QWord; continue }
				default { $ValueType = [Microsoft.Win32.RegistryValueKind]::String; continue }
			}
			Write-Verbose " [Set-RegistryValue] :: `$Type = $Type"
			
			Write-Verbose " [Set-RegistryValue] :: End Begin"
			
		}
		
		Process
		{
			
			Write-Verbose " [Set-RegistryValue] :: Start Process"
			
			Write-Verbose " [Set-RegistryValue] :: Calling Get-RegistryKey -Path $path -ComputerName $ComputerName"
			$Key = Get-RegistryKey -Path $path -ComputerName $ComputerName -ReadWrite
			Write-Verbose " [Set-RegistryValue] :: Get-RegistryKey returned $Key"
			Write-Verbose " [Set-RegistryValue] :: Setting Value for [$Name]"
			if ($PSCmdlet.ShouldProcess($ComputerName, "Creating Value [$Name] under $Path with value [$Value]"))
			{
				if ($Value)
				{
					$Key.SetValue($Name, $Value, $ValueType)
				}
				else
				{
					$Key.SetValue($Name, $ValueType)
				}
				Write-Verbose " [Set-RegistryValue] :: Returning New Key: Get-RegistryValue -Path $path -Name $Name -ComputerName $ComputerName"
				Get-RegistryValue -Path $path -Name $Name -ComputerName $ComputerName
			}
			Write-Verbose " [Set-RegistryValue] :: End Process"
			
		}
	}
	
	#endregion 
	
	#region Test-RegistryKey 
	
	function Test-RegistryKey
	{
		
		    <#
		        .Synopsis 
		            Test for given the registry key.
		            
		        .Description
		            Test for given the registry key.
		                        
		        .Parameter Path 
		            Path to the key.
		            
		        .Parameter ComputerName 
		            Computer to test the registry key on.
		            
		        .Example
		            Test-registrykey HKLM\Software\Adobe
		            Description
		            -----------
		            Returns $True if the Registry key for HKLM\Software\Adobe
		            
		        .Example
		            Test-registrykey HKLM\Software\Adobe -ComputerName MyServer1
		            Description
		            -----------
		            Returns $True if the Registry key for HKLM\Software\Adobe on MyServer1
		                    
		        .OUTPUTS
		            System.Boolean
		            
		        .INPUTS
		            System.String
		            
		        .Link
		            New-RegistryKey
		            Remove-RegistryKey
		            Get-RegistryKey
		        
		        .Notes
		            NAME:      Test-RegistryKey
		            AUTHOR:    bsonposh
		            Website:   http://www.bsonposh.com
		            Version:   1
		            #Requires -Version 2.0
		    #>
		
		[Cmdletbinding(SupportsShouldProcess = $true)]
		Param (
			
			[Parameter(ValueFromPipelineByPropertyName = $True, mandatory = $true)]
			[string]$Path,
			[alias('dnsHostName')]
			[Parameter(ValueFromPipelineByPropertyName = $true, ValueFromPipeline = $true)]
			[string]$ComputerName = $Env:COMPUTERNAME
			
		)
		
		Begin
		{
			
			Write-Verbose " [Test-RegistryKey] :: Start Begin"
			
			Write-Verbose " [Test-RegistryKey] :: `$Path = $Path"
			Write-Verbose " [Test-RegistryKey] :: Getting `$Hive and `$KeyPath from $Path "
			$PathParts = $Path -split "\\|/", 0, "RegexMatch"
			$Hive = $PathParts[0]
			$KeyPath = $PathParts[1..$PathParts.count] -join "\"
			Write-Verbose " [Test-RegistryKey] :: `$Hive = $Hive"
			Write-Verbose " [Test-RegistryKey] :: `$KeyPath = $KeyPath"
			
			Write-Verbose " [Test-RegistryKey] :: End Begin"
			
		}
		
		Process
		{
			
			Write-Verbose " [Test-RegistryKey] :: Start Process"
			
			Write-Verbose " [Test-RegistryKey] :: `$ComputerName = $ComputerName"
			
			$RegHive = Get-RegistryHive $hive
			
			if ($RegHive -eq 1)
			{
				Write-Host "Invalid Path: $Path, Registry Hive [$hive] is invalid!" -ForegroundColor Red
			}
			else
			{
				Write-Verbose " [Test-RegistryKey] :: `$RegHive = $RegHive"
				
				$BaseKey = [Microsoft.Win32.RegistryKey]::OpenRemoteBaseKey($RegHive, $ComputerName)
				Write-Verbose " [Test-RegistryKey] :: `$BaseKey = $BaseKey"
				
				Try
				{
					$Key = $BaseKey.OpenSubKey($KeyPath)
					if ($Key)
					{
						$true
					}
					else
					{
						$false
					}
				}
				catch
				{
					$false
				}
			}
			Write-Verbose " [Test-RegistryKey] :: End Process"
			
		}
	}
	
	#endregion 
	
	#region Test-RegistryValue 
	
	function Test-RegistryValue
	{
		
		    <#
		        .Synopsis 
		            Test the value for given the registry value.
		            
		        .Description
		            Test the value for given the registry value.
		                        
		        .Parameter Path 
		            Path to the key that contains the value.
		            
		        .Parameter Name 
		            Name of the Value to check.
		            
		        .Parameter Value 
		            Value to check for.
		            
		        .Parameter ComputerName 
		            Computer to test.
		            
		        .Example
		            Test-RegistryValue HKLM\SOFTWARE\Adobe\SwInstall -Name State -Value 0
		            Description
		            -----------
		            Returns $True if the value of State under HKLM\SOFTWARE\Adobe\SwInstall is 0
		            
		        .Example
		            Test-RegistryValue HKLM\Software\Adobe -ComputerName MyServer1
		            Description
		            -----------
		            Returns $True if the value of State under HKLM\SOFTWARE\Adobe\SwInstall is 0 on MyServer1
		                    
		        .OUTPUTS
		            System.Boolean
		            
		        .INPUTS
		            System.String
		            
		        .Link
		            New-RegistryValue
		            Remove-RegistryValue
		            Get-RegistryValue
		        
		        .Notes    
		            NAME:      Test-RegistryValue
		            AUTHOR:    bsonposh
		            Website:   http://www.bsonposh.com
		            Version:   1
		            #Requires -Version 2.0
		    #>
		
		[Cmdletbinding()]
		Param (
			
			[Parameter(mandatory = $true)]
			[string]$Path,
			[Parameter(mandatory = $true)]
			[string]$Name,
			[Parameter()]
			[string]$Value,
			[alias('dnsHostName')]
			[Parameter(ValueFromPipelineByPropertyName = $true, ValueFromPipeline = $true)]
			[string]$ComputerName = $Env:COMPUTERNAME
			
		)
		
		Process
		{
			
			Write-Verbose " [Test-RegistryValue] :: Begin Process"
			Write-Verbose " [Test-RegistryValue] :: Calling Get-RegistryKey -Path $path -ComputerName $ComputerName"
			$Key = Get-RegistryKey -Path $path -ComputerName $ComputerName
			Write-Verbose " [Test-RegistryValue] :: Get-RegistryKey returned $Key"
			if ($Value)
			{
				try
				{
					$CurrentValue = $Key.GetValue($Name)
					$Value -eq $CurrentValue
				}
				catch
				{
					$false
				}
			}
			else
			{
				try
				{
					$CurrentValue = $Key.GetValue($Name)
					if ($CurrentValue) { $True }
					else { $false }
				}
				catch
				{
					$false
				}
			}
			Write-Verbose " [Test-RegistryValue] :: End Process"
			
		}
	}
	
	#endregion 
	
	#region Get-DiskRelationship
	function Get-DiskRelationship
	{
		param (
			[string]$computername = "localhost"
		)
		Get-WmiObject -Class Win32_DiskDrive -ComputerName $computername | foreach {
			"`n {0} {1}" -f $($_.Name), $($_.Model)
			
			$query = "ASSOCIATORS OF {Win32_DiskDrive.DeviceID='" `
			+ $_.DeviceID + "'} WHERE ResultClass=Win32_DiskPartition"
			
			Get-WmiObject -Query $query -ComputerName $computername | foreach {
				""
				"Name             : {0}" -f $_.Name
				"Description      : {0}" -f $_.Description
				"PrimaryPartition : {0}" -f $_.PrimaryPartition
				
				$query2 = "ASSOCIATORS OF {Win32_DiskPartition.DeviceID='" `
				+ $_.DeviceID + "'} WHERE ResultClass=Win32_LogicalDisk"
				
				Get-WmiObject -Query $query2 -ComputerName $computername | Format-List Name,
																					   @{ Name = "Disk Size (GB)"; Expression = { "{0:F3}" -f $($_.Size/1GB) } },
																					   @{ Name = "Free Space (GB)"; Expression = { "{0:F3}" -f $($_.FreeSpace/1GB) } }
				
			}
		}
	}
	#endregion
	
	#region Get-MountPoint
	function Get-MountPoint
	{
		param (
			[string]$computername = "localhost"
		)
		Get-WmiObject -Class Win32_MountPoint -ComputerName $computername |
		where { $_.Directory -like 'Win32_Directory.Name="*"' } |
		foreach {
			$vol = $_.Volume
			Get-WmiObject -Class Win32_Volume -ComputerName $computername | where { $_.__RELPATH -eq $vol } |
			Select @{ Name = "Folder"; Expression = { $_.Caption } },
				   @{ Name = "Size (GB)"; Expression = { "{0:F3}" -f $($_.Capacity / 1GB) } },
				   @{ Name = "Free (GB)"; Expression = { "{0:F3}" -f $($_.FreeSpace / 1GB) } },
				   @{ Name = "%Free"; Expression = { "{0:F2}" -f $(($_.FreeSpace/$_.Capacity) * 100) } } | ft -AutoSize
		}
	}
	#endregion
	
	#region Get-MappedDrive
	function Get-MappedDrive
	{
		param (
			[string]$computername = "localhost"
		)
		Get-WmiObject -Class Win32_MappedLogicalDisk -ComputerName $computername |
		Format-List DeviceId, VolumeName, SessionID, Size, FreeSpace, ProviderName
	}
	#endregion
	
	#region Test-Host 
	
	function Test-Host
	{
		
		    <#
		        .Synopsis 
		            Test a host for connectivity using either WMI ping or TCP port
		            
		        .Description
		            Allows you to test a host for connectivity before further processing
		            
		        .Parameter Server
		            Name of the Server to Process.
		            
		        .Parameter TCPPort
		            TCP Port to connect to. (default 135)
		            
		        .Parameter Timeout
		            Timeout for the TCP connection (default 1 sec)
		            
		        .Parameter Property
		            Name of the Property that contains the value to test.
		            
		        .Example
		            cat ServerFile.txt | Test-Host | Invoke-DoSomething
		            Description
		            -----------
		            To test a list of hosts.
		            
		        .Example
		            cat ServerFile.txt | Test-Host -tcp 80 | Invoke-DoSomething
		            Description
		            -----------
		            To test a list of hosts against port 80.
		            
		        .Example
		            Get-ADComputer | Test-Host -property dnsHostname | Invoke-DoSomething
		            Description
		            -----------
		            To test the output of Get-ADComputer using the dnshostname property
		            
		            
		        .OUTPUTS
		            System.Object
		            
		        .INPUTS
		            System.String
		            
		        .Link
		            Test-Port
		            
		        NAME:      Test-Host
		        AUTHOR:    YetiCentral\bshell
		        Website:   www.bsonposh.com
		        LASTEDIT:  02/04/2009 18:25:15
		        #Requires -Version 2.0
		    #>
		
		[CmdletBinding()]
		Param (
			
			[Parameter(ValueFromPipelineByPropertyName = $true, ValueFromPipeline = $true, Mandatory = $True)]
			[string]$ComputerName,
			[Parameter()]
			[int]$TCPPort = 80,
			[Parameter()]
			[int]$timeout = 3000,
			[Parameter()]
			[string]$property
			
		)
		Begin
		{
			
			function PingServer
			{
				Param ($MyHost)
				$ErrorActionPreference = "SilentlyContinue"
				Write-Verbose " [PingServer] :: Pinging [$MyHost]"
				try
				{
					$pingresult = Get-WmiObject win32_pingstatus -f "address='$MyHost'"
					$ResultCode = $pingresult.statuscode
					Write-Verbose " [PingServer] :: Ping returned $ResultCode"
					if ($ResultCode -eq 0) { $true }
					else { $false }
				}
				catch
				{
					Write-Verbose " [PingServer] :: Ping Failed with Error: ${error[0]}"
					$false
				}
			}
			
		}
		
		Process
		{
			
			Write-Verbose " [Test-Host] :: Begin Process"
			if ($ComputerName -match "(.*)(\$)$")
			{
				$ComputerName = $ComputerName -replace "(.*)(\$)$", '$1'
			}
			Write-Verbose " [Test-Host] :: ComputerName   : $ComputerName"
			if ($TCPPort)
			{
				Write-Verbose " [Test-Host] :: Timeout  : $timeout"
				Write-Verbose " [Test-Host] :: Port     : $TCPPort"
				if ($property)
				{
					Write-Verbose " [Test-Host] :: Property : $Property"
					$Result = Test-Port $_.$property -tcp $TCPPort -timeout $timeout
					if ($Result)
					{
						if ($_) { $_ }
						else { $ComputerName }
					}
				}
				else
				{
					Write-Verbose " [Test-Host] :: Running - 'Test-Port $ComputerName -tcp $TCPPort -timeout $timeout'"
					$Result = Test-Port $ComputerName -tcp $TCPPort -timeout $timeout
					if ($Result)
					{
						if ($_) { $_ }
						else { $ComputerName }
					}
				}
			}
			else
			{
				if ($property)
				{
					Write-Verbose " [Test-Host] :: Property : $Property"
					try
					{
						if (PingServer $_.$property)
						{
							if ($_) { $_ }
							else { $ComputerName }
						}
					}
					catch
					{
						Write-Verbose " [Test-Host] :: $($_.$property) Failed Ping"
					}
				}
				else
				{
					Write-Verbose " [Test-Host] :: Simple Ping"
					try
					{
						if (PingServer $ComputerName) { $ComputerName }
					}
					catch
					{
						Write-Verbose " [Test-Host] :: $ComputerName Failed Ping"
					}
				}
			}
			Write-Verbose " [Test-Host] :: End Process"
			
		}
		
	}
	
	#endregion 
	
	#region Test-Port 
	
	function Test-Port
	{
		
		    <#
		        .Synopsis 
		            Test a host to see if the specified port is open.
		            
		        .Description
		            Test a host to see if the specified port is open.
		                        
		        .Parameter TCPPort 
		            Port to test (Default 135.)
		            
		        .Parameter Timeout 
		            How long to wait (in milliseconds) for the TCP connection (Default 3000.)
		            
		        .Parameter ComputerName 
		            Computer to test the port against (Default in localhost.)
		            
		        .Example
		            Test-Port -tcp 3389
		            Description
		            -----------
		            Returns $True if the localhost is listening on 3389
		            
		        .Example
		            Test-Port -tcp 3389 -ComputerName MyServer1
		            Description
		            -----------
		            Returns $True if MyServer1 is listening on 3389
		                    
		        .OUTPUTS
		            System.Boolean
		            
		        .INPUTS
		            System.String
		            
		        .Link
		            Test-Host
		            Wait-Port
		            
		        .Notes
		            NAME:      Test-Port
		            AUTHOR:    bsonposh
		            Website:   http://www.bsonposh.com
		            Version:   1
		            #Requires -Version 2.0
		    #>
		
		[Cmdletbinding()]
		Param (
			[Parameter()]
			[int]$TCPport = 135,
			[Parameter()]
			[int]$TimeOut = 3000,
			[Alias("dnsHostName")]
			[Parameter(ValueFromPipelineByPropertyName = $true, ValueFromPipeline = $true)]
			[String]$ComputerName = $env:COMPUTERNAME
		)
		Begin
		{
			Write-Verbose " [Test-Port] :: Start Script"
			Write-Verbose " [Test-Port] :: Setting Error state = 0"
		}
		
		Process
		{
			
			Write-Verbose " [Test-Port] :: Creating [system.Net.Sockets.TcpClient] instance"
			$tcpclient = New-Object system.Net.Sockets.TcpClient
			
			Write-Verbose " [Test-Port] :: Calling BeginConnect($ComputerName,$TCPport,$null,$null)"
			try
			{
				$iar = $tcpclient.BeginConnect($ComputerName, $TCPport, $null, $null)
				Write-Verbose " [Test-Port] :: Waiting for timeout [$timeout]"
				$wait = $iar.AsyncWaitHandle.WaitOne($TimeOut, $false)
			}
			catch [System.Net.Sockets.SocketException]
			{
				Write-Verbose " [Test-Port] :: Exception: $($_.exception.message)"
				Write-Verbose " [Test-Port] :: End"
				return $false
			}
			catch
			{
				Write-Verbose " [Test-Port] :: General Exception"
				Write-Verbose " [Test-Port] :: End"
				return $false
			}
			
			if (!$wait)
			{
				$tcpclient.Close()
				Write-Verbose " [Test-Port] :: Connection Timeout"
				Write-Verbose " [Test-Port] :: End"
				return $false
			}
			else
			{
				Write-Verbose " [Test-Port] :: Closing TCP Socket"
				try
				{
					$tcpclient.EndConnect($iar) | out-Null
					$tcpclient.Close()
				}
				catch
				{
					Write-Verbose " [Test-Port] :: Unable to Close TCP Socket"
				}
				$true
			}
		}
		End
		{
			Write-Verbose " [Test-Port] :: End Script"
		}
	}
	#endregion 
	
	#region Get-MemoryConfiguration 
	
	function Get-MemoryConfiguration
	{
		
		    <#
		        .Synopsis 
		            Gets the Memory Config for specified host.
		            
		        .Description
		            Gets the Memory Config for specified host.
		            
		        .Parameter ComputerName
		            Name of the Computer to get the Memory Config from (Default is localhost.)
		            
		        .Example
		            Get-MemoryConfiguration
		            Description
		            -----------
		            Gets Memory Config from local machine
		    
		        .Example
		            Get-MemoryConfiguration -ComputerName MyServer
		            Description
		            -----------
		            Gets Memory Config from MyServer
		            
		        .Example
		            $Servers | Get-MemoryConfiguration
		            Description
		            -----------
		            Gets Memory Config for each machine in the pipeline
		            
		        .OUTPUTS
		            PSCustomObject
		            
		        .Notes
		            NAME:      Get-MemoryConfiguration 
		            AUTHOR:    YetiCentral\bshell
		            Website:   www.bsonposh.com
		            #Requires -Version 2.0
		    #>
		
		[Cmdletbinding()]
		Param (
			[alias('dnsHostName')]
			[Parameter(ValueFromPipelineByPropertyName = $true, ValueFromPipeline = $true)]
			[string]$ComputerName = $Env:COMPUTERNAME
		)
		
		Process
		{
			
			Write-Verbose " [Get-MemoryConfiguration] :: Begin Process"
			if ($ComputerName -match "(.*)(\$)$")
			{
				$ComputerName = $ComputerName -replace "(.*)(\$)$", '$1'
			}
			if (Test-Host $ComputerName -TCPPort 135)
			{
				Write-Verbose " [Get-MemoryConfiguration] :: Processing $ComputerName"
				try
				{
					$MemorySlots = Get-WmiObject Win32_PhysicalMemory -ComputerName $ComputerName -ea STOP
					foreach ($Dimm in $MemorySlots)
					{
						$myobj = @{ }
						$myobj.ComputerName = $ComputerName
						$myobj.Description = $Dimm.Tag
						$myobj.Slot = $Dimm.DeviceLocator
						$myobj.Speed = $Dimm.Speed
						$myobj.SizeGB = $Dimm.Capacity/1gb
						
						$obj = New-Object PSObject -Property $myobj
						$obj.PSTypeNames.Clear()
						$obj.PSTypeNames.Add('BSonPosh.MemoryConfiguration')
						$obj
					}
				}
				catch
				{
					Write-Host " Host [$ComputerName] Failed with Error: $($Error[0])" -ForegroundColor Red
				}
			}
			else
			{
				Write-Host " Host [$ComputerName] Failed Connectivity Test " -ForegroundColor Red
			}
			Write-Verbose " [Get-MemoryConfiguration] :: End Process"
			
		}
	}
	
	#endregion 
	
	#region Get-NetStat 
	#Need to Implement
	#[Parameter()]
	#[int]$ID,
	#[Parameter()]
	#[int]$RemotePort,
	#[Parameter()]
	#[string]$RemoteAddress,
	function Get-NetStat
	{
		
		    <#
		        .Synopsis 
		            Get the Network stats of the local host.
		            
		        .Description
		            Get the Network stats of the local host.
		            
		        .Parameter ProcessName
		            Name of the Process to get Network stats for.
		        
		        .Parameter State
		            State to return: Valid Values are: "LISTENING", "ESTABLISHED", "CLOSE_WAIT", or "TIME_WAIT"
		
		        .Parameter Interval
		            Number of times you want to run netstat. Cannot be used with Loop.
		            
		        .Parameter Sleep
		            Time between calls to netstat. Used with Interval or Loop.
		            
		        .Parameter Loop
		            Loops netstat calls until you press ctrl-c. Cannot be used with Internval.
		            
		        .Example
		            Get-NetStat
		            Description
		            -----------
		            Returns all Network stat information on the localhost
		        
		        .Example
		            Get-NetStat -ProcessName chrome
		            Description
		            -----------
		            Returns all Network stat information on the localhost for process chrome.
		            
		        .Example
		            Get-NetStat -State ESTABLISHED
		            Description
		            -----------
		            Returns all the established connections on the localhost
		            
		        .Example
		            Get-NetStat -State ESTABLISHED -Loop
		            Description
		            -----------
		            Loops established connections.
		            
		        .OUTPUTS
		            PSCustomObject
		            
		        .INPUTS
		            System.String
		        
		        .Notes
		            NAME:      Get-NetStat
		            AUTHOR:    YetiCentral\bshell
		            Website:   www.bsonposh.com
		            #Requires -Version 2.0
		
		    #>
		
		[Cmdletbinding(DefaultParameterSetName = "All")]
		Param (
			[Parameter()]
			[string]$ProcessName,
			[Parameter()]
			[ValidateSet("LISTENING", "ESTABLISHED", "CLOSE_WAIT", "TIME_WAIT")]
			[string]$State,
			[Parameter(ParameterSetName = "Interval")]
			[int]$Interval,
			[Parameter()]
			[int]$Sleep = 1,
			[Parameter(ParameterSetName = "Loop")]
			[switch]$Loop
		)
		
		function Parse-Netstat ($NetStat)
		{
			Write-Verbose " [Parse-Netstat] :: Parsing Netstat results"
			switch -regex ($NetStat)
			{
				$RegEx
				{
					Write-Verbose " [Parse-Netstat] :: creating Custom object"
					$myobj = @{
						Protocol = $matches.Protocol
						LocalAddress = $matches.LocalAddress.split(":")[0]
						LocalPort = $matches.LocalAddress.split(":")[1]
						RemoteAddress = $matches.RemoteAddress.split(":")[0]
						RemotePort = $matches.RemoteAddress.split(":")[1]
						State = $matches.State
						ProcessID = $matches.PID
						ProcessName = Get-Process -id $matches.PID -ea 0 | %{ $_.name }
					}
					
					$obj = New-Object PSCustomObject -Property $myobj
					$obj.PSTypeNames.Clear()
					$obj.PSTypeNames.Add('BSonPosh.NetStatInfo')
					Write-Verbose " [Parse-Netstat] :: Created object for [$($obj.LocalAddress):$($obj.LocalPort)]"
					
					if ($ProcessName)
					{
						$obj | where{ $_.ProcessName -eq $ProcessName }
					}
					elseif ($State)
					{
						$obj | where{ $_.State -eq $State }
					}
					else
					{
						$obj
					}
					
				}
			}
		}
		
		[RegEX]$RegEx = '\s+(?<Protocol>\S+)\s+(?<LocalAddress>\S+)\s+(?<RemoteAddress>\S+)\s+(?<State>\S+)\s+(?<PID>\S+)'
		$Connections = @{ }
		
		switch -exact ($pscmdlet.ParameterSetName)
		{
			"All"           {
				Write-Verbose " [Get-NetStat] :: ParameterSet - ALL"
				$NetStatResults = netstat -ano | ?{ $_ -match "(TCP|UDP)\s+\d" }
				Parse-Netstat $NetStatResults
			}
			"Interval"      {
				Write-Verbose " [Get-NetStat] :: ParameterSet - Interval"
				for ($i = 1; $i -le $Interval; $i++)
				{
					Start-Sleep $Sleep
					$NetStatResults = netstat -ano | ?{ $_ -match "(TCP|UDP)\s+\d" }
					Parse-Netstat $NetStatResults | Out-String
				}
			}
			"Loop"          {
				Write-Verbose " [Get-NetStat] :: ParameterSet - Loop"
				Write-Host
				Write-Host "Protocol LocalAddress  LocalPort RemoteAddress  RemotePort State       ProcessName   PID"
				Write-Host "-------- ------------  --------- -------------  ---------- -----       -----------   ---" -ForegroundColor White
				$oldPos = $Host.UI.RawUI.CursorPosition
				[console]::TreatControlCAsInput = $true
				while ($true)
				{
					Write-Verbose " [Get-NetStat] :: Getting Netstat data"
					$NetStatResults = netstat -ano | ?{ $_ -match "(TCP|UDP)\s+\d" }
					Write-Verbose " [Get-NetStat] :: Getting Netstat data from Netstat"
					$Results = Parse-Netstat $NetStatResults
					Write-Verbose " [Get-NetStat] :: Parse-NetStat returned $($results.count) results"
					foreach ($Result in $Results)
					{
						$Key = $Result.LocalPort
						$Value = $Result.ProcessID
						$msg = "{0,-9}{1,-14}{2,-10}{3,-15}{4,-11}{5,-12}{6,-14}{7,-10}" -f $Result.Protocol, $Result.LocalAddress, $Result.LocalPort,
						$Result.RemoteAddress, $Result.RemotePort, $Result.State,
						$Result.ProcessName, $Result.ProcessID
						if ($Connections.$Key -eq $Value)
						{
							Write-Host $msg
						}
						else
						{
							$Connections.$Key = $Value
							Write-Host $msg -ForegroundColor Yellow
						}
					}
					if ($Host.UI.RawUI.KeyAvailable -and (3 -eq [int]$Host.UI.RawUI.ReadKey("AllowCtrlC,IncludeKeyUp,NoEcho").Character))
					{
						Write-Host "Exiting now..." -foregroundcolor Yellow
						Write-Host
						[console]::TreatControlCAsInput = $false
						break
					}
					$Host.UI.RawUI.CursorPosition = $oldPos
					start-sleep $Sleep
				}
			}
		}
	}
	
	#endregion 
	
	#region Get-NicInfo 
	
	function Get-NICInfo
	{
		
		    <#
		        .Synopsis  
		            Gets the NIC info for specified host
		            
		        .Description
		            Gets the NIC info for specified host
		            
		        .Parameter ComputerName
		            Name of the Computer to get the NIC info from (Default is localhost.)
		            
		        .Example
		            Get-NicInfo
		            # Gets NIC info from local machine
		    
		        .Example
		            Get-NicInfo -ComputerName MyServer
		            Description
		            -----------
		            Gets NIC info from MyServer
		            
		        .Example
		            $Servers | Get-NicInfo
		            Description
		            -----------
		            Gets NIC info for each machine in the pipeline
		            
		        .OUTPUTS
		            PSCustomObject
		            
		        .Notes
		            NAME:      Get-NicInfo 
		            AUTHOR:    YetiCentral\bshell
		            Website:   www.bsonposh.com
		            #Requires -Version 2.0
		    #>
		
		[Cmdletbinding()]
		Param (
			[alias('dnsHostName')]
			[Parameter(ValueFromPipelineByPropertyName = $true, ValueFromPipeline = $true)]
			[string]$ComputerName = $Env:COMPUTERNAME
		)
		
		Process
		{
			if ($ComputerName -match "(.*)(\$)$")
			{
				$ComputerName = $ComputerName -replace "(.*)(\$)$", '$1'
			}
			
			if (Test-Host -ComputerName $ComputerName -TCPPort 135)
			{
				try
				{
					$NICS = Get-WmiObject -class Win32_NetworkAdapterConfiguration -ComputerName $ComputerName
					
					foreach ($NIC in $NICS)
					{
						$Query = "Select Name,NetConnectionID FROM Win32_NetworkAdapter WHERE Index='$($NIC.Index)'"
						$NetConnnectionID = Get-WmiObject -Query $Query -ComputerName $ComputerName
						
						$myobj = @{
							ComputerName = $ComputerName
							Name = $NetConnnectionID.Name
							NetID = $NetConnnectionID.NetConnectionID
							MacAddress = $NIC.MacAddress
							IP = $NIC.IPAddress | ?{ $_ -match "\d*\.\d*\.\d*\." }
							Subnet = $NIC.IPSubnet | ?{ $_ -match "\d*\.\d*\.\d*\." }
							Enabled = $NIC.IPEnabled
							Index = $NIC.Index
						}
						
						$obj = New-Object PSObject -Property $myobj
						$obj.PSTypeNames.Clear()
						$obj.PSTypeNames.Add('BSonPosh.NICInfo')
						$obj
					}
				}
				catch
				{
					Write-Host " Host [$ComputerName] Failed with Error: $($Error[0])" -ForegroundColor Red
				}
			}
			else
			{
				Write-Host " Host [$ComputerName] Failed Connectivity Test " -ForegroundColor Red
			}
		}
	}
	
	#endregion 
	
	#region Get-MotherBoard
	
		function Get-MotherBoard
		{
		
		    <#
		        .Synopsis 
		            Gets the Mother Board info for specified host.
		            
		        .Description
		            Gets the Mother Board info for specified host.
		            
		        .Parameter ComputerName
		            Name of the Computer to get the Mother Board info from (Default is localhost.) 
		            
		        .Example
		            Get-MotherBoard
		            Description
		            -----------
		            Gets Mother Board info from local machine
		    
		        .Example
		            Get-MotherBoard -ComputerName MyOtherDesktop
		            Description
		            -----------
		            Gets Mother Board info from MyOtherDesktop
		            
		        .Example
		            $Windows7Machines | Get-MotherBoard
		            Description
		            -----------
		            Gets Mother Board info for each machine in the pipeline
		            
		        .OUTPUTS
		            PSCustomObject
		            
		        .INPUTS
		            System.String
		            
		        .Link
		            N/A
		            
		        .Notes
		            NAME:      Get-MotherBoard
		            AUTHOR:    bsonposh
		            Website:   http://www.bsonposh.com
		            Version:   1
		            #Requires -Version 2.0
		    #>
		
			[Cmdletbinding()]
			Param(
				[alias('dnsHostName')]
				[Parameter(ValueFromPipelineByPropertyName = $true,ValueFromPipeline = $true)]
				[string]$ComputerName = $Env:COMPUTERNAME
			)
			
			Process
			{
				
				if($ComputerName -match "(.*)(\$)$")
				{
					$ComputerName = $ComputerName -replace "(.*)(\$)$",'$1'
				}
				if(Test-Host -ComputerName $ComputerName -TCPPort 135)
				{
					try
					{
						$MBInfo = Get-WmiObject Win32_BaseBoard -ComputerName $ComputerName -ea STOP
						$myobj = @{
							ComputerName	 = $ComputerName
							Name			 = $MBInfo.Product
							Manufacturer	 = $MBInfo.Manufacturer
							Version			 = $MBInfo.Version
							SerialNumber	 = $MBInfo.SerialNumber
						 }
						
						$obj = New-Object PSObject -Property $myobj
						$obj.PSTypeNames.Clear()
						$obj.PSTypeNames.Add('BSonPosh.Computer.MotherBoard')
						$obj
					}
					catch
					{
						Write-Host " Host [$ComputerName] Failed with Error: $($Error[0])" -ForegroundColor Red
					}
				}
				else
				{
					Write-Host " Host [$ComputerName] Failed Connectivity Test " -ForegroundColor Red
				}
			
			}
		}
	
	#endregion # Get-MotherBoard
	
	#region Get-Routetable 
	
	function Get-Routetable
	{
		
		    <#
		        .Synopsis 
		            Gets the route table for specified host.
		            
		        .Description
		            Gets the route table for specified host.
		            
		        .Parameter ComputerName
		            Name of the Computer to get the route table from (Default is localhost.)
		            
		        .Example
		            Get-RouteTable
		            Description
		            -----------
		            Gets route table from local machine
		    
		        .Example
		            Get-RouteTable -ComputerName MyServer
		            Description
		            -----------
		            Gets route table from MyServer
		            
		        .Example
		            $Servers | Get-RouteTable
		            Description
		            -----------
		            Gets route table for each machine in the pipeline
		            
		        .OUTPUTS
		            PSCustomObject
		            
		        .INPUTS
		            System.String
		            
		        .Link
		            N/A
		            
		        .Notes
		            NAME:      Get-RouteTable
		            AUTHOR:    bsonposh
		            Website:   http://www.bsonposh.com
		            Version:   1
		            #Requires -Version 2.0
		    #>
		
		[Cmdletbinding()]
		Param (
			[alias('dnsHostName')]
			[Parameter(ValueFromPipelineByPropertyName = $true, ValueFromPipeline = $true)]
			[string]$ComputerName = $Env:COMPUTERNAME
		)
		process
		{
			
			if ($ComputerName -match "(.*)(\$)$")
			{
				$ComputerName = $ComputerName -replace "(.*)(\$)$", '$1'
			}
			if (Test-Host $ComputerName -TCPPort 135)
			{
				$Routes = Get-WMIObject Win32_IP4RouteTable -ComputerName $ComputerName -Property Name, Mask, NextHop, Metric1, Type
				foreach ($Route in $Routes)
				{
					$myobj = @{ }
					$myobj.ComputerName = $ComputerName
					$myobj.Name = $Route.Name
					$myobj.NetworkMask = $Route.mask
					$myobj.Gateway = if ($Route.NextHop -eq "0.0.0.0") { "On-Link" }
					else { $Route.NextHop }
					$myobj.Metric = $Route.Metric1
					
					$obj = New-Object PSObject -Property $myobj
					$obj.PSTypeNames.Clear()
					$obj.PSTypeNames.Add('BSonPosh.RouteTable')
					$obj
				}
			}
			else
			{
				Write-Host " Host [$ComputerName] Failed Connectivity Test " -ForegroundColor Red
			}
			
		}
	}
	
	#endregion 
	
	#region Get-SystemType 
	
	function Get-SystemType
	{
		
		    <#
		        .Synopsis 
		            Gets the system type for specified host
		            
		        .Description
		            Gets the system type info for specified host
		            
		        .Parameter ComputerName
		            Name of the Computer to get the System Type from (Default is localhost.)
		            
		        .Example
		            Get-SystemType
		            Description
		            -----------
		            Gets System Type from local machine
		    
		        .Example
		            Get-SystemType -ComputerName MyServer
		            Description
		            -----------
		            Gets System Type from MyServer
		            
		        .Example
		            $Servers | Get-SystemType
		            Description
		            -----------
		            Gets System Type for each machine in the pipeline
		            
		        .OUTPUTS
		            PSObject
		            
		        .Notes
		            NAME:      Get-SystemType 
		            AUTHOR:    YetiCentral\bshell
		            Website:   www.bsonposh.com
		            #Requires -Version 2.0
		    #>
		
		[Cmdletbinding()]
		Param (
			[alias('dnsHostName')]
			[Parameter(ValueFromPipelineByPropertyName = $true, ValueFromPipeline = $true)]
			[string]$ComputerName = $Env:COMPUTERNAME
		)
		
		Begin
		{
			
			function ConvertTo-ChassisType($Type)
			{
				switch ($Type)
				{
					1    { "Other" }
					2    { "Unknown" }
					3    { "Desktop" }
					4    { "Low Profile Desktop" }
					5    { "Pizza Box" }
					6    { "Mini Tower" }
					7    { "Tower" }
					8    { "Portable" }
					9    { "Laptop" }
					10    { "Notebook" }
					11    { "Hand Held" }
					12    { "Docking Station" }
					13    { "All in One" }
					14    { "Sub Notebook" }
					15    { "Space-Saving" }
					16    { "Lunch Box" }
					17    { "Main System Chassis" }
					18    { "Expansion Chassis" }
					19    { "SubChassis" }
					20    { "Bus Expansion Chassis" }
					21    { "Peripheral Chassis" }
					22    { "Storage Chassis" }
					23    { "Rack Mount Chassis" }
					24    { "Sealed-Case PC" }
				}
			}
			function ConvertTo-SecurityStatus($Status)
			{
				switch ($Status)
				{
					1    { "Other" }
					2    { "Unknown" }
					3    { "None" }
					4    { "External Interface Locked Out" }
					5    { "External Interface Enabled" }
				}
			}
			
		}
		Process
		{
			
			Write-Verbose " [Get-SystemType] :: Process Start"
			if ($ComputerName -match "(.*)(\$)$")
			{
				$ComputerName = $ComputerName -replace "(.*)(\$)$", '$1'
			}
			if (Test-Host $ComputerName -TCPPort 135)
			{
				try
				{
					Write-Verbose " [Get-SystemType] :: Getting System (Enclosure) Type info use WMI"
					$SystemInfo = Get-WmiObject Win32_SystemEnclosure -ComputerName $ComputerName
					$CSInfo = Get-WmiObject -Query "Select Model FROM Win32_ComputerSystem" -ComputerName $ComputerName
					
					Write-Verbose " [Get-SystemType] :: Creating Hash Table"
					$myobj = @{ }
					Write-Verbose " [Get-SystemType] :: Setting ComputerName   - $ComputerName"
					$myobj.ComputerName = $ComputerName
					
					Write-Verbose " [Get-SystemType] :: Setting Manufacturer   - $($SystemInfo.Manufacturer)"
					$myobj.Manufacturer = $SystemInfo.Manufacturer
					
					Write-Verbose " [Get-SystemType] :: Setting Module   - $($CSInfo.Model)"
					$myobj.Model = $CSInfo.Model
					
					Write-Verbose " [Get-SystemType] :: Setting SerialNumber   - $($SystemInfo.SerialNumber)"
					$myobj.SerialNumber = $SystemInfo.SerialNumber
					
					Write-Verbose " [Get-SystemType] :: Setting SecurityStatus - $($SystemInfo.SecurityStatus)"
					$myobj.SecurityStatus = ConvertTo-SecurityStatus $SystemInfo.SecurityStatus
					
					Write-Verbose " [Get-SystemType] :: Setting Type           - $($SystemInfo.ChassisTypes)"
					$myobj.Type = ConvertTo-ChassisType $SystemInfo.ChassisTypes
					
					Write-Verbose " [Get-SystemType] :: Creating Custom Object"
					$obj = New-Object PSCustomObject -Property $myobj
					$obj.PSTypeNames.Clear()
					$obj.PSTypeNames.Add('BSonPosh.SystemType')
					$obj
				}
				catch
				{
					Write-Verbose " [Get-SystemType] :: [$ComputerName] Failed with Error: $($Error[0])"
				}
			}
			
		}
		
	}
	
	#endregion 
	
	#region Get-RebootTime 
	
	function Get-RebootTime
	{
		    <#
		        .Synopsis 
		            Gets the reboot time for specified host.
		            
		        .Description
		            Gets the reboot time for specified host.
		            
		        .Parameter ComputerName
		            Name of the Computer to get the reboot time from (Default is localhost.)
		            
		        .Example
		            Get-RebootTime
		            Description
		            -----------
		            Gets OS Version from local     
		        
		        .Example
		            Get-RebootTime -Last
		            Description
		            -----------
		            Gets last reboot time from local machine
		
		        .Example
		            Get-RebootTime -ComputerName MyServer
		            Description
		            -----------
		            Gets reboot time from MyServer
		            
		        .Example
		            $Servers | Get-RebootTime
		            Description
		            -----------
		            Gets reboot time for each machine in the pipeline
		            
		        .OUTPUTS
		            PSCustomObject
		            
		        .INPUTS
		            System.String
		            
		        .Link
		            N/A
		            
		        .Notes
		            NAME:      Get-RebootTime
		            AUTHOR:    bsonposh
		            Website:   http://www.bsonposh.com
		            Version:   1
		            #Requires -Version 2.0
		    #>
		
		[cmdletbinding()]
		Param (
			[alias('dnsHostName')]
			[Parameter(ValueFromPipelineByPropertyName = $true, ValueFromPipeline = $true)]
			[string]$ComputerName = $Env:COMPUTERNAME,
			[Parameter()]
			[Switch]$Last
		)
		process
		{
			
			if ($ComputerName -match "(.*)(\$)$")
			{
				$ComputerName = $ComputerName -replace "(.*)(\$)$", '$1'
			}
			if (Test-Host $ComputerName -TCPPort 135)
			{
				try
				{
					if ($Last)
					{
						$date = Get-WmiObject Win32_OperatingSystem -ComputerName $ComputerName -ea STOP | foreach{ $_.LastBootUpTime }
						$RebootTime = [System.DateTime]::ParseExact($date.split('.')[0], 'yyyyMMddHHmmss', $null)
						$myobj = @{ }
						$myobj.ComputerName = $ComputerName
						$myobj.RebootTime = $RebootTime
						
						$obj = New-Object PSObject -Property $myobj
						$obj.PSTypeNames.Clear()
						$obj.PSTypeNames.Add('BSonPosh.RebootTime')
						$obj
					}
					else
					{
						$Query = "Select * FROM Win32_NTLogEvent WHERE SourceName='eventlog' AND EventCode='6009'"
						Get-WmiObject -Query $Query -ea 0 -ComputerName $ComputerName | foreach {
							$myobj = @{ }
							$RebootTime = [DateTime]::ParseExact($_.TimeGenerated.Split(".")[0], 'yyyyMMddHHmmss', $null)
							$myobj.ComputerName = $ComputerName
							$myobj.RebootTime = $RebootTime
							
							$obj = New-Object PSObject -Property $myobj
							$obj.PSTypeNames.Clear()
							$obj.PSTypeNames.Add('BSonPosh.RebootTime')
							$obj
						}
					}
					
				}
				catch
				{
					Write-Host " Host [$ComputerName] Failed with Error: $($Error[0])" -ForegroundColor Red
				}
			}
			else
			{
				Write-Host " Host [$ComputerName] Failed Connectivity Test " -ForegroundColor Red
			}
			
		}
	}
	
	#endregion 
	
	### BSONPOSH - KMS
	
	#region ConvertTo-KMSStatus 
	
	function ConvertTo-KMSStatus
	{
		[cmdletbinding()]
		Param (
			[Parameter(mandatory = $true)]
			[int]$StatusCode
		)
		switch -exact ($StatusCode)
		{
			0		{ "Unlicensed" }
			1		{ "Licensed" }
			2		{ "OOBGrace" }
			3		{ "OOTGrace" }
			4		{ "NonGenuineGrace" }
			5		{ "Notification" }
			6		{ "ExtendedGrace" }
			default { "Unknown" }
		}
	}
	#endregion 
	
	#region Get-KMSActivationDetail 
	
	function Get-KMSActivationDetail
	{
		
		    <#
		        .Synopsis 
		            Gets the Activation Detail from the KMS Server.
		            
		        .Description
		            Gets the Activation Detail from the KMS Server.
		            
		        .Parameter KMS
		            KMS Server to connect to.
		            
		        .Parameter Filter
		            Filter for the Computers to get activation for.
		        
		        .Parameter After
		            The DateTime to start the query from. For example if I only want activations for the last thirty days:
		            the date time would be ((Get-Date).AddMonths(-1))
		            
		        .Parameter Unique
		            Only return Unique entries.
		            
		        .Example
		            Get-KMSActivationDetail -kms MyKMSServer
		            Description
		            -----------
		            Get all the activations for the target KMS server.
		            
		        .Example
		            Get-KMSActivationDetail -kms MyKMSServer -filter mypc
		            Description
		            -----------
		            Get all the activations for all the machines that are like "mypc" on the target KMS server.
		            
		        .Example
		            Get-KMSActivationDetail -kms MyKMSServer -After ((Get-Date).AddDays(-1))
		            Description
		            -----------
		            Get all the activations for the last day on the target KMS server.
		    
		        .Example
		            Get-KMSActivationDetail -kms MyKMSServer -unique
		            Description
		            -----------
		            Returns all the unique activate for the targeted KMS server.
		            
		        .OUTPUTS
		            PSCustomObject
		            
		        .INPUTS
		            System.String
		            
		        .Link
		            Get-KMSServer
		            Get-KMSStatus
		            
		        .Notes
		            NAME:      Get-KMSActivationDetail
		            AUTHOR:    bsonposh
		            Website:   http://www.bsonposh.com
		            Version:   1
		            #Requires -Version 2.0
		    #>
		
		[Cmdletbinding()]
		Param (
			
			[Parameter(mandatory = $true)]
			[string]$KMS,
			[Parameter()]
			[string]$Filter = "*",
			[Parameter()]
			[datetime]$After,
			[Parameter()]
			[switch]$Unique
			
		)
		Write-Verbose " [Get-KMSActivationDetail] :: Cmdlet Start"
		Write-Verbose " [Get-KMSActivationDetail] :: KMS Server   = $KMS"
		Write-Verbose " [Get-KMSActivationDetail] :: Filter       = $Filter"
		Write-Verbose " [Get-KMSActivationDetail] :: After Date   = $After"
		Write-Verbose " [Get-KMSActivationDetail] :: Unique       = $Unique"
		
		if ($After)
		{
			Write-Verbose " [Get-KMSActivationDetail] :: Processing Records after $After"
			$Events = Get-Eventlog -LogName "Key Management Service" -ComputerName $KMS -After $After -Message "*$Filter*"
		}
		else
		{
			Write-Verbose " [Get-KMSActivationDetail] :: Processing Records"
			$Events = Get-Eventlog -LogName "Key Management Service" -ComputerName $KMS -Message "*$Filter*"
		}
		
		Write-Verbose " [Get-KMSActivationDetail] :: Creating Objects Collection"
		$MyObjects = @()
		
		Write-Verbose " [Get-KMSActivationDetail] :: Processing {$($Events.count)} Events"
		foreach ($Event in $Events)
		{
			Write-Verbose " [Get-KMSActivationDetail] :: Creating Hash Table [$($Event.Index)]"
			$Message = $Event.Message.Split(",")
			
			$myobj = @{ }
			Write-Verbose " [Get-KMSActivationDetail] :: Setting ComputerName to $($Message[3])"
			$myobj.Computername = $Message[3]
			Write-Verbose " [Get-KMSActivationDetail] :: Setting Date to $($Event.TimeGenerated)"
			$myobj.Date = $Event.TimeGenerated
			Write-Verbose " [Get-KMSActivationDetail] :: Creating Custom Object [$($Event.Index)]"
			$MyObjects += New-Object PSObject -Property $myobj
		}
		
		if ($Unique)
		{
			Write-Verbose " [Get-KMSActivationDetail] :: Parsing out Unique Objects"
			$UniqueObjects = $MyObjects | Group-Object -Property Computername
			foreach ($UniqueObject in $UniqueObjects)
			{
				$myobj = @{ }
				$myobj.ComputerName = $UniqueObject.Name
				$myobj.Count = $UniqueObject.count
				
				$obj = New-Object PSObject -Property $myobj
				$obj.PSTypeNames.Clear()
				$obj.PSTypeNames.Add('BSonPosh.KMS.ActivationDetail')
				$obj
			}
			
		}
		else
		{
			$MyObjects
		}
		
	}
	#endregion 
	
	#region Get-KMSServer 
	
	function Get-KMSServer
	{
		
		    <#
		        .Synopsis 
		            Gets the KMS Server.
		            
		        .Description
		            Gets a PSCustomObject (BSonPosh.KMS.Server) for the KMS Server.
		            
		        .Parameter KMS
		            KMS Server to get.
		            
		        .Example
		            Get-KMSServer -kms MyKMSServer
		            Description
		            -----------
		            Gets a KMS Server object for 'MyKMSServer'
		    
		        .OUTPUTS
		            PSCustomObject
		            
		        .INPUTS
		            System.String
		            
		        .Link
		            Get-KMSActivationDetail
		            Get-KMSStatus
		            
		        .Notes
		            NAME:      Get-KMSServer
		            AUTHOR:    bsonposh
		            Website:   http://www.bsonposh.com
		            Version:   1
		            #Requires -Version 2.0
		    #>
		
		[Cmdletbinding()]
		Param (
			[Parameter(ValueFromPipelineByPropertyName = $true, ValueFromPipeline = $true)]
			[string]$KMS
		)
		if (!$KMS)
		{
			Write-Verbose " [Get-KMSServer] :: No KMS Server Passed... Using Discovery"
			$KMS = Test-KMSServerDiscovery | select -ExpandProperty ComputerName
		}
		try
		{
			Write-Verbose " [Get-KMSServer] :: Querying KMS Service using WMI"
			$KMSService = Get-WmiObject "SoftwareLicensingService" -ComputerName $KMS
			$myobj = @{
				ComputerName = $KMS
				Version = $KMSService.Version
				KMSEnable = $KMSService.KeyManagementServiceActivationDisabled -eq $false
				CurrentCount = $KMSService.KeyManagementServiceCurrentCount
				Port = $KMSService.KeyManagementServicePort
				DNSPublishing = $KMSService.KeyManagementServiceDnsPublishing
				TotalRequest = $KMSService.KeyManagementServiceTotalRequests
				FailedRequest = $KMSService.KeyManagementServiceFailedRequests
				Unlicensed = $KMSService.KeyManagementServiceUnlicensedRequests
				Licensed = $KMSService.KeyManagementServiceLicensedRequests
				InitialGracePeriod = $KMSService.KeyManagementServiceOOBGraceRequests
				LicenseExpired = $KMSService.KeyManagementServiceOOTGraceRequests
				NonGenuineGracePeriod = $KMSService.KeyManagementServiceNonGenuineGraceRequests
				LicenseWithNotification = $KMSService.KeyManagementServiceNotificationRequests
				ActivationInterval = $KMSService.VLActivationInterval
				RenewalInterval = $KMSService.VLRenewalInterval
			}
			
			$obj = New-Object PSObject -Property $myobj
			$obj.PSTypeNames.Clear()
			$obj.PSTypeNames.Add('BSonPosh.KMS.Server')
			$obj
		}
		catch
		{
			Write-Verbose " [Get-KMSServer] :: Error: $($Error[0])"
		}
		
	}
	#endregion 
	
	#region Get-KMSStatus 
	
	function Get-KMSStatus
	{
		
		    <#
		        .Synopsis 
		            Gets the KMS status from the Computer Name specified.
		            
		        .Description
		            Gets the KMS status from the Computer Name specified (Default local host.) Returns a custom object (BSonPosh.KMS.Status)
		            
		        .Parameter ComputerName
		            Computer to get the KMS Status for.
		        
		        .Example
		            Get-KMSStatus mypc
		            Description
		            -----------
		            Returns a KMS status object for Computer 'mypc'
		    
		        .OUTPUTS
		            PSCustomObject
		            
		        .INPUTS
		            System.String
		            
		        .Link
		            Get-KMSActivationDetail
		            Get-KMSServer
		            
		        .Notes
		            NAME:      Get-KMSStatus
		            AUTHOR:    bsonposh
		            Website:   http://www.bsonposh.com
		            Version:   1
		            #Requires -Version 2.0
		    #>
		
		[Cmdletbinding()]
		Param (
			[Parameter(ValueFromPipelineByPropertyName = $true, ValueFromPipeline = $true)]
			[string]$ComputerName = $Env:COMPUTERNAME
		)
		Process
		{
			
			Write-Verbose " [Get-KMSStatus] :: Process Start"
			if ($ComputerName -match "(.*)(\$)$")
			{
				$ComputerName = $ComputerName -replace "(.*)(\$)$", '$1'
			}
			$Query = "Select * FROM SoftwareLicensingProduct WHERE Description LIKE '%VOLUME_KMSCLIENT%'"
			Write-Verbose " [Get-KMSStatus] :: ComputerName = $ComputerName"
			Write-Verbose " [Get-KMSStatus] :: Query = $Query"
			try
			{
				Write-Verbose " [Get-KMSStatus] :: Calling WMI"
				$WMIResult = Get-WmiObject -ComputerName $ComputerName -query $Query
				foreach ($result in $WMIResult)
				{
					Write-Verbose " [Get-KMSStatus] :: Creating Hash Table"
					$myobj = @{ }
					Write-Verbose " [Get-KMSStatus] :: Setting ComputerName to $ComputerName"
					$myobj.ComputerName = $ComputerName
					Write-Verbose " [Get-KMSStatus] :: Setting KMSServer to $($result.KeyManagementServiceMachine)"
					$myobj.KMSServer = $result.KeyManagementServiceMachine
					Write-Verbose " [Get-KMSStatus] :: Setting KMSPort to $($result.KeyManagementServicePort)"
					$myobj.KMSPort = $result.KeyManagementServicePort
					Write-Verbose " [Get-KMSStatus] :: Setting LicenseFamily to $($result.LicenseFamily)"
					$myobj.LicenseFamily = $result.LicenseFamily
					Write-Verbose " [Get-KMSStatus] :: Setting Status to $($result.LicenseStatus)"
					$myobj.Status = ConvertTo-KMSStatus $result.LicenseStatus
					Write-Verbose " [Get-KMSStatus] :: Creating Object"
					
					$obj = New-Object PSObject -Property $myobj
					$obj.PSTypeNames.Clear()
					$obj.PSTypeNames.Add('BSonPosh.KMS.Status')
					$obj
				}
			}
			catch
			{
				Write-Verbose " [Get-KMSStatus] :: Error - $($Error[0])"
			}
			
		}
		
	}
	#endregion 
	
	#region Test-KMSIsActivated 
	
	function Test-KMSIsActivated
	{
		
		    <#
		        .Synopsis 
		            Test machine for activation.
		            
		        .Description
		            Test machine for activation.
		            
		        .Parameter ComputerName
		            Name of the Computer to test activation on (Default is localhost.)
		            
		        .Example
		            Test-KMSIsActivated
		            Description
		            -----------
		            Test activation on local machine
		    
		        .Example
		            Test-KMSIsActivated -ComputerName MyServer
		            Description
		            -----------
		            Test activation on MyServer
		            
		        .Example
		            $Servers | Test-KMSIsActivated
		            Description
		            -----------
		            Test activation for each machine in the pipeline
		            
		        .OUTPUTS
		            Object
		            
		        .INPUTS
		            System.String
		            
		        .Link
		            N/A
		            
		        .Notes
		            NAME:      Test-KMSIsActivated
		            AUTHOR:    bsonposh
		            Website:   http://www.bsonposh.com
		            Version:   1
		            #Requires -Version 2.0
		    #>
		
		[Cmdletbinding()]
		Param (
			
			[alias('dnsHostName')]
			[Parameter(ValueFromPipelineByPropertyName = $true, ValueFromPipeline = $true)]
			[string]$ComputerName = $Env:COMPUTERNAME
			
		)
		
		Process
		{
			
			Write-Verbose " [Test-KMSActivation] :: Process start"
			if ($ComputerName -match "(.*)(\$)$")
			{
				$ComputerName = $ComputerName -replace "(.*)(\$)$", '$1'
			}
			Write-Verbose " [Test-KMSActivation] :: ComputerName = $ComputerName"
			if (Test-Host $ComputerName -TCP 135)
			{
				Write-Verbose " [Test-KMSActivation] :: Process start"
				$status = Get-KMSStatus -ComputerName $ComputerName
				if ($status.Status -eq "Licensed")
				{
					$_
				}
			}
			
		}
	}
	
	#endregion 
	
	#region Test-KMSServerDiscovery 
	
	function Test-KMSServerDiscovery
	{
		
		    <#
		        .Synopsis 
		            Test KMS server discovery.
		            
		        .Description
		            Test KMS server discovery.
		            
		        .Parameter DNSSuffix
		            DNSSuffix to do discovery on.
		            
		        .Example
		            Test-KMSServerDiscovery
		            Description
		            -----------
		            Test KMS server discovery on local machine
		            
		        .OUTPUTS
		            PSCustomObject (BSonPosh.KMS.DiscoveryResult)
		            
		        .INPUTS
		            System.String
		            
		        .Link
		            N/A
		            
		        .Notes
		            NAME:      Test-KMSServerDiscovery
		            AUTHOR:    bsonposh
		            Website:   http://www.bsonposh.com
		            Version:   1
		            #Requires -Version 2.0
		    #>
		
		[Cmdletbinding()]
		Param ($DNSSuffix)
		
		Write-Verbose " [Test-KMSServerDiscovery] :: cmdlet started"
		Write-Verbose " [Test-KMSServerDiscovery] :: Getting dns primary suffix from registry"
		if (!$DNSSuffix)
		{
			$key = get-item -path HKLM:\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters
			$DNSSuffix = $key.GetValue("Domain")
		}
		Write-Verbose " [Test-KMSServerDiscovery] :: DNS Suffix = $DNSSuffix"
		$record = "_vlmcs._tcp.${DNSSuffix}"
		Write-Verbose " [Test-KMSServerDiscovery] :: SRV Record to query for = $record"
		$NameRegEx = "\s+svr hostname   = (?<HostName>.*)$"
		$PortRegEX = "\s+(port)\s+ = (?<Port>\d+)"
		try
		{
			Write-Verbose " [Test-KMSServerDiscovery] :: Running nslookup"
			Write-Verbose " [Test-KMSServerDiscovery] :: Command - nslookup -type=srv $record 2>1 | select-string `"svr hostname`" -Context 4,0"
			$results = nslookup -type=srv $record 2>1 | select-string "svr hostname" -Context 4, 0
			if ($results)
			{
				Write-Verbose " [Test-KMSServerDiscovery] :: Found Entry: $Results"
			}
			else
			{
				Write-Verbose " [Test-KMSServerDiscovery] :: No Results found"
				return
			}
			Write-Verbose " [Test-KMSServerDiscovery] :: Creating Hash Table"
			$myobj = @{ }
			switch -regex ($results -split "\n")
			{
				$NameRegEx  {
					Write-Verbose " [Test-KMSServerDiscovery] :: ComputerName = $($Matches.HostName)"
					$myobj.ComputerName = $Matches.HostName
				}
				$PortRegEX  {
					Write-Verbose " [Test-KMSServerDiscovery] :: IP = $($Matches.Port)"
					$myobj.Port = $Matches.Port
				}
				Default
				{
					Write-Verbose " [Test-KMSServerDiscovery] :: Processing line: $_"
				}
			}
			Write-Verbose " [Test-KMSServerDiscovery] :: Creating Object"
			$obj = New-Object PSObject -Property $myobj
			$obj.PSTypeNames.Clear()
			$obj.PSTypeNames.Add('BSonPosh.KMS.DiscoveryResult')
			$obj
		}
		catch
		{
			Write-Verbose " [Test-KMSServerDiscovery] :: Error: $($Error[0])"
		}
		
	}
	#endregion 
	
	#region Test-KMSSupport 
	
	function Test-KMSSupport
	{
		
		    <#
		        .Synopsis 
		            Test machine for KMS Support.
		            
		        .Description
		            Test machine for KMS Support.
		            
		        .Parameter ComputerName
		            Name of the Computer to test KMS Support on (Default is localhost.)
		            
		        .Example
		            Test-KMSSupport
		            Description
		            -----------
		            Test KMS Support on local machine
		    
		        .Example
		            Test-KMSSupport -ComputerName MyServer
		            Description
		            -----------
		            Test KMS Support on MyServer
		            
		        .Example
		            $Servers | Test-KMSSupport
		            Description
		            -----------
		            Test KMS Support for each machine in the pipeline
		            
		        .OUTPUTS
		            Object
		            
		        .INPUTS
		            System.String
		            
		        .Link
		            N/A
		            
		        .Notes
		            NAME:      Test-KMSSupport
		            AUTHOR:    bsonposh
		            Website:   http://www.bsonposh.com
		            Version:   1
		            #Requires -Version 2.0
		    #>
		
		[Cmdletbinding()]
		Param (
			
			[alias('dnsHostName')]
			[Parameter(ValueFromPipelineByPropertyName = $true, ValueFromPipeline = $true)]
			[string]$ComputerName = $Env:COMPUTERNAME
			
		)
		
		Process
		{
			Write-Verbose " [Test-KMSSupport] :: Process start"
			if ($ComputerName -match "(.*)(\$)$")
			{
				$ComputerName = $ComputerName -replace "(.*)(\$)$", '$1'
			}
			Write-Verbose " [Test-KMSSupport] :: Testing Connectivity"
			if (Test-Host -ComputerName $ComputerName -TCPPort 135)
			{
				$Query = "Select __CLASS FROM SoftwareLicensingProduct"
				try
				{
					Write-Verbose " [Test-KMSSupport] :: Running WMI Query"
					$Result = Get-WmiObject -Query $Query -ComputerName $ComputerName
					Write-Verbose " [Test-KMSSupport] :: Result = $($Result.__CLASS)"
					if ($Result)
					{
						Write-Verbose " [Test-KMSSupport] :: Return $_"
						$_
					}
				}
				catch
				{
					Write-Verbose " [Test-KMSSupport] :: Error: $($Error[0])"
				}
			}
			else
			{
				Write-Verbose " [Test-KMSSupport] :: Failed Connectivity Test"
			}
			
		}
	}
	
	#endregion 
	
	### IP Calculator - source: http://www.indented.co.uk/index.php/2010/01/23/powershell-subnet-math/
	
	#region ConvertTo-BinaryIP
	function ConvertTo-BinaryIP
	{
		  <#
		    .Synopsis
		      Converts a Decimal IP address into a binary format.
		    .Description
		      ConvertTo-BinaryIP uses System.Convert to switch between decimal and binary format. The output from this function is dotted binary.
		    .Parameter IPAddress
		      An IP Address to convert.
		  #>
		
		[CmdLetBinding()]
		Param (
			[Parameter(Mandatory = $True, Position = 0, ValueFromPipeline = $True)]
			[Net.IPAddress]$IPAddress
		)
		
		Process
		{
			Return [String]::Join('.', $($IPAddress.GetAddressBytes() |
			ForEach-Object { [Convert]::ToString($_, 2).PadLeft(8, '0') }))
		}
	}
	#endregion ConvertTo-BinaryIP
	
	#region ConvertTo-DecimalIP
	function ConvertTo-DecimalIP
	{
		  <#
		    .Synopsis
		      Converts a Decimal IP address into a 32-bit unsigned integer.
		    .Description
		      ConvertTo-DecimalIP takes a decimal IP, uses a shift-like operation on each octet and returns a single UInt32 value.
		    .Parameter IPAddress
		      An IP Address to convert.
		  #>
		
		[CmdLetBinding()]
		Param (
			[Parameter(Mandatory = $True, Position = 0, ValueFromPipeline = $True)]
			[Net.IPAddress]$IPAddress
		)
		
		Process
		{
			$i = 3; $DecimalIP = 0;
			$IPAddress.GetAddressBytes() | ForEach-Object { $DecimalIP += $_ * [Math]::Pow(256, $i); $i-- }
			
			Return [UInt32]$DecimalIP
		}
	}
	#endregion ConvertTo-DecimalIP
	
	#region ConvertTo-MaskLength
	function ConvertTo-MaskLength
	{
		  <#
		    .Synopsis
		      Returns the length of a subnet mask.
		    .Description
		      ConvertTo-MaskLength accepts any IPv4 address as input, however the output value
		      only makes sense when using a subnet mask.
		    .Parameter SubnetMask
		      A subnet mask to convert into length
		  #>
		
		[CmdLetBinding()]
		Param (
			[Parameter(Mandatory = $True, Position = 0, ValueFromPipeline = $True)]
			[Alias("Mask")]
			[Net.IPAddress]$SubnetMask
		)
		
		Process
		{
			$Bits = "$($SubnetMask.GetAddressBytes() | ForEach-Object { [Convert]::ToString($_, 2) })" -Replace '[\s0]'
			
			Return $Bits.Length
		}
	}
	#endregion ConvertTo-MaskLength
	
	#region ConvertTo-Mask
	function ConvertTo-Mask
	{
		  <#
		    .Synopsis
		      Returns a dotted decimal subnet mask from a mask length.
		    .Description
		      ConvertTo-Mask returns a subnet mask in dotted decimal format from an integer value ranging
		      between 0 and 32. ConvertTo-Mask first creates a binary string from the length, converts
		      that to an unsigned 32-bit integer then calls ConvertTo-DottedDecimalIP to complete the operation.
		    .Parameter MaskLength
		      The number of bits which must be masked.
		  #>
		
		[CmdLetBinding()]
		Param (
			[Parameter(Mandatory = $True, Position = 0, ValueFromPipeline = $True)]
			[Alias("Length")]
			[ValidateRange(0, 32)]
			$MaskLength
		)
		
		Process
		{
			Return ConvertTo-DottedDecimalIP ([Convert]::ToUInt32($(("1" * $MaskLength).PadRight(32, "0")), 2))
		}
	}
	#endregion ConvertTo-Mask
	
	#region Get-NetworkAddress
	function Get-NetworkAddress
	{
		  <#
		    .Synopsis
		      Takes an IP address and subnet mask then calculates the network address for the range.
		    .Description
		      Get-NetworkAddress returns the network address for a subnet by performing a bitwise AND
		      operation against the decimal forms of the IP address and subnet mask. Get-NetworkAddress
		      expects both the IP address and subnet mask in dotted decimal format.
		    .Parameter IPAddress
		      Any IP address within the network range.
		    .Parameter SubnetMask
		      The subnet mask for the network.
		  #>
		
		[CmdLetBinding()]
		Param (
			[Parameter(Mandatory = $True, Position = 0, ValueFromPipeline = $True)]
			[Net.IPAddress]$IPAddress,
			[Parameter(Mandatory = $True, Position = 1)]
			[Alias("Mask")]
			[Net.IPAddress]$SubnetMask
		)
		
		Process
		{
			Return ConvertTo-DottedDecimalIP ((ConvertTo-DecimalIP $IPAddress) -BAnd (ConvertTo-DecimalIP $SubnetMask))
		}
	}
	#endregion Get-NetworkAddress
	
	#region Get-BroadcastAddress
	function Get-BroadcastAddress
	{
		  <#
		    .Synopsis
		      Takes an IP address and subnet mask then calculates the broadcast address for the range.
		    .Description
		      Get-BroadcastAddress returns the broadcast address for a subnet by performing a bitwise AND
		      operation against the decimal forms of the IP address and inverted subnet mask.
		      Get-BroadcastAddress expects both the IP address and subnet mask in dotted decimal format.
		    .Parameter IPAddress
		      Any IP address within the network range.
		    .Parameter SubnetMask
		      The subnet mask for the network.
		  #>
		
		[CmdLetBinding()]
		Param (
			[Parameter(Mandatory = $True, Position = 0, ValueFromPipeline = $True)]
			[Net.IPAddress]$IPAddress,
			[Parameter(Mandatory = $True, Position = 1)]
			[Alias("Mask")]
			[Net.IPAddress]$SubnetMask
		)
		
		Process
		{
			Return ConvertTo-DottedDecimalIP $((ConvertTo-DecimalIP $IPAddress) -BOr `
			((-BNot (ConvertTo-DecimalIP $SubnetMask)) -BAnd [UInt32]::MaxValue))
		}
	}
	#endregion Get-BroadcastAddress
	
	#region Get-NetworkSummary
	function Get-NetworkSummary ([String]$IP, [String]$Mask)
	{
		If ($IP.Contains("/"))
		{
			$Temp = $IP.Split("/")
			$IP = $Temp[0]
			$Mask = $Temp[1]
		}
		
		If (!$Mask.Contains("."))
		{
			$Mask = ConvertTo-Mask $Mask
		}
		
		$DecimalIP = ConvertTo-DecimalIP $IP
		$DecimalMask = ConvertTo-DecimalIP $Mask
		
		$Network = $DecimalIP -BAnd $DecimalMask
		$Broadcast = $DecimalIP -BOr
		((-BNot $DecimalMask) -BAnd [UInt32]::MaxValue)
		$NetworkAddress = ConvertTo-DottedDecimalIP $Network
		$RangeStart = ConvertTo-DottedDecimalIP ($Network + 1)
		$RangeEnd = ConvertTo-DottedDecimalIP ($Broadcast - 1)
		$BroadcastAddress = ConvertTo-DottedDecimalIP $Broadcast
		$MaskLength = ConvertTo-MaskLength $Mask
		
		$BinaryIP = ConvertTo-BinaryIP $IP; $Private = $False
		Switch -RegEx ($BinaryIP)
		{
			"^1111"  { $Class = "E"; $SubnetBitMap = "1111" }
			"^1110"  { $Class = "D"; $SubnetBitMap = "1110" }
			"^110"   {
				$Class = "C"
				If ($BinaryIP -Match "^11000000.10101000") { $Private = $True }
			}
			"^10"    {
				$Class = "B"
				If ($BinaryIP -Match "^10101100.0001") { $Private = $True }
			}
			"^0"     {
				$Class = "A"
				If ($BinaryIP -Match "^00001010") { $Private = $True }
			}
		}
		
		$NetInfo = New-Object Object
		Add-Member NoteProperty "Network" -Input $NetInfo -Value $NetworkAddress
		Add-Member NoteProperty "Broadcast" -Input $NetInfo -Value $BroadcastAddress
		Add-Member NoteProperty "Range" -Input $NetInfo `
				   -Value "$RangeStart - $RangeEnd"
		Add-Member NoteProperty "Mask" -Input $NetInfo -Value $Mask
		Add-Member NoteProperty "MaskLength" -Input $NetInfo -Value $MaskLength
		Add-Member NoteProperty "Hosts" -Input $NetInfo `
				   -Value $($Broadcast - $Network - 1)
		Add-Member NoteProperty "Class" -Input $NetInfo -Value $Class
		Add-Member NoteProperty "IsPrivate" -Input $NetInfo -Value $Private
		
		Return $NetInfo
	}
	#endregion Get-NetworkSummary
	
	
	### Technet Functions http://technet.com
	
	#region Test-Server
	#http://gallery.technet.microsoft.com/scriptcenter/Powershell-Test-Server-e0cdea9a
	function Test-Server
	{
		[cmdletBinding()]
		param (
			[parameter(Mandatory = $true, ValueFromPipeline = $true)]
			[string[]]$ComputerName,
			[parameter(Mandatory = $false)]
			[switch]$CredSSP,
			[Management.Automation.PSCredential]$Credential)
		
		begin
		{
			$total = Get-Date
			$results = @()
			if ($credssp) { if (!($credential)) { Write-Host "must supply Credentials with CredSSP test"; break } }
		}
		process
		{
			foreach ($name in $computername)
			{
				$dt = $cdt = Get-Date
				Write-verbose "Testing: $Name"
				$failed = 0
				try
				{
					$DNSEntity = [Net.Dns]::GetHostEntry($name)
					$domain = ($DNSEntity.hostname).replace("$name.", "")
					$ips = $DNSEntity.AddressList | %{ $_.IPAddressToString }
				}
				catch
				{
					$rst = "" | select Name, IP, Domain, Ping, WSMAN, CredSSP, RemoteReg, RPC, RDP
					$rst.name = $name
					$results += $rst
					$failed = 1
				}
				Write-verbose "DNS:  $((New-TimeSpan $dt ($dt = get-date)).totalseconds)"
				if ($failed -eq 0)
				{
					foreach ($ip in $ips)
					{
						
						$rst = "" | select Name, IP, Domain, Ping, WSMAN, CredSSP, RemoteReg, RPC, RDP
						$rst.name = $name
						$rst.ip = $ip
						$rst.domain = $domain
						####RDP Check (firewall may block rest so do before ping
						try
						{
							$socket = New-Object Net.Sockets.TcpClient($name, 3389)
							if ($socket -eq $null)
							{
								$rst.RDP = $false
							}
							else
							{
								$rst.RDP = $true
								$socket.close()
							}
						}
						catch
						{
							$rst.RDP = $false
						}
						Write-verbose "RDP:  $((New-TimeSpan $dt ($dt = get-date)).totalseconds)"
						#########ping
						if (test-connection $ip -count 1 -Quiet)
						{
							Write-verbose "PING:  $((New-TimeSpan $dt ($dt = get-date)).totalseconds)"
							$rst.ping = $true
							try
							{
								############wsman
									Test-WSMan $ip | Out-Null
									$rst.WSMAN = $true
								}
								catch
								{ $rst.WSMAN = $false }
								Write-verbose "WSMAN:  $((New-TimeSpan $dt ($dt = get-date)).totalseconds)"
								if ($rst.WSMAN -and $credssp) ########### credssp
	
								{
									try
									{
										Test-WSMan $ip -Authentication Credssp -Credential $cred
										$rst.CredSSP = $true
									}
									catch
									{ $rst.CredSSP = $false }
									Write-verbose "CredSSP:  $((New-TimeSpan $dt ($dt = get-date)).totalseconds)"
								}
								try ########remote reg
	
								{
									[Microsoft.Win32.RegistryKey]::OpenRemoteBaseKey([Microsoft.Win32.RegistryHive]::LocalMachine, $ip) | Out-Null
									$rst.remotereg = $true
								}
								catch
								{ $rst.remotereg = $false }
								Write-verbose "remote reg:  $((New-TimeSpan $dt ($dt = get-date)).totalseconds)"
								try ######### wmi
	
								{
									$w = [wmi] ''
									$w.psbase.options.timeout = 15000000
									$w.path = "\\$Name\root\cimv2:Win32_ComputerSystem.Name='$Name'"
									$w | select none | Out-Null
									$rst.RPC = $true
								}
								catch
								{ $rst.rpc = $false }
								Write-verbose "WMI:  $((New-TimeSpan $dt ($dt = get-date)).totalseconds)"
							}
							else
							{
								$rst.ping = $false
								$rst.wsman = $false
								$rst.credssp = $false
								$rst.remotereg = $false
								$rst.rpc = $false
							}
							$results += $rst
						}
					}
					Write-Verbose "Time for $($Name): $((New-TimeSpan $cdt ($dt)).totalseconds)"
					Write-Verbose "----------------------------"
				}
			}
			end
			{
				Write-Verbose "Time for all: $((New-TimeSpan $total ($dt)).totalseconds)"
				Write-Verbose "----------------------------"
				return $results
			}
		}
		#endregion
		
		#region Get-IpConfig
		# ==========================================================
		# Get-IPConfig.ps1
		# Made By : Assaf Miron
		#  http://assaf.miron.googlepages.com
		# Description : Formats the IP Config information into powershell
		# ==========================================================
		function Get-IPConfig
		{
			param ($Computername = "LocalHost",
				$OnlyConnectedNetworkAdapters = $true
			)
			gwmi -Class Win32_NetworkAdapterConfiguration -ComputerName $ComputerName | Where { $_.IPEnabled -eq $OnlyConnectedNetworkAdapters } | Format-List @{ Label = "Computer Name"; Expression = { $_.__SERVER } }, IPEnabled, Description, MACAddress, IPAddress, IPSubnet, DefaultIPGateway, DHCPEnabled, DHCPServer, @{ Label = "DHCP Lease Expires"; Expression = { [dateTime]$_.DHCPLeaseExpires } }, @{ Label = "DHCP Lease Obtained"; Expression = { [dateTime]$_.DHCPLeaseObtained } }
		}
		#endregion
		
		#region get-iisProperties http://gallery.technet.microsoft.com/scriptcenter/20a73ee4-5b17-49e8-8c33-3e08fd066af2
		function get-iisProperties
		{
			<#    
			.SYNOPSIS    
			    Retrieves IIS properties for Virtual and Web Directories residing on a server. 
			.DESCRIPTION  
			    Retrieves IIS properties for Virtual and Web Directories residing on a server. 
			.PARAMETER name 
			    Name of the IIS server you wish to query.  
			.PARAMETER UseDefaultCredentials  
			    Use the currently authenticated user's credentials    
			.NOTES    
			    Name: Get-iisProperties 
			    Author: Marc Carter 
			    DateCreated: 18Mar2011          
			.EXAMPLE    
			    Get-iisProperties -ComputerName "localhost"  
			      
			Description  
			------------  
			Returns IIS properties for Virtual and Web Directories residing on a server.  
			#>		
			[cmdletbinding(
						   DefaultParameterSetName = 'ComputerName',
						   ConfirmImpact = 'low'
						   )]
			Param (
				[Parameter(
						   Mandatory = $True,
						   Position = 0,
						   ParameterSetName = '',
						   ValueFromPipeline = $True)]
				[string][ValidatePattern(".{2,}")]
				$ComputerName
			)
			Begin
			{
				$error.clear()
				$ComputerName = $ComputerName.toUpper()
				$array = @()
			}
			
			Process
			{
				#define ManagementObjectSearcher, Path and Authentication 
				$objWMI = [WmiSearcher] "Select * From IIsWebServer"
				$objWMI.Scope.Path = "\\$ComputerName\root\microsoftiisv2"
				$objWMI.Scope.Options.Authentication = [System.Management.AuthenticationLevel]::PacketPrivacy
				$ComputerName
				
				trap { 'An Error occured: {0}' -f $_.Exception.Message; break }
				
				#Get System.Management.ManagementObjectCollection 
				$obj = $objWMI.Get()
				
				#Iterate through each object 
				$obj | % {
					$Identifier = $_.Name
					[string]$adsiPath = "IIS://$ComputerName/" + $_.name
					$iis = [adsi]$("IIS://$ComputerName/" + $_.name)
					#Enum Child Items but only IIsWebVirtualDir & IIsWebDirectory 
					$iis.Psbase.Children | where { $_.SchemaClassName -eq "IIsWebVirtualDir" -or $_.SchemaClassName -eq "IIsWebDirectory" } | % {
						$currentPath = $adsiPath + "/" + $_.Name
						#Enum Subordinate Child Items  
						$_.Psbase.Children | where { $_.SchemaClassName -eq "IIsWebVirtualDir" } | Select Name, AppPoolId, SchemaClassName, Path | % {
							$subIIS = [adsi]$("$currentPath/" + $_.name)
							foreach ($mapping in $subIIS.ScriptMaps)
							{
								if ($mapping.StartsWith(".aspx")) { $NETversion = $mapping.substring(($mapping.toLower()).indexOf("framework\") + 10, 9) }
							}
							#Define System.Object | add member properties 
							$tmpObj = New-Object Object
							$tmpObj | add-member -membertype noteproperty -name "Name" -value $_.Name
							$tmpObj | add-member -membertype noteproperty -name "Identifier" -value $Identifier
							$tmpObj | add-member -membertype noteproperty -name "ASP.NET" -value $NETversion
							$tmpObj | add-member -membertype noteproperty -name "AppPoolId" -value $($_.AppPoolId)
							$tmpObj | add-member -membertype noteproperty -name "SchemaClassName" -value $_.SchemaClassName
							$tmpObj | add-member -membertype noteproperty -name "Path" -value $($_.Path)
							
							#Populate Array with Object properties 
							$array += $tmpObj
						}
					}
				}
			} #End process 
			End
			{
				#Display results 
				$array | ft -auto
			}
		} #End function Get-IISProperties
		#endregion
		
		#region Get-USB
		
		function Get-USB
		{
		    <#
		    .Synopsis
		        Gets USB devices attached to the system
		    .Description
		        Uses WMI to get the USB Devices attached to the system
		    .Example
		        Get-USB
		    .Example
		        Get-USB | Group-Object Manufacturer  
		    .Parameter ComputerName
		        The name of the computer to get the USB devices from
		    #>
			param ($computerName = "localhost")
			Get-WmiObject Win32_USBControllerDevice -ComputerName $ComputerName `
						  -Impersonation Impersonate -Authentication PacketPrivacy |
			Foreach-Object { [Wmi]$_.Dependent }
		}
		#endregion
		
		#region Get-ComputerComment
		#http://gallery.technet.microsoft.com/5c5bb1f7-519b-43b3-9d3a-dce8b9390244
		function Get-ComputerComment($ComputerName)
		{
			$Registry = [Microsoft.Win32.RegistryKey]::OpenRemoteBaseKey("LocalMachine", $ComputerName)
			if ($Registry -eq $Null)
			{
				return "Can't connect to the registry"
			}
			$RegKey = $Registry.OpenSubKey("SYSTEM\CurrentControlSet\Services\lanmanserver\parameters")
			if ($RegKey -eq $Null)
			{
				return "No Computer Description"
			}
			
			[string]$Description = $RegKey.GetValue("srvcomment")
			if ($Description -eq $Null)
			{
				$Description = "No Computer Description"
			}
			return "Computer Description: $Description "
		}
		#endregion
		
		#region Set-ComputerComment
		#http://gallery.technet.microsoft.com/5c5bb1f7-519b-43b3-9d3a-dce8b9390244
		function Set-ComputerComment
		{
			param (
				[string]$ComputerName,
				[string]$Description
			)
			# $OsInfo = Get-WmiObject Win32_OperatingSystem -Computer $Computer 
			# $Description  = $OsInfo 
			$Registry = [Microsoft.Win32.RegistryKey]::OpenRemoteBaseKey("LocalMachine", $ComputerName)
			if ($Registry -eq $Null)
			{
				return $Null
			}
			$RegPermCheck = [Microsoft.Win32.RegistryKeyPermissionCheck]::ReadWriteSubTree
			$RegKeyRights = [System.Security.AccessControl.RegistryRights]::SetValue
			$RegKey = $Registry.OpenSubKey("SYSTEM\CurrentControlSet\Services\lanmanserver\parameters", $RegPermCheck, $RegKeyRights)
			if ($RegKey -eq $Null)
			{
				return $Null
			}
			$RegKey.SetValue("srvcomment", $Description)
		}
		#endregion
		
		#region Get-DnsDomain
		function Get-DnsDomain()
		#http://gallery.technet.microsoft.com/5c5bb1f7-519b-43b3-9d3a-dce8b9390244
	
		{
			# --------------------------------------------------------- 
			# Get the name of the domain this computer belongs to. 
			# --------------------------------------------------------- 
			if ($Global:DnsDomain -eq $null)
			{
				$WmiInfo = get-wmiobject "Win32_NTDomain" | where { $_.DnsForestName -ne $null }
				$Global:DnsDomain = $WmiInfo.DnsForestName
			}
			return $Global:DnsDomain
		}
		#endregion
		
		#region Get-AdDomainPath
		function Get-AdDomainPath()
		#http://gallery.technet.microsoft.com/5c5bb1f7-519b-43b3-9d3a-dce8b9390244
	
		{
			$DnsDomain = Get-DnsDomain
			$Tokens = $DnsDomain.Split(".")
			$Seperator = ""
			$Path = ""
			foreach ($Token in $Tokens)
			{
				$Path += $Seperator
				$Path += "DC="
				$Path += $Token
				$Seperator = ","
			}
			return $Path
		}
		#endregion
		
		#region Get-ComputerAdDescription
		#http://gallery.technet.microsoft.com/5c5bb1f7-519b-43b3-9d3a-dce8b9390244
		function Get-ComputerAdDescription($ComputerName)
		{
			$Path = Get-AdDomainPath
			$Dom = "LDAP://" + $Path
			$Root = New-Object DirectoryServices.DirectoryEntry $Dom
			
			# Create a selector and start searching from the root 
			$Selector = New-Object DirectoryServices.DirectorySearcher
			$Selector.SearchRoot = $Root
			$Selector.Filter = "(objectclass=computer)";
			
			$AdObjects = $Selector.findall() | where { $_.properties.cn -match $ComputerName }
			
			if (!$AdObject -is [System.DirectoryServices.SearchResult])
			{
				return $Null
			}
			
			$Description = $AdObjects.Properties["description"]
			
			return $Description
		}
		#endregion
		
		#region Show-MsgBox
		<# 
		            .SYNOPSIS  
		            Shows a graphical message box, with various prompt types available. 
		 
		            .DESCRIPTION 
		            Emulates the Visual Basic MsgBox function.  It takes four parameters, of which only the prompt is mandatory 
		 
		            .INPUTS 
		            The parameters are:- 
		             
		            Prompt (mandatory):  
		                Text string that you wish to display 
		                 
		            Title (optional): 
		                The title that appears on the message box 
		                 
		            Icon (optional).  Available options are: 
		                Information, Question, Critical, Exclamation (not case sensitive) 
		                
		            BoxType (optional). Available options are: 
		                OKOnly, OkCancel, AbortRetryIgnore, YesNoCancel, YesNo, RetryCancel (not case sensitive) 
		                 
		            DefaultButton (optional). Available options are: 
		                1, 2, 3 
		 
		            .OUTPUTS 
		            Microsoft.VisualBasic.MsgBoxResult 
		 
		            .EXAMPLE 
		            C:\PS> Show-MsgBox Hello 
		            Shows a popup message with the text "Hello", and the default box, icon and defaultbutton settings. 
		 
		            .EXAMPLE 
		            C:\PS> Show-MsgBox -Prompt "This is the prompt" -Title "This Is The Title" -Icon Critical -BoxType YesNo -DefaultButton 2 
		            Shows a popup with the parameter as supplied. 
		 
		            .LINK 
		            http://msdn.microsoft.com/en-us/library/microsoft.visualbasic.msgboxresult.aspx 
		 
		            .LINK 
		            http://msdn.microsoft.com/en-us/library/microsoft.visualbasic.msgboxstyle.aspx 
		            #>	
		# By BigTeddy August 24, 2011 
		# http://social.technet.microsoft.com/profile/bigteddy/. 
		
		function Show-MsgBox
		{
			
			[CmdletBinding()]
			param (
				[Parameter(Position = 0, Mandatory = $true)]
				[string]$Prompt,
				[Parameter(Position = 1, Mandatory = $false)]
				[string]$Title = "",
				[Parameter(Position = 2, Mandatory = $false)]
				[ValidateSet("Information", "Question", "Critical", "Exclamation")]
				[string]$Icon = "Information",
				[Parameter(Position = 3, Mandatory = $false)]
				[ValidateSet("OKOnly", "OKCancel", "AbortRetryIgnore", "YesNoCancel", "YesNo", "RetryCancel")]
				[string]$BoxType = "OkOnly",
				[Parameter(Position = 4, Mandatory = $false)]
				[ValidateSet(1, 2, 3)]
				[int]$DefaultButton = 1
			)
			[System.Reflection.Assembly]::LoadWithPartialName("Microsoft.VisualBasic") | Out-Null
			switch ($Icon)
			{
				"Question" { $vb_icon = [microsoft.visualbasic.msgboxstyle]::Question }
				"Critical" { $vb_icon = [microsoft.visualbasic.msgboxstyle]::Critical }
				"Exclamation" { $vb_icon = [microsoft.visualbasic.msgboxstyle]::Exclamation }
				"Information" { $vb_icon = [microsoft.visualbasic.msgboxstyle]::Information }
			}
			switch ($BoxType)
			{
				"OKOnly" { $vb_box = [microsoft.visualbasic.msgboxstyle]::OKOnly }
				"OKCancel" { $vb_box = [microsoft.visualbasic.msgboxstyle]::OkCancel }
				"AbortRetryIgnore" { $vb_box = [microsoft.visualbasic.msgboxstyle]::AbortRetryIgnore }
				"YesNoCancel" { $vb_box = [microsoft.visualbasic.msgboxstyle]::YesNoCancel }
				"YesNo" { $vb_box = [microsoft.visualbasic.msgboxstyle]::YesNo }
				"RetryCancel" { $vb_box = [microsoft.visualbasic.msgboxstyle]::RetryCancel }
			}
			switch ($Defaultbutton)
			{
				1 { $vb_defaultbutton = [microsoft.visualbasic.msgboxstyle]::DefaultButton1 }
				2 { $vb_defaultbutton = [microsoft.visualbasic.msgboxstyle]::DefaultButton2 }
				3 { $vb_defaultbutton = [microsoft.visualbasic.msgboxstyle]::DefaultButton3 }
			}
			$popuptype = $vb_icon -bor $vb_box -bor $vb_defaultbutton
			$ans = [Microsoft.VisualBasic.Interaction]::MsgBox($prompt, $popuptype, $title)
			return $ans
		} #end
		#endregion
		
		#region Run-RemoteCMD
		#http://gallery.technet.microsoft.com/scriptcenter/56962f03-0243-4c83-8cdd-88c37898ccc4
		function Run-RemoteCMD
		{
			param (
				[Parameter(Mandatory = $true, valuefrompipeline = $true)]
				[string]$ComputerName,
				[string]$Command)
			begin
			{
				
				[string]$cmd = "CMD.EXE /C " + $command
			}
			process
			{
				$newproc = Invoke-WmiMethod -class Win32_process -name Create -ArgumentList ($cmd) -ComputerName $ComputerName
				if ($newproc.ReturnValue -eq 0)
				{ Write-Output " Command $($command) invoked Sucessfully on $($ComputerName)" }
				# if command is sucessfully invoked it doesn't mean that it did what its supposed to do 
				#it means that the command only sucessfully ran on the cmd.exe of the server 
				#syntax errors can occur due to user input  
			}
			End { Write-Output "Script ...END" }
		}
		#endregion
		
		# Lee Holmes - http://www.leeholmes.com
		
		#region Test-PSRemoting
		
		function Test-PSRemoting
		{
			Param (
				[alias('dnsHostName')]
				[Parameter(Mandatory = $true, ValueFromPipelineByPropertyName = $true, ValueFromPipeline = $true)]
				[string]$ComputerName
			)
			Process
			{
				Write-Verbose " [Test-PSRemoting] :: Start Process"
				if ($ComputerName -match "(.*)(\$)$")
				{
					$ComputerName = $ComputerName -replace "(.*)(\$)$", '$1'
				}
				
				try
				{
					
					$result = Invoke-Command -ComputerName $computername { 1 } -ErrorAction SilentlyContinue
					
					if ($result -eq 1)
					{
						return $True
					}
					else
					{
						return $False
					}
				}
				catch
				{
					return $False
				}
			}
		}
		
		#endregion
		
		# Sapien Forum
		
		#region Show-InputBox
		#http://www.sapien.com/forums/scriptinganswers/forum_posts.asp?TID=2890
		#$c=Show-Inputbox -message "Enter a computername" -title "Computername" -default $env:Computername
		#
		#if ($c.Trim()) {
		#  Get-WmiObject win32_computersystem -computer $c
		#  }
		Function Show-InputBox
		{
			Param ([string]$message = $(Throw "You must enter a prompt message"),
				[string]$title = "Input",
				[string]$default
			)
			
			[reflection.assembly]::loadwithpartialname("microsoft.visualbasic") | Out-Null
			[microsoft.visualbasic.interaction]::InputBox($message, $title, $default)
			
		}
		#endregion
	
	#region Show-InputBox
	#http://www.sapien.com/forums/scriptinganswers/forum_posts.asp?TID=2890
	#$c=Show-Inputbox -message "Enter a computername" -title "Computername" -default $env:Computername
	#
	#if ($c.Trim()) {
	#  Get-WmiObject win32_computersystem -computer $c
	#  }
	Function Show-InputBox1
	{
		Param ([string]$message = $(Throw "You must enter a prompt message"),
			[string]$title = "Input",
			[string]$default
		)
		
		[reflection.assembly]::loadwithpartialname("microsoft.visualbasic") | Out-Null
		[microsoft.visualbasic.interaction]::InputBox($message, $title, $default)
		
	}
	#endregion#endregion Source: Globals.ps1

#Start the application
Main ($CommandLine)
